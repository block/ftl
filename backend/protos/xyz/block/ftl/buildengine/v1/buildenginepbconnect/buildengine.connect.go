// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/buildengine/v1/buildengine.proto

package buildenginepbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/block/ftl/backend/protos/xyz/block/ftl/buildengine/v1"
	v1 "github.com/block/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BuildEngineServiceName is the fully-qualified name of the BuildEngineService service.
	BuildEngineServiceName = "xyz.block.ftl.buildengine.v1.BuildEngineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuildEngineServicePingProcedure is the fully-qualified name of the BuildEngineService's Ping RPC.
	BuildEngineServicePingProcedure = "/xyz.block.ftl.buildengine.v1.BuildEngineService/Ping"
	// BuildEngineServiceStreamEngineEventsProcedure is the fully-qualified name of the
	// BuildEngineService's StreamEngineEvents RPC.
	BuildEngineServiceStreamEngineEventsProcedure = "/xyz.block.ftl.buildengine.v1.BuildEngineService/StreamEngineEvents"
)

// BuildEngineServiceClient is a client for the xyz.block.ftl.buildengine.v1.BuildEngineService
// service.
type BuildEngineServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	StreamEngineEvents(context.Context, *connect.Request[v11.StreamEngineEventsRequest]) (*connect.ServerStreamForClient[v11.StreamEngineEventsResponse], error)
}

// NewBuildEngineServiceClient constructs a client for the
// xyz.block.ftl.buildengine.v1.BuildEngineService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildEngineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuildEngineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	buildEngineServiceMethods := v11.File_xyz_block_ftl_buildengine_v1_buildengine_proto.Services().ByName("BuildEngineService").Methods()
	return &buildEngineServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+BuildEngineServicePingProcedure,
			connect.WithSchema(buildEngineServiceMethods.ByName("Ping")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		streamEngineEvents: connect.NewClient[v11.StreamEngineEventsRequest, v11.StreamEngineEventsResponse](
			httpClient,
			baseURL+BuildEngineServiceStreamEngineEventsProcedure,
			connect.WithSchema(buildEngineServiceMethods.ByName("StreamEngineEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// buildEngineServiceClient implements BuildEngineServiceClient.
type buildEngineServiceClient struct {
	ping               *connect.Client[v1.PingRequest, v1.PingResponse]
	streamEngineEvents *connect.Client[v11.StreamEngineEventsRequest, v11.StreamEngineEventsResponse]
}

// Ping calls xyz.block.ftl.buildengine.v1.BuildEngineService.Ping.
func (c *buildEngineServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// StreamEngineEvents calls xyz.block.ftl.buildengine.v1.BuildEngineService.StreamEngineEvents.
func (c *buildEngineServiceClient) StreamEngineEvents(ctx context.Context, req *connect.Request[v11.StreamEngineEventsRequest]) (*connect.ServerStreamForClient[v11.StreamEngineEventsResponse], error) {
	return c.streamEngineEvents.CallServerStream(ctx, req)
}

// BuildEngineServiceHandler is an implementation of the
// xyz.block.ftl.buildengine.v1.BuildEngineService service.
type BuildEngineServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	StreamEngineEvents(context.Context, *connect.Request[v11.StreamEngineEventsRequest], *connect.ServerStream[v11.StreamEngineEventsResponse]) error
}

// NewBuildEngineServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildEngineServiceHandler(svc BuildEngineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	buildEngineServiceMethods := v11.File_xyz_block_ftl_buildengine_v1_buildengine_proto.Services().ByName("BuildEngineService").Methods()
	buildEngineServicePingHandler := connect.NewUnaryHandler(
		BuildEngineServicePingProcedure,
		svc.Ping,
		connect.WithSchema(buildEngineServiceMethods.ByName("Ping")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	buildEngineServiceStreamEngineEventsHandler := connect.NewServerStreamHandler(
		BuildEngineServiceStreamEngineEventsProcedure,
		svc.StreamEngineEvents,
		connect.WithSchema(buildEngineServiceMethods.ByName("StreamEngineEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xyz.block.ftl.buildengine.v1.BuildEngineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuildEngineServicePingProcedure:
			buildEngineServicePingHandler.ServeHTTP(w, r)
		case BuildEngineServiceStreamEngineEventsProcedure:
			buildEngineServiceStreamEngineEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuildEngineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildEngineServiceHandler struct{}

func (UnimplementedBuildEngineServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.buildengine.v1.BuildEngineService.Ping is not implemented"))
}

func (UnimplementedBuildEngineServiceHandler) StreamEngineEvents(context.Context, *connect.Request[v11.StreamEngineEventsRequest], *connect.ServerStream[v11.StreamEngineEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.buildengine.v1.BuildEngineService.StreamEngineEvents is not implemented"))
}
