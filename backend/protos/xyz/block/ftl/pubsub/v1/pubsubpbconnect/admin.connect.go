// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/pubsub/v1/admin.proto

package pubsubpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/block/ftl/backend/protos/xyz/block/ftl/pubsub/v1"
	v1 "github.com/block/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PubSubAdminServiceName is the fully-qualified name of the PubSubAdminService service.
	PubSubAdminServiceName = "xyz.block.ftl.pubsub.v1.PubSubAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PubSubAdminServicePingProcedure is the fully-qualified name of the PubSubAdminService's Ping RPC.
	PubSubAdminServicePingProcedure = "/xyz.block.ftl.pubsub.v1.PubSubAdminService/Ping"
	// PubSubAdminServiceResetOffsetsOfSubscriptionProcedure is the fully-qualified name of the
	// PubSubAdminService's ResetOffsetsOfSubscription RPC.
	PubSubAdminServiceResetOffsetsOfSubscriptionProcedure = "/xyz.block.ftl.pubsub.v1.PubSubAdminService/ResetOffsetsOfSubscription"
)

// PubSubAdminServiceClient is a client for the xyz.block.ftl.pubsub.v1.PubSubAdminService service.
type PubSubAdminServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Reset the offset for a subscription to the latest of each claimed partition.
	// If the receiver does not currently claim any partitions for a consumer group, then an empty response is returned.
	ResetOffsetsOfSubscription(context.Context, *connect.Request[v11.ResetOffsetsOfSubscriptionRequest]) (*connect.Response[v11.ResetOffsetsOfSubscriptionResponse], error)
}

// NewPubSubAdminServiceClient constructs a client for the
// xyz.block.ftl.pubsub.v1.PubSubAdminService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPubSubAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PubSubAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pubSubAdminServiceMethods := v11.File_xyz_block_ftl_pubsub_v1_admin_proto.Services().ByName("PubSubAdminService").Methods()
	return &pubSubAdminServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+PubSubAdminServicePingProcedure,
			connect.WithSchema(pubSubAdminServiceMethods.ByName("Ping")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		resetOffsetsOfSubscription: connect.NewClient[v11.ResetOffsetsOfSubscriptionRequest, v11.ResetOffsetsOfSubscriptionResponse](
			httpClient,
			baseURL+PubSubAdminServiceResetOffsetsOfSubscriptionProcedure,
			connect.WithSchema(pubSubAdminServiceMethods.ByName("ResetOffsetsOfSubscription")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pubSubAdminServiceClient implements PubSubAdminServiceClient.
type pubSubAdminServiceClient struct {
	ping                       *connect.Client[v1.PingRequest, v1.PingResponse]
	resetOffsetsOfSubscription *connect.Client[v11.ResetOffsetsOfSubscriptionRequest, v11.ResetOffsetsOfSubscriptionResponse]
}

// Ping calls xyz.block.ftl.pubsub.v1.PubSubAdminService.Ping.
func (c *pubSubAdminServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ResetOffsetsOfSubscription calls
// xyz.block.ftl.pubsub.v1.PubSubAdminService.ResetOffsetsOfSubscription.
func (c *pubSubAdminServiceClient) ResetOffsetsOfSubscription(ctx context.Context, req *connect.Request[v11.ResetOffsetsOfSubscriptionRequest]) (*connect.Response[v11.ResetOffsetsOfSubscriptionResponse], error) {
	return c.resetOffsetsOfSubscription.CallUnary(ctx, req)
}

// PubSubAdminServiceHandler is an implementation of the xyz.block.ftl.pubsub.v1.PubSubAdminService
// service.
type PubSubAdminServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Reset the offset for a subscription to the latest of each claimed partition.
	// If the receiver does not currently claim any partitions for a consumer group, then an empty response is returned.
	ResetOffsetsOfSubscription(context.Context, *connect.Request[v11.ResetOffsetsOfSubscriptionRequest]) (*connect.Response[v11.ResetOffsetsOfSubscriptionResponse], error)
}

// NewPubSubAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPubSubAdminServiceHandler(svc PubSubAdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pubSubAdminServiceMethods := v11.File_xyz_block_ftl_pubsub_v1_admin_proto.Services().ByName("PubSubAdminService").Methods()
	pubSubAdminServicePingHandler := connect.NewUnaryHandler(
		PubSubAdminServicePingProcedure,
		svc.Ping,
		connect.WithSchema(pubSubAdminServiceMethods.ByName("Ping")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	pubSubAdminServiceResetOffsetsOfSubscriptionHandler := connect.NewUnaryHandler(
		PubSubAdminServiceResetOffsetsOfSubscriptionProcedure,
		svc.ResetOffsetsOfSubscription,
		connect.WithSchema(pubSubAdminServiceMethods.ByName("ResetOffsetsOfSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xyz.block.ftl.pubsub.v1.PubSubAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PubSubAdminServicePingProcedure:
			pubSubAdminServicePingHandler.ServeHTTP(w, r)
		case PubSubAdminServiceResetOffsetsOfSubscriptionProcedure:
			pubSubAdminServiceResetOffsetsOfSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPubSubAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPubSubAdminServiceHandler struct{}

func (UnimplementedPubSubAdminServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.pubsub.v1.PubSubAdminService.Ping is not implemented"))
}

func (UnimplementedPubSubAdminServiceHandler) ResetOffsetsOfSubscription(context.Context, *connect.Request[v11.ResetOffsetsOfSubscriptionRequest]) (*connect.Response[v11.ResetOffsetsOfSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.pubsub.v1.PubSubAdminService.ResetOffsetsOfSubscription is not implemented"))
}
