syntax = "proto3";

package xyz.block.ftl.admin.v1;

import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/timeline/v1/event.proto";
import "xyz/block/ftl/v1/ftl.proto";
import "xyz/block/ftl/v1/schemaservice.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/admin/v1;adminpb";
option java_multiple_files = true;

message ConfigRef {
  optional string module = 1;
  string name = 2;
}

enum ConfigProvider {
  CONFIG_PROVIDER_UNSPECIFIED = 0;

  // Write values inline in the configuration file.
  CONFIG_PROVIDER_INLINE = 1;

  // Print configuration as environment variables.
  CONFIG_PROVIDER_ENVAR = 2;
}

message ConfigListRequest {
  optional string module = 1;
  optional bool include_values = 2;
  optional ConfigProvider provider = 3;
}
message ConfigListResponse {
  message Config {
    string ref_path = 1;
    optional bytes value = 2;
  }
  repeated Config configs = 1;
}

message ConfigGetRequest {
  ConfigRef ref = 1;
}
message ConfigGetResponse {
  bytes value = 1;
}

message ConfigSetRequest {
  optional ConfigProvider provider = 1;
  ConfigRef ref = 2;
  bytes value = 3;
}
message ConfigSetResponse {}

message ConfigUnsetRequest {
  optional ConfigProvider provider = 1;
  ConfigRef ref = 2;
}
message ConfigUnsetResponse {}

enum SecretProvider {
  SECRET_PROVIDER_UNSPECIFIED = 0;

  // Write values inline in the configuration file.
  SECRET_PROVIDER_INLINE = 1;

  // Print configuration as environment variables.
  SECRET_PROVIDER_ENVAR = 2;

  // Write to the system keychain.
  SECRET_PROVIDER_KEYCHAIN = 3;

  // Store a secret in the 1Password vault.
  SECRET_PROVIDER_OP = 4;

  // Store a secret in the AWS Secrets Manager.
  SECRET_PROVIDER_ASM = 5;
}

message SecretsListRequest {
  optional string module = 1;
  optional bool include_values = 2;
  optional SecretProvider provider = 3;
}
message SecretsListResponse {
  message Secret {
    string ref_path = 1;
    optional bytes value = 2;
  }
  repeated Secret secrets = 1;
}

message SecretGetRequest {
  ConfigRef ref = 1;
}
message SecretGetResponse {
  bytes value = 1;
}

message SecretSetRequest {
  optional SecretProvider provider = 1;
  ConfigRef ref = 2;
  bytes value = 3;
}
message SecretSetResponse {}

message SecretUnsetRequest {
  optional SecretProvider provider = 1;
  ConfigRef ref = 2;
}
message SecretUnsetResponse {}

message MapConfigsForModuleRequest {
  string module = 1;
}

message MapConfigsForModuleResponse {
  map<string, bytes> values = 1;
}

message MapSecretsForModuleRequest {
  string module = 1;
}

message MapSecretsForModuleResponse {
  map<string, bytes> values = 1;
}

enum SubscriptionOffset {
  SUBSCRIPTION_OFFSET_UNSPECIFIED = 0;
  SUBSCRIPTION_OFFSET_EARLIEST = 1;
  SUBSCRIPTION_OFFSET_LATEST = 2;
}

message ResetSubscriptionRequest {
  ftl.schema.v1.Ref subscription = 1;
  SubscriptionOffset offset = 2;
}

message ResetSubscriptionResponse {}

message ApplyChangesetRequest {
  // The modules to add or update.
  repeated ftl.schema.v1.Module modules = 1;
  // The deployments to remove.
  repeated string to_remove = 2;
}

message ApplyChangesetResponse {
  // The changeset, the result can be determined by checking the state
  ftl.schema.v1.Changeset changeset = 2;
}

message UpdateDeploymentRuntimeRequest {
  // The modules to add or update.
  ftl.schema.v1.RuntimeElement element = 1;
}

message UpdateDeploymentRuntimeResponse {}

message GetArtefactDiffsRequest {
  repeated string client_digests = 1;
}
message GetArtefactDiffsResponse {
  repeated string missing_digests = 1;
  // Artefacts that the client already has, and their path+executable status.
  repeated DeploymentArtefact client_artefacts = 2;
}

message GetDeploymentArtefactsRequest {
  string deployment_key = 1;
  repeated DeploymentArtefact have_artefacts = 2;
}
message GetDeploymentArtefactsResponse {
  DeploymentArtefact artefact = 1;
  bytes chunk = 2;
}
message DeploymentArtefact {
  bytes digest = 1;
  string path = 2;
  bool executable = 3;
}
message UploadArtefactRequest {
  // Digest of the complete artefact.
  bytes digest = 1;
  // Size of the complete artefact.
  int64 size = 2;
  // Chunk of the artefact.
  bytes chunk = 3;
}
message UploadArtefactResponse {}

message ClusterInfoRequest {}
message ClusterInfoResponse {
  string os = 1;
  string arch = 2;
}

message StreamChangesetLogsRequest {
  string changeset_key = 1;
}

message StreamChangesetLogsResponse {
  repeated timeline.v1.LogEvent logs = 1;
}

// AdminService is the service that provides and updates admin data. For example,
// it is used to encapsulate configuration and secrets.
service AdminService {
  rpc Ping(ftl.v1.PingRequest) returns (ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // List configuration.
  rpc ConfigList(ConfigListRequest) returns (ConfigListResponse);

  // Get a config value.
  rpc ConfigGet(ConfigGetRequest) returns (ConfigGetResponse);

  // Set a config value.
  rpc ConfigSet(ConfigSetRequest) returns (ConfigSetResponse);

  // Unset a config value.
  rpc ConfigUnset(ConfigUnsetRequest) returns (ConfigUnsetResponse);

  // List secrets.
  rpc SecretsList(SecretsListRequest) returns (SecretsListResponse);

  // Get a secret.
  rpc SecretGet(SecretGetRequest) returns (SecretGetResponse);

  // Set a secret.
  rpc SecretSet(SecretSetRequest) returns (SecretSetResponse);

  // Unset a secret.
  rpc SecretUnset(SecretUnsetRequest) returns (SecretUnsetResponse);

  // MapForModule combines all configuration values visible to the module.
  // Local values take precedence.
  rpc MapConfigsForModule(MapConfigsForModuleRequest) returns (MapConfigsForModuleResponse);

  // MapSecretsForModule combines all secrets visible to the module.
  // Local values take precedence.
  rpc MapSecretsForModule(MapSecretsForModuleRequest) returns (MapSecretsForModuleResponse);

  // Reset the offset for a subscription to the latest of each partition.
  rpc ResetSubscription(ResetSubscriptionRequest) returns (ResetSubscriptionResponse);

  // Creates and applies a changeset, returning the result
  // This blocks until the changeset has completed
  rpc ApplyChangeset(ApplyChangesetRequest) returns (stream ApplyChangesetResponse);

  // Updates a runtime deployment
  rpc UpdateDeploymentRuntime(UpdateDeploymentRuntimeRequest) returns (UpdateDeploymentRuntimeResponse);

  // Get the full schema.
  rpc GetSchema(ftl.v1.GetSchemaRequest) returns (ftl.v1.GetSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Pull schema changes from the Schema Service.
  //
  // Note that if there are no deployments this will block indefinitely, making it unsuitable for
  // just retrieving the schema. Use GetSchema for that.
  rpc PullSchema(ftl.v1.PullSchemaRequest) returns (stream ftl.v1.PullSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // RollbackChangeset Rolls back a failing changeset
  rpc RollbackChangeset(ftl.v1.RollbackChangesetRequest) returns (ftl.v1.RollbackChangesetResponse);
  // FailChangeset fails an active changeset.
  rpc FailChangeset(ftl.v1.FailChangesetRequest) returns (ftl.v1.FailChangesetResponse);

  rpc ClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse);

  // Get list of artefacts that differ between the server and client.
  rpc GetArtefactDiffs(GetArtefactDiffsRequest) returns (GetArtefactDiffsResponse);

  // Stream deployment artefacts from the server.
  //
  // Each artefact is streamed one after the other as a sequence of max 1MB
  // chunks.
  rpc GetDeploymentArtefacts(GetDeploymentArtefactsRequest) returns (stream GetDeploymentArtefactsResponse);
  // Upload an artefact to the server.
  rpc UploadArtefact(stream UploadArtefactRequest) returns (UploadArtefactResponse);

  rpc StreamChangesetLogs(StreamChangesetLogsRequest) returns (stream StreamChangesetLogsResponse);
}
