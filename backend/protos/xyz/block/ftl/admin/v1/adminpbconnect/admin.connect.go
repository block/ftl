// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/admin/v1/admin.proto

package adminpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/block/ftl/backend/protos/xyz/block/ftl/admin/v1"
	v1 "github.com/block/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "xyz.block.ftl.admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServicePingProcedure is the fully-qualified name of the AdminService's Ping RPC.
	AdminServicePingProcedure = "/xyz.block.ftl.admin.v1.AdminService/Ping"
	// AdminServiceConfigListProcedure is the fully-qualified name of the AdminService's ConfigList RPC.
	AdminServiceConfigListProcedure = "/xyz.block.ftl.admin.v1.AdminService/ConfigList"
	// AdminServiceConfigGetProcedure is the fully-qualified name of the AdminService's ConfigGet RPC.
	AdminServiceConfigGetProcedure = "/xyz.block.ftl.admin.v1.AdminService/ConfigGet"
	// AdminServiceConfigSetProcedure is the fully-qualified name of the AdminService's ConfigSet RPC.
	AdminServiceConfigSetProcedure = "/xyz.block.ftl.admin.v1.AdminService/ConfigSet"
	// AdminServiceConfigUnsetProcedure is the fully-qualified name of the AdminService's ConfigUnset
	// RPC.
	AdminServiceConfigUnsetProcedure = "/xyz.block.ftl.admin.v1.AdminService/ConfigUnset"
	// AdminServiceSecretsListProcedure is the fully-qualified name of the AdminService's SecretsList
	// RPC.
	AdminServiceSecretsListProcedure = "/xyz.block.ftl.admin.v1.AdminService/SecretsList"
	// AdminServiceSecretGetProcedure is the fully-qualified name of the AdminService's SecretGet RPC.
	AdminServiceSecretGetProcedure = "/xyz.block.ftl.admin.v1.AdminService/SecretGet"
	// AdminServiceSecretSetProcedure is the fully-qualified name of the AdminService's SecretSet RPC.
	AdminServiceSecretSetProcedure = "/xyz.block.ftl.admin.v1.AdminService/SecretSet"
	// AdminServiceSecretUnsetProcedure is the fully-qualified name of the AdminService's SecretUnset
	// RPC.
	AdminServiceSecretUnsetProcedure = "/xyz.block.ftl.admin.v1.AdminService/SecretUnset"
	// AdminServiceMapConfigsForModuleProcedure is the fully-qualified name of the AdminService's
	// MapConfigsForModule RPC.
	AdminServiceMapConfigsForModuleProcedure = "/xyz.block.ftl.admin.v1.AdminService/MapConfigsForModule"
	// AdminServiceMapSecretsForModuleProcedure is the fully-qualified name of the AdminService's
	// MapSecretsForModule RPC.
	AdminServiceMapSecretsForModuleProcedure = "/xyz.block.ftl.admin.v1.AdminService/MapSecretsForModule"
	// AdminServiceResetSubscriptionProcedure is the fully-qualified name of the AdminService's
	// ResetSubscription RPC.
	AdminServiceResetSubscriptionProcedure = "/xyz.block.ftl.admin.v1.AdminService/ResetSubscription"
	// AdminServiceApplyChangesetProcedure is the fully-qualified name of the AdminService's
	// ApplyChangeset RPC.
	AdminServiceApplyChangesetProcedure = "/xyz.block.ftl.admin.v1.AdminService/ApplyChangeset"
	// AdminServiceDeployImagesProcedure is the fully-qualified name of the AdminService's DeployImages
	// RPC.
	AdminServiceDeployImagesProcedure = "/xyz.block.ftl.admin.v1.AdminService/DeployImages"
	// AdminServiceUpdateDeploymentRuntimeProcedure is the fully-qualified name of the AdminService's
	// UpdateDeploymentRuntime RPC.
	AdminServiceUpdateDeploymentRuntimeProcedure = "/xyz.block.ftl.admin.v1.AdminService/UpdateDeploymentRuntime"
	// AdminServiceGetSchemaProcedure is the fully-qualified name of the AdminService's GetSchema RPC.
	AdminServiceGetSchemaProcedure = "/xyz.block.ftl.admin.v1.AdminService/GetSchema"
	// AdminServicePullSchemaProcedure is the fully-qualified name of the AdminService's PullSchema RPC.
	AdminServicePullSchemaProcedure = "/xyz.block.ftl.admin.v1.AdminService/PullSchema"
	// AdminServiceRollbackChangesetProcedure is the fully-qualified name of the AdminService's
	// RollbackChangeset RPC.
	AdminServiceRollbackChangesetProcedure = "/xyz.block.ftl.admin.v1.AdminService/RollbackChangeset"
	// AdminServiceFailChangesetProcedure is the fully-qualified name of the AdminService's
	// FailChangeset RPC.
	AdminServiceFailChangesetProcedure = "/xyz.block.ftl.admin.v1.AdminService/FailChangeset"
	// AdminServiceClusterInfoProcedure is the fully-qualified name of the AdminService's ClusterInfo
	// RPC.
	AdminServiceClusterInfoProcedure = "/xyz.block.ftl.admin.v1.AdminService/ClusterInfo"
	// AdminServiceGetArtefactDiffsProcedure is the fully-qualified name of the AdminService's
	// GetArtefactDiffs RPC.
	AdminServiceGetArtefactDiffsProcedure = "/xyz.block.ftl.admin.v1.AdminService/GetArtefactDiffs"
	// AdminServiceGetDeploymentArtefactsProcedure is the fully-qualified name of the AdminService's
	// GetDeploymentArtefacts RPC.
	AdminServiceGetDeploymentArtefactsProcedure = "/xyz.block.ftl.admin.v1.AdminService/GetDeploymentArtefacts"
	// AdminServiceUploadArtefactProcedure is the fully-qualified name of the AdminService's
	// UploadArtefact RPC.
	AdminServiceUploadArtefactProcedure = "/xyz.block.ftl.admin.v1.AdminService/UploadArtefact"
	// AdminServiceStreamLogsProcedure is the fully-qualified name of the AdminService's StreamLogs RPC.
	AdminServiceStreamLogsProcedure = "/xyz.block.ftl.admin.v1.AdminService/StreamLogs"
	// AdminServiceGetTopicInfoProcedure is the fully-qualified name of the AdminService's GetTopicInfo
	// RPC.
	AdminServiceGetTopicInfoProcedure = "/xyz.block.ftl.admin.v1.AdminService/GetTopicInfo"
	// AdminServiceGetSubscriptionInfoProcedure is the fully-qualified name of the AdminService's
	// GetSubscriptionInfo RPC.
	AdminServiceGetSubscriptionInfoProcedure = "/xyz.block.ftl.admin.v1.AdminService/GetSubscriptionInfo"
)

// AdminServiceClient is a client for the xyz.block.ftl.admin.v1.AdminService service.
type AdminServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List configuration.
	ConfigList(context.Context, *connect.Request[v11.ConfigListRequest]) (*connect.Response[v11.ConfigListResponse], error)
	// Get a config value.
	ConfigGet(context.Context, *connect.Request[v11.ConfigGetRequest]) (*connect.Response[v11.ConfigGetResponse], error)
	// Set a config value.
	ConfigSet(context.Context, *connect.Request[v11.ConfigSetRequest]) (*connect.Response[v11.ConfigSetResponse], error)
	// Unset a config value.
	ConfigUnset(context.Context, *connect.Request[v11.ConfigUnsetRequest]) (*connect.Response[v11.ConfigUnsetResponse], error)
	// List secrets.
	SecretsList(context.Context, *connect.Request[v11.SecretsListRequest]) (*connect.Response[v11.SecretsListResponse], error)
	// Get a secret.
	SecretGet(context.Context, *connect.Request[v11.SecretGetRequest]) (*connect.Response[v11.SecretGetResponse], error)
	// Set a secret.
	SecretSet(context.Context, *connect.Request[v11.SecretSetRequest]) (*connect.Response[v11.SecretSetResponse], error)
	// Unset a secret.
	SecretUnset(context.Context, *connect.Request[v11.SecretUnsetRequest]) (*connect.Response[v11.SecretUnsetResponse], error)
	// MapForModule combines all configuration values visible to the module.
	// Local values take precedence.
	MapConfigsForModule(context.Context, *connect.Request[v11.MapConfigsForModuleRequest]) (*connect.Response[v11.MapConfigsForModuleResponse], error)
	// MapSecretsForModule combines all secrets visible to the module.
	// Local values take precedence.
	MapSecretsForModule(context.Context, *connect.Request[v11.MapSecretsForModuleRequest]) (*connect.Response[v11.MapSecretsForModuleResponse], error)
	// Reset the offset for a subscription to the latest of each partition.
	ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error)
	// Creates and applies a changeset, returning the result
	// This blocks until the changeset has completed
	ApplyChangeset(context.Context, *connect.Request[v11.ApplyChangesetRequest]) (*connect.ServerStreamForClient[v11.ApplyChangesetResponse], error)
	// Creates and applies a changeset, returning the result
	// This blocks until the changeset has completed
	DeployImages(context.Context, *connect.Request[v11.DeployImagesRequest]) (*connect.ServerStreamForClient[v11.DeployImagesResponse], error)
	// Updates a runtime deployment
	UpdateDeploymentRuntime(context.Context, *connect.Request[v11.UpdateDeploymentRuntimeRequest]) (*connect.Response[v11.UpdateDeploymentRuntimeResponse], error)
	// Get the full schema.
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	// Pull schema changes from the Schema Service.
	//
	// Note that if there are no deployments this will block indefinitely, making it unsuitable for
	// just retrieving the schema. Use GetSchema for that.
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error)
	// RollbackChangeset Rolls back a failing changeset
	RollbackChangeset(context.Context, *connect.Request[v1.RollbackChangesetRequest]) (*connect.Response[v1.RollbackChangesetResponse], error)
	// FailChangeset fails an active changeset.
	FailChangeset(context.Context, *connect.Request[v1.FailChangesetRequest]) (*connect.Response[v1.FailChangesetResponse], error)
	ClusterInfo(context.Context, *connect.Request[v11.ClusterInfoRequest]) (*connect.Response[v11.ClusterInfoResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect.Request[v11.GetArtefactDiffsRequest]) (*connect.Response[v11.GetArtefactDiffsResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect.Request[v11.GetDeploymentArtefactsRequest]) (*connect.ServerStreamForClient[v11.GetDeploymentArtefactsResponse], error)
	// Upload an artefact to the server.
	UploadArtefact(context.Context) *connect.ClientStreamForClient[v11.UploadArtefactRequest, v11.UploadArtefactResponse]
	StreamLogs(context.Context, *connect.Request[v11.StreamLogsRequest]) (*connect.ServerStreamForClient[v11.StreamLogsResponse], error)
	// Get information about the state of pubsub topics.
	GetTopicInfo(context.Context, *connect.Request[v11.GetTopicInfoRequest]) (*connect.Response[v11.GetTopicInfoResponse], error)
	// Get information about the state of pubsub subscriptions.
	GetSubscriptionInfo(context.Context, *connect.Request[v11.GetSubscriptionInfoRequest]) (*connect.Response[v11.GetSubscriptionInfoResponse], error)
}

// NewAdminServiceClient constructs a client for the xyz.block.ftl.admin.v1.AdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v11.File_xyz_block_ftl_admin_v1_admin_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+AdminServicePingProcedure,
			connect.WithSchema(adminServiceMethods.ByName("Ping")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		configList: connect.NewClient[v11.ConfigListRequest, v11.ConfigListResponse](
			httpClient,
			baseURL+AdminServiceConfigListProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ConfigList")),
			connect.WithClientOptions(opts...),
		),
		configGet: connect.NewClient[v11.ConfigGetRequest, v11.ConfigGetResponse](
			httpClient,
			baseURL+AdminServiceConfigGetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ConfigGet")),
			connect.WithClientOptions(opts...),
		),
		configSet: connect.NewClient[v11.ConfigSetRequest, v11.ConfigSetResponse](
			httpClient,
			baseURL+AdminServiceConfigSetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ConfigSet")),
			connect.WithClientOptions(opts...),
		),
		configUnset: connect.NewClient[v11.ConfigUnsetRequest, v11.ConfigUnsetResponse](
			httpClient,
			baseURL+AdminServiceConfigUnsetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ConfigUnset")),
			connect.WithClientOptions(opts...),
		),
		secretsList: connect.NewClient[v11.SecretsListRequest, v11.SecretsListResponse](
			httpClient,
			baseURL+AdminServiceSecretsListProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SecretsList")),
			connect.WithClientOptions(opts...),
		),
		secretGet: connect.NewClient[v11.SecretGetRequest, v11.SecretGetResponse](
			httpClient,
			baseURL+AdminServiceSecretGetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SecretGet")),
			connect.WithClientOptions(opts...),
		),
		secretSet: connect.NewClient[v11.SecretSetRequest, v11.SecretSetResponse](
			httpClient,
			baseURL+AdminServiceSecretSetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SecretSet")),
			connect.WithClientOptions(opts...),
		),
		secretUnset: connect.NewClient[v11.SecretUnsetRequest, v11.SecretUnsetResponse](
			httpClient,
			baseURL+AdminServiceSecretUnsetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SecretUnset")),
			connect.WithClientOptions(opts...),
		),
		mapConfigsForModule: connect.NewClient[v11.MapConfigsForModuleRequest, v11.MapConfigsForModuleResponse](
			httpClient,
			baseURL+AdminServiceMapConfigsForModuleProcedure,
			connect.WithSchema(adminServiceMethods.ByName("MapConfigsForModule")),
			connect.WithClientOptions(opts...),
		),
		mapSecretsForModule: connect.NewClient[v11.MapSecretsForModuleRequest, v11.MapSecretsForModuleResponse](
			httpClient,
			baseURL+AdminServiceMapSecretsForModuleProcedure,
			connect.WithSchema(adminServiceMethods.ByName("MapSecretsForModule")),
			connect.WithClientOptions(opts...),
		),
		resetSubscription: connect.NewClient[v11.ResetSubscriptionRequest, v11.ResetSubscriptionResponse](
			httpClient,
			baseURL+AdminServiceResetSubscriptionProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ResetSubscription")),
			connect.WithClientOptions(opts...),
		),
		applyChangeset: connect.NewClient[v11.ApplyChangesetRequest, v11.ApplyChangesetResponse](
			httpClient,
			baseURL+AdminServiceApplyChangesetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ApplyChangeset")),
			connect.WithClientOptions(opts...),
		),
		deployImages: connect.NewClient[v11.DeployImagesRequest, v11.DeployImagesResponse](
			httpClient,
			baseURL+AdminServiceDeployImagesProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeployImages")),
			connect.WithClientOptions(opts...),
		),
		updateDeploymentRuntime: connect.NewClient[v11.UpdateDeploymentRuntimeRequest, v11.UpdateDeploymentRuntimeResponse](
			httpClient,
			baseURL+AdminServiceUpdateDeploymentRuntimeProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateDeploymentRuntime")),
			connect.WithClientOptions(opts...),
		),
		getSchema: connect.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+AdminServiceGetSchemaProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetSchema")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		pullSchema: connect.NewClient[v1.PullSchemaRequest, v1.PullSchemaResponse](
			httpClient,
			baseURL+AdminServicePullSchemaProcedure,
			connect.WithSchema(adminServiceMethods.ByName("PullSchema")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		rollbackChangeset: connect.NewClient[v1.RollbackChangesetRequest, v1.RollbackChangesetResponse](
			httpClient,
			baseURL+AdminServiceRollbackChangesetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("RollbackChangeset")),
			connect.WithClientOptions(opts...),
		),
		failChangeset: connect.NewClient[v1.FailChangesetRequest, v1.FailChangesetResponse](
			httpClient,
			baseURL+AdminServiceFailChangesetProcedure,
			connect.WithSchema(adminServiceMethods.ByName("FailChangeset")),
			connect.WithClientOptions(opts...),
		),
		clusterInfo: connect.NewClient[v11.ClusterInfoRequest, v11.ClusterInfoResponse](
			httpClient,
			baseURL+AdminServiceClusterInfoProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ClusterInfo")),
			connect.WithClientOptions(opts...),
		),
		getArtefactDiffs: connect.NewClient[v11.GetArtefactDiffsRequest, v11.GetArtefactDiffsResponse](
			httpClient,
			baseURL+AdminServiceGetArtefactDiffsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetArtefactDiffs")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentArtefacts: connect.NewClient[v11.GetDeploymentArtefactsRequest, v11.GetDeploymentArtefactsResponse](
			httpClient,
			baseURL+AdminServiceGetDeploymentArtefactsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetDeploymentArtefacts")),
			connect.WithClientOptions(opts...),
		),
		uploadArtefact: connect.NewClient[v11.UploadArtefactRequest, v11.UploadArtefactResponse](
			httpClient,
			baseURL+AdminServiceUploadArtefactProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UploadArtefact")),
			connect.WithClientOptions(opts...),
		),
		streamLogs: connect.NewClient[v11.StreamLogsRequest, v11.StreamLogsResponse](
			httpClient,
			baseURL+AdminServiceStreamLogsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("StreamLogs")),
			connect.WithClientOptions(opts...),
		),
		getTopicInfo: connect.NewClient[v11.GetTopicInfoRequest, v11.GetTopicInfoResponse](
			httpClient,
			baseURL+AdminServiceGetTopicInfoProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetTopicInfo")),
			connect.WithClientOptions(opts...),
		),
		getSubscriptionInfo: connect.NewClient[v11.GetSubscriptionInfoRequest, v11.GetSubscriptionInfoResponse](
			httpClient,
			baseURL+AdminServiceGetSubscriptionInfoProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetSubscriptionInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	ping                    *connect.Client[v1.PingRequest, v1.PingResponse]
	configList              *connect.Client[v11.ConfigListRequest, v11.ConfigListResponse]
	configGet               *connect.Client[v11.ConfigGetRequest, v11.ConfigGetResponse]
	configSet               *connect.Client[v11.ConfigSetRequest, v11.ConfigSetResponse]
	configUnset             *connect.Client[v11.ConfigUnsetRequest, v11.ConfigUnsetResponse]
	secretsList             *connect.Client[v11.SecretsListRequest, v11.SecretsListResponse]
	secretGet               *connect.Client[v11.SecretGetRequest, v11.SecretGetResponse]
	secretSet               *connect.Client[v11.SecretSetRequest, v11.SecretSetResponse]
	secretUnset             *connect.Client[v11.SecretUnsetRequest, v11.SecretUnsetResponse]
	mapConfigsForModule     *connect.Client[v11.MapConfigsForModuleRequest, v11.MapConfigsForModuleResponse]
	mapSecretsForModule     *connect.Client[v11.MapSecretsForModuleRequest, v11.MapSecretsForModuleResponse]
	resetSubscription       *connect.Client[v11.ResetSubscriptionRequest, v11.ResetSubscriptionResponse]
	applyChangeset          *connect.Client[v11.ApplyChangesetRequest, v11.ApplyChangesetResponse]
	deployImages            *connect.Client[v11.DeployImagesRequest, v11.DeployImagesResponse]
	updateDeploymentRuntime *connect.Client[v11.UpdateDeploymentRuntimeRequest, v11.UpdateDeploymentRuntimeResponse]
	getSchema               *connect.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	pullSchema              *connect.Client[v1.PullSchemaRequest, v1.PullSchemaResponse]
	rollbackChangeset       *connect.Client[v1.RollbackChangesetRequest, v1.RollbackChangesetResponse]
	failChangeset           *connect.Client[v1.FailChangesetRequest, v1.FailChangesetResponse]
	clusterInfo             *connect.Client[v11.ClusterInfoRequest, v11.ClusterInfoResponse]
	getArtefactDiffs        *connect.Client[v11.GetArtefactDiffsRequest, v11.GetArtefactDiffsResponse]
	getDeploymentArtefacts  *connect.Client[v11.GetDeploymentArtefactsRequest, v11.GetDeploymentArtefactsResponse]
	uploadArtefact          *connect.Client[v11.UploadArtefactRequest, v11.UploadArtefactResponse]
	streamLogs              *connect.Client[v11.StreamLogsRequest, v11.StreamLogsResponse]
	getTopicInfo            *connect.Client[v11.GetTopicInfoRequest, v11.GetTopicInfoResponse]
	getSubscriptionInfo     *connect.Client[v11.GetSubscriptionInfoRequest, v11.GetSubscriptionInfoResponse]
}

// Ping calls xyz.block.ftl.admin.v1.AdminService.Ping.
func (c *adminServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ConfigList calls xyz.block.ftl.admin.v1.AdminService.ConfigList.
func (c *adminServiceClient) ConfigList(ctx context.Context, req *connect.Request[v11.ConfigListRequest]) (*connect.Response[v11.ConfigListResponse], error) {
	return c.configList.CallUnary(ctx, req)
}

// ConfigGet calls xyz.block.ftl.admin.v1.AdminService.ConfigGet.
func (c *adminServiceClient) ConfigGet(ctx context.Context, req *connect.Request[v11.ConfigGetRequest]) (*connect.Response[v11.ConfigGetResponse], error) {
	return c.configGet.CallUnary(ctx, req)
}

// ConfigSet calls xyz.block.ftl.admin.v1.AdminService.ConfigSet.
func (c *adminServiceClient) ConfigSet(ctx context.Context, req *connect.Request[v11.ConfigSetRequest]) (*connect.Response[v11.ConfigSetResponse], error) {
	return c.configSet.CallUnary(ctx, req)
}

// ConfigUnset calls xyz.block.ftl.admin.v1.AdminService.ConfigUnset.
func (c *adminServiceClient) ConfigUnset(ctx context.Context, req *connect.Request[v11.ConfigUnsetRequest]) (*connect.Response[v11.ConfigUnsetResponse], error) {
	return c.configUnset.CallUnary(ctx, req)
}

// SecretsList calls xyz.block.ftl.admin.v1.AdminService.SecretsList.
func (c *adminServiceClient) SecretsList(ctx context.Context, req *connect.Request[v11.SecretsListRequest]) (*connect.Response[v11.SecretsListResponse], error) {
	return c.secretsList.CallUnary(ctx, req)
}

// SecretGet calls xyz.block.ftl.admin.v1.AdminService.SecretGet.
func (c *adminServiceClient) SecretGet(ctx context.Context, req *connect.Request[v11.SecretGetRequest]) (*connect.Response[v11.SecretGetResponse], error) {
	return c.secretGet.CallUnary(ctx, req)
}

// SecretSet calls xyz.block.ftl.admin.v1.AdminService.SecretSet.
func (c *adminServiceClient) SecretSet(ctx context.Context, req *connect.Request[v11.SecretSetRequest]) (*connect.Response[v11.SecretSetResponse], error) {
	return c.secretSet.CallUnary(ctx, req)
}

// SecretUnset calls xyz.block.ftl.admin.v1.AdminService.SecretUnset.
func (c *adminServiceClient) SecretUnset(ctx context.Context, req *connect.Request[v11.SecretUnsetRequest]) (*connect.Response[v11.SecretUnsetResponse], error) {
	return c.secretUnset.CallUnary(ctx, req)
}

// MapConfigsForModule calls xyz.block.ftl.admin.v1.AdminService.MapConfigsForModule.
func (c *adminServiceClient) MapConfigsForModule(ctx context.Context, req *connect.Request[v11.MapConfigsForModuleRequest]) (*connect.Response[v11.MapConfigsForModuleResponse], error) {
	return c.mapConfigsForModule.CallUnary(ctx, req)
}

// MapSecretsForModule calls xyz.block.ftl.admin.v1.AdminService.MapSecretsForModule.
func (c *adminServiceClient) MapSecretsForModule(ctx context.Context, req *connect.Request[v11.MapSecretsForModuleRequest]) (*connect.Response[v11.MapSecretsForModuleResponse], error) {
	return c.mapSecretsForModule.CallUnary(ctx, req)
}

// ResetSubscription calls xyz.block.ftl.admin.v1.AdminService.ResetSubscription.
func (c *adminServiceClient) ResetSubscription(ctx context.Context, req *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error) {
	return c.resetSubscription.CallUnary(ctx, req)
}

// ApplyChangeset calls xyz.block.ftl.admin.v1.AdminService.ApplyChangeset.
func (c *adminServiceClient) ApplyChangeset(ctx context.Context, req *connect.Request[v11.ApplyChangesetRequest]) (*connect.ServerStreamForClient[v11.ApplyChangesetResponse], error) {
	return c.applyChangeset.CallServerStream(ctx, req)
}

// DeployImages calls xyz.block.ftl.admin.v1.AdminService.DeployImages.
func (c *adminServiceClient) DeployImages(ctx context.Context, req *connect.Request[v11.DeployImagesRequest]) (*connect.ServerStreamForClient[v11.DeployImagesResponse], error) {
	return c.deployImages.CallServerStream(ctx, req)
}

// UpdateDeploymentRuntime calls xyz.block.ftl.admin.v1.AdminService.UpdateDeploymentRuntime.
func (c *adminServiceClient) UpdateDeploymentRuntime(ctx context.Context, req *connect.Request[v11.UpdateDeploymentRuntimeRequest]) (*connect.Response[v11.UpdateDeploymentRuntimeResponse], error) {
	return c.updateDeploymentRuntime.CallUnary(ctx, req)
}

// GetSchema calls xyz.block.ftl.admin.v1.AdminService.GetSchema.
func (c *adminServiceClient) GetSchema(ctx context.Context, req *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// PullSchema calls xyz.block.ftl.admin.v1.AdminService.PullSchema.
func (c *adminServiceClient) PullSchema(ctx context.Context, req *connect.Request[v1.PullSchemaRequest]) (*connect.ServerStreamForClient[v1.PullSchemaResponse], error) {
	return c.pullSchema.CallServerStream(ctx, req)
}

// RollbackChangeset calls xyz.block.ftl.admin.v1.AdminService.RollbackChangeset.
func (c *adminServiceClient) RollbackChangeset(ctx context.Context, req *connect.Request[v1.RollbackChangesetRequest]) (*connect.Response[v1.RollbackChangesetResponse], error) {
	return c.rollbackChangeset.CallUnary(ctx, req)
}

// FailChangeset calls xyz.block.ftl.admin.v1.AdminService.FailChangeset.
func (c *adminServiceClient) FailChangeset(ctx context.Context, req *connect.Request[v1.FailChangesetRequest]) (*connect.Response[v1.FailChangesetResponse], error) {
	return c.failChangeset.CallUnary(ctx, req)
}

// ClusterInfo calls xyz.block.ftl.admin.v1.AdminService.ClusterInfo.
func (c *adminServiceClient) ClusterInfo(ctx context.Context, req *connect.Request[v11.ClusterInfoRequest]) (*connect.Response[v11.ClusterInfoResponse], error) {
	return c.clusterInfo.CallUnary(ctx, req)
}

// GetArtefactDiffs calls xyz.block.ftl.admin.v1.AdminService.GetArtefactDiffs.
func (c *adminServiceClient) GetArtefactDiffs(ctx context.Context, req *connect.Request[v11.GetArtefactDiffsRequest]) (*connect.Response[v11.GetArtefactDiffsResponse], error) {
	return c.getArtefactDiffs.CallUnary(ctx, req)
}

// GetDeploymentArtefacts calls xyz.block.ftl.admin.v1.AdminService.GetDeploymentArtefacts.
func (c *adminServiceClient) GetDeploymentArtefacts(ctx context.Context, req *connect.Request[v11.GetDeploymentArtefactsRequest]) (*connect.ServerStreamForClient[v11.GetDeploymentArtefactsResponse], error) {
	return c.getDeploymentArtefacts.CallServerStream(ctx, req)
}

// UploadArtefact calls xyz.block.ftl.admin.v1.AdminService.UploadArtefact.
func (c *adminServiceClient) UploadArtefact(ctx context.Context) *connect.ClientStreamForClient[v11.UploadArtefactRequest, v11.UploadArtefactResponse] {
	return c.uploadArtefact.CallClientStream(ctx)
}

// StreamLogs calls xyz.block.ftl.admin.v1.AdminService.StreamLogs.
func (c *adminServiceClient) StreamLogs(ctx context.Context, req *connect.Request[v11.StreamLogsRequest]) (*connect.ServerStreamForClient[v11.StreamLogsResponse], error) {
	return c.streamLogs.CallServerStream(ctx, req)
}

// GetTopicInfo calls xyz.block.ftl.admin.v1.AdminService.GetTopicInfo.
func (c *adminServiceClient) GetTopicInfo(ctx context.Context, req *connect.Request[v11.GetTopicInfoRequest]) (*connect.Response[v11.GetTopicInfoResponse], error) {
	return c.getTopicInfo.CallUnary(ctx, req)
}

// GetSubscriptionInfo calls xyz.block.ftl.admin.v1.AdminService.GetSubscriptionInfo.
func (c *adminServiceClient) GetSubscriptionInfo(ctx context.Context, req *connect.Request[v11.GetSubscriptionInfoRequest]) (*connect.Response[v11.GetSubscriptionInfoResponse], error) {
	return c.getSubscriptionInfo.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the xyz.block.ftl.admin.v1.AdminService service.
type AdminServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List configuration.
	ConfigList(context.Context, *connect.Request[v11.ConfigListRequest]) (*connect.Response[v11.ConfigListResponse], error)
	// Get a config value.
	ConfigGet(context.Context, *connect.Request[v11.ConfigGetRequest]) (*connect.Response[v11.ConfigGetResponse], error)
	// Set a config value.
	ConfigSet(context.Context, *connect.Request[v11.ConfigSetRequest]) (*connect.Response[v11.ConfigSetResponse], error)
	// Unset a config value.
	ConfigUnset(context.Context, *connect.Request[v11.ConfigUnsetRequest]) (*connect.Response[v11.ConfigUnsetResponse], error)
	// List secrets.
	SecretsList(context.Context, *connect.Request[v11.SecretsListRequest]) (*connect.Response[v11.SecretsListResponse], error)
	// Get a secret.
	SecretGet(context.Context, *connect.Request[v11.SecretGetRequest]) (*connect.Response[v11.SecretGetResponse], error)
	// Set a secret.
	SecretSet(context.Context, *connect.Request[v11.SecretSetRequest]) (*connect.Response[v11.SecretSetResponse], error)
	// Unset a secret.
	SecretUnset(context.Context, *connect.Request[v11.SecretUnsetRequest]) (*connect.Response[v11.SecretUnsetResponse], error)
	// MapForModule combines all configuration values visible to the module.
	// Local values take precedence.
	MapConfigsForModule(context.Context, *connect.Request[v11.MapConfigsForModuleRequest]) (*connect.Response[v11.MapConfigsForModuleResponse], error)
	// MapSecretsForModule combines all secrets visible to the module.
	// Local values take precedence.
	MapSecretsForModule(context.Context, *connect.Request[v11.MapSecretsForModuleRequest]) (*connect.Response[v11.MapSecretsForModuleResponse], error)
	// Reset the offset for a subscription to the latest of each partition.
	ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error)
	// Creates and applies a changeset, returning the result
	// This blocks until the changeset has completed
	ApplyChangeset(context.Context, *connect.Request[v11.ApplyChangesetRequest], *connect.ServerStream[v11.ApplyChangesetResponse]) error
	// Creates and applies a changeset, returning the result
	// This blocks until the changeset has completed
	DeployImages(context.Context, *connect.Request[v11.DeployImagesRequest], *connect.ServerStream[v11.DeployImagesResponse]) error
	// Updates a runtime deployment
	UpdateDeploymentRuntime(context.Context, *connect.Request[v11.UpdateDeploymentRuntimeRequest]) (*connect.Response[v11.UpdateDeploymentRuntimeResponse], error)
	// Get the full schema.
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	// Pull schema changes from the Schema Service.
	//
	// Note that if there are no deployments this will block indefinitely, making it unsuitable for
	// just retrieving the schema. Use GetSchema for that.
	PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error
	// RollbackChangeset Rolls back a failing changeset
	RollbackChangeset(context.Context, *connect.Request[v1.RollbackChangesetRequest]) (*connect.Response[v1.RollbackChangesetResponse], error)
	// FailChangeset fails an active changeset.
	FailChangeset(context.Context, *connect.Request[v1.FailChangesetRequest]) (*connect.Response[v1.FailChangesetResponse], error)
	ClusterInfo(context.Context, *connect.Request[v11.ClusterInfoRequest]) (*connect.Response[v11.ClusterInfoResponse], error)
	// Get list of artefacts that differ between the server and client.
	GetArtefactDiffs(context.Context, *connect.Request[v11.GetArtefactDiffsRequest]) (*connect.Response[v11.GetArtefactDiffsResponse], error)
	// Stream deployment artefacts from the server.
	//
	// Each artefact is streamed one after the other as a sequence of max 1MB
	// chunks.
	GetDeploymentArtefacts(context.Context, *connect.Request[v11.GetDeploymentArtefactsRequest], *connect.ServerStream[v11.GetDeploymentArtefactsResponse]) error
	// Upload an artefact to the server.
	UploadArtefact(context.Context, *connect.ClientStream[v11.UploadArtefactRequest]) (*connect.Response[v11.UploadArtefactResponse], error)
	StreamLogs(context.Context, *connect.Request[v11.StreamLogsRequest], *connect.ServerStream[v11.StreamLogsResponse]) error
	// Get information about the state of pubsub topics.
	GetTopicInfo(context.Context, *connect.Request[v11.GetTopicInfoRequest]) (*connect.Response[v11.GetTopicInfoResponse], error)
	// Get information about the state of pubsub subscriptions.
	GetSubscriptionInfo(context.Context, *connect.Request[v11.GetSubscriptionInfoRequest]) (*connect.Response[v11.GetSubscriptionInfoResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v11.File_xyz_block_ftl_admin_v1_admin_proto.Services().ByName("AdminService").Methods()
	adminServicePingHandler := connect.NewUnaryHandler(
		AdminServicePingProcedure,
		svc.Ping,
		connect.WithSchema(adminServiceMethods.ByName("Ping")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceConfigListHandler := connect.NewUnaryHandler(
		AdminServiceConfigListProcedure,
		svc.ConfigList,
		connect.WithSchema(adminServiceMethods.ByName("ConfigList")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceConfigGetHandler := connect.NewUnaryHandler(
		AdminServiceConfigGetProcedure,
		svc.ConfigGet,
		connect.WithSchema(adminServiceMethods.ByName("ConfigGet")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceConfigSetHandler := connect.NewUnaryHandler(
		AdminServiceConfigSetProcedure,
		svc.ConfigSet,
		connect.WithSchema(adminServiceMethods.ByName("ConfigSet")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceConfigUnsetHandler := connect.NewUnaryHandler(
		AdminServiceConfigUnsetProcedure,
		svc.ConfigUnset,
		connect.WithSchema(adminServiceMethods.ByName("ConfigUnset")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSecretsListHandler := connect.NewUnaryHandler(
		AdminServiceSecretsListProcedure,
		svc.SecretsList,
		connect.WithSchema(adminServiceMethods.ByName("SecretsList")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSecretGetHandler := connect.NewUnaryHandler(
		AdminServiceSecretGetProcedure,
		svc.SecretGet,
		connect.WithSchema(adminServiceMethods.ByName("SecretGet")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSecretSetHandler := connect.NewUnaryHandler(
		AdminServiceSecretSetProcedure,
		svc.SecretSet,
		connect.WithSchema(adminServiceMethods.ByName("SecretSet")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSecretUnsetHandler := connect.NewUnaryHandler(
		AdminServiceSecretUnsetProcedure,
		svc.SecretUnset,
		connect.WithSchema(adminServiceMethods.ByName("SecretUnset")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceMapConfigsForModuleHandler := connect.NewUnaryHandler(
		AdminServiceMapConfigsForModuleProcedure,
		svc.MapConfigsForModule,
		connect.WithSchema(adminServiceMethods.ByName("MapConfigsForModule")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceMapSecretsForModuleHandler := connect.NewUnaryHandler(
		AdminServiceMapSecretsForModuleProcedure,
		svc.MapSecretsForModule,
		connect.WithSchema(adminServiceMethods.ByName("MapSecretsForModule")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceResetSubscriptionHandler := connect.NewUnaryHandler(
		AdminServiceResetSubscriptionProcedure,
		svc.ResetSubscription,
		connect.WithSchema(adminServiceMethods.ByName("ResetSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceApplyChangesetHandler := connect.NewServerStreamHandler(
		AdminServiceApplyChangesetProcedure,
		svc.ApplyChangeset,
		connect.WithSchema(adminServiceMethods.ByName("ApplyChangeset")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeployImagesHandler := connect.NewServerStreamHandler(
		AdminServiceDeployImagesProcedure,
		svc.DeployImages,
		connect.WithSchema(adminServiceMethods.ByName("DeployImages")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateDeploymentRuntimeHandler := connect.NewUnaryHandler(
		AdminServiceUpdateDeploymentRuntimeProcedure,
		svc.UpdateDeploymentRuntime,
		connect.WithSchema(adminServiceMethods.ByName("UpdateDeploymentRuntime")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetSchemaHandler := connect.NewUnaryHandler(
		AdminServiceGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(adminServiceMethods.ByName("GetSchema")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	adminServicePullSchemaHandler := connect.NewServerStreamHandler(
		AdminServicePullSchemaProcedure,
		svc.PullSchema,
		connect.WithSchema(adminServiceMethods.ByName("PullSchema")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceRollbackChangesetHandler := connect.NewUnaryHandler(
		AdminServiceRollbackChangesetProcedure,
		svc.RollbackChangeset,
		connect.WithSchema(adminServiceMethods.ByName("RollbackChangeset")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceFailChangesetHandler := connect.NewUnaryHandler(
		AdminServiceFailChangesetProcedure,
		svc.FailChangeset,
		connect.WithSchema(adminServiceMethods.ByName("FailChangeset")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceClusterInfoHandler := connect.NewUnaryHandler(
		AdminServiceClusterInfoProcedure,
		svc.ClusterInfo,
		connect.WithSchema(adminServiceMethods.ByName("ClusterInfo")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetArtefactDiffsHandler := connect.NewUnaryHandler(
		AdminServiceGetArtefactDiffsProcedure,
		svc.GetArtefactDiffs,
		connect.WithSchema(adminServiceMethods.ByName("GetArtefactDiffs")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetDeploymentArtefactsHandler := connect.NewServerStreamHandler(
		AdminServiceGetDeploymentArtefactsProcedure,
		svc.GetDeploymentArtefacts,
		connect.WithSchema(adminServiceMethods.ByName("GetDeploymentArtefacts")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUploadArtefactHandler := connect.NewClientStreamHandler(
		AdminServiceUploadArtefactProcedure,
		svc.UploadArtefact,
		connect.WithSchema(adminServiceMethods.ByName("UploadArtefact")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceStreamLogsHandler := connect.NewServerStreamHandler(
		AdminServiceStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(adminServiceMethods.ByName("StreamLogs")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTopicInfoHandler := connect.NewUnaryHandler(
		AdminServiceGetTopicInfoProcedure,
		svc.GetTopicInfo,
		connect.WithSchema(adminServiceMethods.ByName("GetTopicInfo")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetSubscriptionInfoHandler := connect.NewUnaryHandler(
		AdminServiceGetSubscriptionInfoProcedure,
		svc.GetSubscriptionInfo,
		connect.WithSchema(adminServiceMethods.ByName("GetSubscriptionInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xyz.block.ftl.admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServicePingProcedure:
			adminServicePingHandler.ServeHTTP(w, r)
		case AdminServiceConfigListProcedure:
			adminServiceConfigListHandler.ServeHTTP(w, r)
		case AdminServiceConfigGetProcedure:
			adminServiceConfigGetHandler.ServeHTTP(w, r)
		case AdminServiceConfigSetProcedure:
			adminServiceConfigSetHandler.ServeHTTP(w, r)
		case AdminServiceConfigUnsetProcedure:
			adminServiceConfigUnsetHandler.ServeHTTP(w, r)
		case AdminServiceSecretsListProcedure:
			adminServiceSecretsListHandler.ServeHTTP(w, r)
		case AdminServiceSecretGetProcedure:
			adminServiceSecretGetHandler.ServeHTTP(w, r)
		case AdminServiceSecretSetProcedure:
			adminServiceSecretSetHandler.ServeHTTP(w, r)
		case AdminServiceSecretUnsetProcedure:
			adminServiceSecretUnsetHandler.ServeHTTP(w, r)
		case AdminServiceMapConfigsForModuleProcedure:
			adminServiceMapConfigsForModuleHandler.ServeHTTP(w, r)
		case AdminServiceMapSecretsForModuleProcedure:
			adminServiceMapSecretsForModuleHandler.ServeHTTP(w, r)
		case AdminServiceResetSubscriptionProcedure:
			adminServiceResetSubscriptionHandler.ServeHTTP(w, r)
		case AdminServiceApplyChangesetProcedure:
			adminServiceApplyChangesetHandler.ServeHTTP(w, r)
		case AdminServiceDeployImagesProcedure:
			adminServiceDeployImagesHandler.ServeHTTP(w, r)
		case AdminServiceUpdateDeploymentRuntimeProcedure:
			adminServiceUpdateDeploymentRuntimeHandler.ServeHTTP(w, r)
		case AdminServiceGetSchemaProcedure:
			adminServiceGetSchemaHandler.ServeHTTP(w, r)
		case AdminServicePullSchemaProcedure:
			adminServicePullSchemaHandler.ServeHTTP(w, r)
		case AdminServiceRollbackChangesetProcedure:
			adminServiceRollbackChangesetHandler.ServeHTTP(w, r)
		case AdminServiceFailChangesetProcedure:
			adminServiceFailChangesetHandler.ServeHTTP(w, r)
		case AdminServiceClusterInfoProcedure:
			adminServiceClusterInfoHandler.ServeHTTP(w, r)
		case AdminServiceGetArtefactDiffsProcedure:
			adminServiceGetArtefactDiffsHandler.ServeHTTP(w, r)
		case AdminServiceGetDeploymentArtefactsProcedure:
			adminServiceGetDeploymentArtefactsHandler.ServeHTTP(w, r)
		case AdminServiceUploadArtefactProcedure:
			adminServiceUploadArtefactHandler.ServeHTTP(w, r)
		case AdminServiceStreamLogsProcedure:
			adminServiceStreamLogsHandler.ServeHTTP(w, r)
		case AdminServiceGetTopicInfoProcedure:
			adminServiceGetTopicInfoHandler.ServeHTTP(w, r)
		case AdminServiceGetSubscriptionInfoProcedure:
			adminServiceGetSubscriptionInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.Ping is not implemented"))
}

func (UnimplementedAdminServiceHandler) ConfigList(context.Context, *connect.Request[v11.ConfigListRequest]) (*connect.Response[v11.ConfigListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ConfigList is not implemented"))
}

func (UnimplementedAdminServiceHandler) ConfigGet(context.Context, *connect.Request[v11.ConfigGetRequest]) (*connect.Response[v11.ConfigGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ConfigGet is not implemented"))
}

func (UnimplementedAdminServiceHandler) ConfigSet(context.Context, *connect.Request[v11.ConfigSetRequest]) (*connect.Response[v11.ConfigSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ConfigSet is not implemented"))
}

func (UnimplementedAdminServiceHandler) ConfigUnset(context.Context, *connect.Request[v11.ConfigUnsetRequest]) (*connect.Response[v11.ConfigUnsetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ConfigUnset is not implemented"))
}

func (UnimplementedAdminServiceHandler) SecretsList(context.Context, *connect.Request[v11.SecretsListRequest]) (*connect.Response[v11.SecretsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.SecretsList is not implemented"))
}

func (UnimplementedAdminServiceHandler) SecretGet(context.Context, *connect.Request[v11.SecretGetRequest]) (*connect.Response[v11.SecretGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.SecretGet is not implemented"))
}

func (UnimplementedAdminServiceHandler) SecretSet(context.Context, *connect.Request[v11.SecretSetRequest]) (*connect.Response[v11.SecretSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.SecretSet is not implemented"))
}

func (UnimplementedAdminServiceHandler) SecretUnset(context.Context, *connect.Request[v11.SecretUnsetRequest]) (*connect.Response[v11.SecretUnsetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.SecretUnset is not implemented"))
}

func (UnimplementedAdminServiceHandler) MapConfigsForModule(context.Context, *connect.Request[v11.MapConfigsForModuleRequest]) (*connect.Response[v11.MapConfigsForModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.MapConfigsForModule is not implemented"))
}

func (UnimplementedAdminServiceHandler) MapSecretsForModule(context.Context, *connect.Request[v11.MapSecretsForModuleRequest]) (*connect.Response[v11.MapSecretsForModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.MapSecretsForModule is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetSubscription(context.Context, *connect.Request[v11.ResetSubscriptionRequest]) (*connect.Response[v11.ResetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ResetSubscription is not implemented"))
}

func (UnimplementedAdminServiceHandler) ApplyChangeset(context.Context, *connect.Request[v11.ApplyChangesetRequest], *connect.ServerStream[v11.ApplyChangesetResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ApplyChangeset is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeployImages(context.Context, *connect.Request[v11.DeployImagesRequest], *connect.ServerStream[v11.DeployImagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.DeployImages is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateDeploymentRuntime(context.Context, *connect.Request[v11.UpdateDeploymentRuntimeRequest]) (*connect.Response[v11.UpdateDeploymentRuntimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.UpdateDeploymentRuntime is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.GetSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) PullSchema(context.Context, *connect.Request[v1.PullSchemaRequest], *connect.ServerStream[v1.PullSchemaResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.PullSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) RollbackChangeset(context.Context, *connect.Request[v1.RollbackChangesetRequest]) (*connect.Response[v1.RollbackChangesetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.RollbackChangeset is not implemented"))
}

func (UnimplementedAdminServiceHandler) FailChangeset(context.Context, *connect.Request[v1.FailChangesetRequest]) (*connect.Response[v1.FailChangesetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.FailChangeset is not implemented"))
}

func (UnimplementedAdminServiceHandler) ClusterInfo(context.Context, *connect.Request[v11.ClusterInfoRequest]) (*connect.Response[v11.ClusterInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.ClusterInfo is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetArtefactDiffs(context.Context, *connect.Request[v11.GetArtefactDiffsRequest]) (*connect.Response[v11.GetArtefactDiffsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.GetArtefactDiffs is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDeploymentArtefacts(context.Context, *connect.Request[v11.GetDeploymentArtefactsRequest], *connect.ServerStream[v11.GetDeploymentArtefactsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.GetDeploymentArtefacts is not implemented"))
}

func (UnimplementedAdminServiceHandler) UploadArtefact(context.Context, *connect.ClientStream[v11.UploadArtefactRequest]) (*connect.Response[v11.UploadArtefactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.UploadArtefact is not implemented"))
}

func (UnimplementedAdminServiceHandler) StreamLogs(context.Context, *connect.Request[v11.StreamLogsRequest], *connect.ServerStream[v11.StreamLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.StreamLogs is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTopicInfo(context.Context, *connect.Request[v11.GetTopicInfoRequest]) (*connect.Response[v11.GetTopicInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.GetTopicInfo is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSubscriptionInfo(context.Context, *connect.Request[v11.GetSubscriptionInfoRequest]) (*connect.Response[v11.GetSubscriptionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.admin.v1.AdminService.GetSubscriptionInfo is not implemented"))
}
