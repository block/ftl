syntax = "proto3";

package xyz.block.ftl.query.v1;

import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/query/v1;querypb";
option java_multiple_files = true;

message BeginTransactionRequest {
  string database_name = 1;
}

message BeginTransactionResponse {
  string transaction_id = 1;
  TransactionStatus status = 2;
}

message CommitTransactionRequest {
  string database_name = 1;
  string transaction_id = 2;
}

message CommitTransactionResponse {
  TransactionStatus status = 1;
}

message RollbackTransactionRequest {
  string database_name = 1;
  string transaction_id = 2;
}

message RollbackTransactionResponse {
  TransactionStatus status = 1;
}

message ResultColumn {
  string type_name = 1; // The name in the FTL-generated type
  string sql_name = 2; // The database column name
}

message ExecuteQueryRequest {
  string database_name = 1; // Name of the database to query
  string raw_sql = 2;
  CommandType command_type = 3;
  string parameters_json = 4; // JSON array of parameter values in order
  repeated ResultColumn result_columns = 5; // Column names to scan for the result type
  optional string transaction_id = 6;
  optional int32 batch_size = 7; // Default 100 if not set
}

message ExecuteQueryResponse {
  oneof result {
    // For EXEC commands
    ExecResult exec_result = 1;
    // For ONE/MANY commands
    RowResults row_results = 2;
  }
}

message ExecResult {
  int64 rows_affected = 1;
}

message RowResults {
  string json_rows = 1; // JSON object mapping column names to values
  bool has_more = 2; // Indicates if there are more rows to fetch
}

enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_SUCCESS = 1;
  TRANSACTION_STATUS_FAILED = 2;
}

enum CommandType {
  COMMAND_TYPE_UNSPECIFIED = 0;
  COMMAND_TYPE_EXEC = 1;
  COMMAND_TYPE_EXECRESULT = 2;
  COMMAND_TYPE_ONE = 3;
  COMMAND_TYPE_MANY = 4;
}

service QueryService {
  // Ping service for readiness
  rpc Ping(ftl.v1.PingRequest) returns (ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Begins a new transaction and returns a transaction ID.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);

  // Commits a transaction.
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);

  // Rolls back a transaction.
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse);

  // Executes a raw SQL query, optionally within a transaction.
  rpc ExecuteQuery(ExecuteQueryRequest) returns (stream ExecuteQueryResponse);
}
