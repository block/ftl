syntax = "proto3";

package xyz.block.ftl.language.v1;

import "google/protobuf/struct.proto";
import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/language/v1;languagepb";
option java_multiple_files = true;

// ModuleConfig contains the configuration for a module, found in the module's ftl.toml file.
message ModuleConfig {
  // Name of the module
  string name = 1;
  // Absolute path to the module's directory
  string dir = 2;
  // The language of the module
  string language = 3;

  // Absolute path to the directory containing all of this module's build artifacts for deployments
  string deploy_dir = 4;
  // Build is the command to build the module.
  optional string build = 5;
  // DevModeBuild is the command to build the module in dev mode.
  optional string dev_mode_build = 6;
  // Build lock path to prevent concurrent builds
  string build_lock = 7;
  // Patterns to watch for file changes
  repeated string watch = 9;

  // LanguageConfig contains any metadata specific to a specific language.
  // These are stored in the ftl.toml file under the same key as the language (eg: "go", "java")
  google.protobuf.Struct language_config = 10;

  // The root directory containing the SQL files, relative to the module directory.
  string sql_root_dir = 11;

  // The realm of the module
  string realm = 12;
}

// ProjectConfig contains the configuration for a project, found in the ftl-project.toml file.
message ProjectConfig {
  string dir = 1;
  string name = 2;
  bool no_git = 3;
  bool hermit = 4;
}

message GetDependenciesRequest {
  ModuleConfig module_config = 1;
}

message GetDependenciesResponse {
  repeated string modules = 1;
}

// BuildContext contains contextual information needed to build.
//
// Plugins must include the build context's id when a build succeeds or fails.
// For automatic rebuilds, plugins must use the most recent build context they have received.
message BuildContext {
  // The configuration for the module
  ModuleConfig module_config = 1;
  // The FTL schema including all dependencies
  ftl.schema.v1.Schema schema = 2;
  // The dependencies for the module
  repeated string dependencies = 3;
  // Build environment provides environment variables to be set for the build command
  repeated string build_env = 4;
  string os = 5;
  string arch = 6;
}

message BuildContextUpdatedRequest {
  BuildContext build_context = 1;
}

message BuildContextUpdatedResponse {}

// Error contains information about an error that occurred during a build.
// Errors do not always cause a build failure. Use lesser levels to help guide the user.
message Error {
  enum ErrorLevel {
    ERROR_LEVEL_UNSPECIFIED = 0;
    ERROR_LEVEL_INFO = 1;
    ERROR_LEVEL_WARN = 2;
    ERROR_LEVEL_ERROR = 3;
  }

  enum ErrorType {
    ERROR_TYPE_UNSPECIFIED = 0;
    ERROR_TYPE_FTL = 1;
    // Compiler errors are errors that are from the compiler. This is useful to avoid duplicate errors
    // being shown to the user when combining errors from multiple sources (eg: an IDE showing compiler
    // errors and FTL errors via LSP).
    ERROR_TYPE_COMPILER = 2;
  }

  string msg = 1;
  ErrorLevel level = 4;
  optional Position pos = 5;
  ErrorType type = 6;
}

message Position {
  string filename = 1;
  int64 line = 2;
  int64 start_column = 3;
  int64 end_column = 4;
}

message ErrorList {
  repeated Error errors = 1;
}

// Request to build a module.
message BuildRequest {
  ProjectConfig project_config = 1;

  // The path to the directory containing all module stubs. Each module stub is in a subdirectory.
  string stubs_root = 2;

  // Indicates whether to watch for file changes and automatically rebuild
  bool dev_mode_build = 3;

  BuildContext build_context = 4;
}

// BuildSuccess should be sent when a build succeeds.
//
// FTL may ignore this event if it does not match FTL's current build context and state.
message BuildSuccess {
  // Module schema for the built module
  ftl.schema.v1.Module module = 1;
  // Paths for files/directories to be deployed
  repeated string deploy = 2;
  // Name of the docker image to use for the runner
  string docker_image = 3;

  // Errors contains any errors that occurred during the build
  // No errors can have a level of ERROR, instead a BuildFailure should be sent
  // Instead this is useful for INFO and WARN level errors.
  ErrorList errors = 4;

  // Dev mode endpoint URI. If this is set then rather than trying to deploy the module, FTL will start a runner that
  // connects to this endpoint.
  optional string dev_endpoint = 5;

  // Dev mode debug port
  optional int32 debug_port = 6;

  // Dev mode hot reload endpoint, this is used to allow the runner to communicate info back to the running process
  optional string dev_hot_reload_endpoint = 7;
  optional int64 dev_hot_reload_version = 8;
  // Files modified during the build, relative to the build dir
  repeated string modified_files = 9;
  // If there have been no structural changes it is possible that no further action is required
  bool redeploy_not_required = 10;
}

// BuildFailure should be sent when a build fails.
//
// FTL may ignore this event if it does not match FTL's current build context and state.
message BuildFailure {
  // Errors contains any errors that occurred during the build
  ErrorList errors = 1;

  // Indicates the plugin determined that the dependencies in the BuildContext are out of date.
  // If a Build stream is being kept open for automatic rebuilds, FTL will call GetDependencies, followed by
  // BuildContextUpdated.
  bool invalidate_dependencies = 2;
  // Files modified during the build, relative to the build dir
  repeated string modified_files = 9;
}

// Every type of message that can be streamed from the language plugin for a build.
message BuildResponse {
  oneof event {
    BuildSuccess build_success = 1;
    BuildFailure build_failure = 2;
  }
}

message GenerateStubsRequest {
  // The directory path to generate stubs into
  string dir = 1;
  // The schema of the module to generate stubs for
  ftl.schema.v1.Module module = 2;
  // The module's configuration to generate stubs for
  ModuleConfig module_config = 3;

  // Native module configuration is the configuration for a module that uses the plugin's language, if
  // the main moduleConfig provided is of a different language. It is provided as a mechanism to derive
  // language specific information. For example, the language version.
  optional ModuleConfig native_module_config = 4;
}

message GenerateStubsResponse {}

message SyncStubReferencesRequest {
  ModuleConfig module_config = 1;

  // The path of the directory containing all module stubs. Each module is in a subdirectory
  string stubs_root = 2;

  // The names of all modules that have had stubs generated
  repeated string modules = 3;

  // The complete FTL schema
  ftl.schema.v1.Schema schema = 4;
}

message SyncStubReferencesResponse {}

// LanguageService allows a plugin to add support for a programming language.
service LanguageService {
  // Ping service for readiness.
  rpc Ping(xyz.block.ftl.v1.PingRequest) returns (xyz.block.ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Extract dependencies for a module
  // FTL will ensure that these dependencies are built before requesting a build for this module.
  rpc GetDependencies(GetDependenciesRequest) returns (GetDependenciesResponse);

  // Build the module and receive the result
  //
  //
  rpc Build(BuildRequest) returns (BuildResponse);

  // Generate stubs for a module.
  //
  // Stubs allow modules to import other module's exported interface. If a language does not need this step,
  // then it is not required to do anything in this call.
  //
  // This call is not tied to the module that this plugin is responsible for. A plugin of each language will
  // be chosen to generate stubs for each module.
  rpc GenerateStubs(GenerateStubsRequest) returns (GenerateStubsResponse);

  // SyncStubReferences is called when module stubs have been updated. This allows the plugin to update
  // references to external modules, regardless of whether they are dependencies.
  //
  // For example, go plugin adds references to all modules into the go.work file so that tools can automatically
  // import the modules when users start reference them.
  //
  // It is optional to do anything with this call.
  rpc SyncStubReferences(SyncStubReferencesRequest) returns (SyncStubReferencesResponse);
}
