syntax = "proto3";

package xyz.block.ftl.v1;

import "google/protobuf/struct.proto";
import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message RegisterRunnerRequest {
  string key = 1;
  string endpoint = 2;
  string deployment = 3;
  google.protobuf.Struct labels = 5;
}

message RegisterRunnerResponse {}

message StatusRequest {}
message StatusResponse {
  message Controller {
    string key = 1;
    string endpoint = 2;
    string version = 3;
  }
  repeated Controller controllers = 1;

  message Runner {
    string key = 1;
    string endpoint = 2;
    optional string deployment = 3;
    google.protobuf.Struct labels = 4;
  }
  repeated Runner runners = 2;

  message Deployment {
    string key = 1;
    string language = 2;
    string name = 3;
    int32 min_replicas = 4;
    int32 replicas = 7;
    google.protobuf.Struct labels = 5;
    ftl.schema.v1.Module schema = 6;
  }
  repeated Deployment deployments = 3;

  message Route {
    string module = 1;
    string deployment = 2;
    string endpoint = 3;
  }
  repeated Route routes = 5;
}

message ProcessListRequest {}
message ProcessListResponse {
  message ProcessRunner {
    string key = 1;
    string endpoint = 2;
    google.protobuf.Struct labels = 3;
  }
  message Process {
    string deployment = 1;
    int32 min_replicas = 2;
    google.protobuf.Struct labels = 3;
    optional ProcessRunner runner = 4;
  }
  repeated Process processes = 1;
}
message GetDeploymentContextRequest {
  string deployment = 1;
}

message GetDeploymentContextResponse {
  enum DbType {
    DB_TYPE_UNSPECIFIED = 0;
    DB_TYPE_POSTGRES = 1;
    DB_TYPE_MYSQL = 2;
  }

  message DSN {
    string name = 1;
    DbType type = 2;
    string dsn = 3;
  }

  message Route {
    string deployment = 1;
    string uri = 2;
  }

  string module = 1;
  string deployment = 2;
  map<string, bytes> configs = 3;
  map<string, bytes> secrets = 4;
  repeated DSN databases = 5;
  repeated Route routes = 6;
  map<string, string> egress = 7;
}

service ControllerService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // List "processes" running on the cluster.
  rpc ProcessList(ProcessListRequest) returns (ProcessListResponse);

  rpc Status(StatusRequest) returns (StatusResponse);

  // Get configuration state for the deployment
  rpc GetDeploymentContext(GetDeploymentContextRequest) returns (stream GetDeploymentContextResponse);
  // Register a Runner with the Controller.
  //
  // Each runner issue a RegisterRunnerRequest to the ControllerService
  // every 10 seconds to maintain its heartbeat.
  rpc RegisterRunner(stream RegisterRunnerRequest) returns (RegisterRunnerResponse);
}
