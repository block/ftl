// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/controller.proto

package ftlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/block/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "xyz.block.ftl.v1.ControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServicePingProcedure is the fully-qualified name of the ControllerService's Ping RPC.
	ControllerServicePingProcedure = "/xyz.block.ftl.v1.ControllerService/Ping"
	// ControllerServiceProcessListProcedure is the fully-qualified name of the ControllerService's
	// ProcessList RPC.
	ControllerServiceProcessListProcedure = "/xyz.block.ftl.v1.ControllerService/ProcessList"
	// ControllerServiceStatusProcedure is the fully-qualified name of the ControllerService's Status
	// RPC.
	ControllerServiceStatusProcedure = "/xyz.block.ftl.v1.ControllerService/Status"
	// ControllerServiceGetDeploymentContextProcedure is the fully-qualified name of the
	// ControllerService's GetDeploymentContext RPC.
	ControllerServiceGetDeploymentContextProcedure = "/xyz.block.ftl.v1.ControllerService/GetDeploymentContext"
	// ControllerServiceRegisterRunnerProcedure is the fully-qualified name of the ControllerService's
	// RegisterRunner RPC.
	ControllerServiceRegisterRunnerProcedure = "/xyz.block.ftl.v1.ControllerService/RegisterRunner"
)

// ControllerServiceClient is a client for the xyz.block.ftl.v1.ControllerService service.
type ControllerServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List "processes" running on the cluster.
	ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentContextResponse], error)
	// Register a Runner with the Controller.
	//
	// Each runner issue a RegisterRunnerRequest to the ControllerService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context) *connect.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
}

// NewControllerServiceClient constructs a client for the xyz.block.ftl.v1.ControllerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerServiceMethods := v1.File_xyz_block_ftl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	return &controllerServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+ControllerServicePingProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("Ping")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		processList: connect.NewClient[v1.ProcessListRequest, v1.ProcessListResponse](
			httpClient,
			baseURL+ControllerServiceProcessListProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ProcessList")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+ControllerServiceStatusProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentContext: connect.NewClient[v1.GetDeploymentContextRequest, v1.GetDeploymentContextResponse](
			httpClient,
			baseURL+ControllerServiceGetDeploymentContextProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetDeploymentContext")),
			connect.WithClientOptions(opts...),
		),
		registerRunner: connect.NewClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse](
			httpClient,
			baseURL+ControllerServiceRegisterRunnerProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("RegisterRunner")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	ping                 *connect.Client[v1.PingRequest, v1.PingResponse]
	processList          *connect.Client[v1.ProcessListRequest, v1.ProcessListResponse]
	status               *connect.Client[v1.StatusRequest, v1.StatusResponse]
	getDeploymentContext *connect.Client[v1.GetDeploymentContextRequest, v1.GetDeploymentContextResponse]
	registerRunner       *connect.Client[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse]
}

// Ping calls xyz.block.ftl.v1.ControllerService.Ping.
func (c *controllerServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ProcessList calls xyz.block.ftl.v1.ControllerService.ProcessList.
func (c *controllerServiceClient) ProcessList(ctx context.Context, req *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error) {
	return c.processList.CallUnary(ctx, req)
}

// Status calls xyz.block.ftl.v1.ControllerService.Status.
func (c *controllerServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// GetDeploymentContext calls xyz.block.ftl.v1.ControllerService.GetDeploymentContext.
func (c *controllerServiceClient) GetDeploymentContext(ctx context.Context, req *connect.Request[v1.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentContextResponse], error) {
	return c.getDeploymentContext.CallServerStream(ctx, req)
}

// RegisterRunner calls xyz.block.ftl.v1.ControllerService.RegisterRunner.
func (c *controllerServiceClient) RegisterRunner(ctx context.Context) *connect.ClientStreamForClient[v1.RegisterRunnerRequest, v1.RegisterRunnerResponse] {
	return c.registerRunner.CallClientStream(ctx)
}

// ControllerServiceHandler is an implementation of the xyz.block.ftl.v1.ControllerService service.
type ControllerServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// List "processes" running on the cluster.
	ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest], *connect.ServerStream[v1.GetDeploymentContextResponse]) error
	// Register a Runner with the Controller.
	//
	// Each runner issue a RegisterRunnerRequest to the ControllerService
	// every 10 seconds to maintain its heartbeat.
	RegisterRunner(context.Context, *connect.ClientStream[v1.RegisterRunnerRequest]) (*connect.Response[v1.RegisterRunnerResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceMethods := v1.File_xyz_block_ftl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	controllerServicePingHandler := connect.NewUnaryHandler(
		ControllerServicePingProcedure,
		svc.Ping,
		connect.WithSchema(controllerServiceMethods.ByName("Ping")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceProcessListHandler := connect.NewUnaryHandler(
		ControllerServiceProcessListProcedure,
		svc.ProcessList,
		connect.WithSchema(controllerServiceMethods.ByName("ProcessList")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStatusHandler := connect.NewUnaryHandler(
		ControllerServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(controllerServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetDeploymentContextHandler := connect.NewServerStreamHandler(
		ControllerServiceGetDeploymentContextProcedure,
		svc.GetDeploymentContext,
		connect.WithSchema(controllerServiceMethods.ByName("GetDeploymentContext")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceRegisterRunnerHandler := connect.NewClientStreamHandler(
		ControllerServiceRegisterRunnerProcedure,
		svc.RegisterRunner,
		connect.WithSchema(controllerServiceMethods.ByName("RegisterRunner")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xyz.block.ftl.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServicePingProcedure:
			controllerServicePingHandler.ServeHTTP(w, r)
		case ControllerServiceProcessListProcedure:
			controllerServiceProcessListHandler.ServeHTTP(w, r)
		case ControllerServiceStatusProcedure:
			controllerServiceStatusHandler.ServeHTTP(w, r)
		case ControllerServiceGetDeploymentContextProcedure:
			controllerServiceGetDeploymentContextHandler.ServeHTTP(w, r)
		case ControllerServiceRegisterRunnerProcedure:
			controllerServiceRegisterRunnerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.Ping is not implemented"))
}

func (UnimplementedControllerServiceHandler) ProcessList(context.Context, *connect.Request[v1.ProcessListRequest]) (*connect.Response[v1.ProcessListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.ProcessList is not implemented"))
}

func (UnimplementedControllerServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.Status is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest], *connect.ServerStream[v1.GetDeploymentContextResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.GetDeploymentContext is not implemented"))
}

func (UnimplementedControllerServiceHandler) RegisterRunner(context.Context, *connect.ClientStream[v1.RegisterRunnerRequest]) (*connect.Response[v1.RegisterRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.ControllerService.RegisterRunner is not implemented"))
}
