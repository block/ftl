// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xyz/block/ftl/v1/deploymentcontext.proto

package ftlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/block/ftl/backend/protos/xyz/block/ftl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentContextServiceName is the fully-qualified name of the DeploymentContextService service.
	DeploymentContextServiceName = "xyz.block.ftl.v1.DeploymentContextService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentContextServicePingProcedure is the fully-qualified name of the
	// DeploymentContextService's Ping RPC.
	DeploymentContextServicePingProcedure = "/xyz.block.ftl.v1.DeploymentContextService/Ping"
	// DeploymentContextServiceGetDeploymentContextProcedure is the fully-qualified name of the
	// DeploymentContextService's GetDeploymentContext RPC.
	DeploymentContextServiceGetDeploymentContextProcedure = "/xyz.block.ftl.v1.DeploymentContextService/GetDeploymentContext"
)

// DeploymentContextServiceClient is a client for the xyz.block.ftl.v1.DeploymentContextService
// service.
type DeploymentContextServiceClient interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentContextResponse], error)
}

// NewDeploymentContextServiceClient constructs a client for the
// xyz.block.ftl.v1.DeploymentContextService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentContextServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentContextServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentContextServiceMethods := v1.File_xyz_block_ftl_v1_deploymentcontext_proto.Services().ByName("DeploymentContextService").Methods()
	return &deploymentContextServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+DeploymentContextServicePingProcedure,
			connect.WithSchema(deploymentContextServiceMethods.ByName("Ping")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDeploymentContext: connect.NewClient[v1.GetDeploymentContextRequest, v1.GetDeploymentContextResponse](
			httpClient,
			baseURL+DeploymentContextServiceGetDeploymentContextProcedure,
			connect.WithSchema(deploymentContextServiceMethods.ByName("GetDeploymentContext")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentContextServiceClient implements DeploymentContextServiceClient.
type deploymentContextServiceClient struct {
	ping                 *connect.Client[v1.PingRequest, v1.PingResponse]
	getDeploymentContext *connect.Client[v1.GetDeploymentContextRequest, v1.GetDeploymentContextResponse]
}

// Ping calls xyz.block.ftl.v1.DeploymentContextService.Ping.
func (c *deploymentContextServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetDeploymentContext calls xyz.block.ftl.v1.DeploymentContextService.GetDeploymentContext.
func (c *deploymentContextServiceClient) GetDeploymentContext(ctx context.Context, req *connect.Request[v1.GetDeploymentContextRequest]) (*connect.ServerStreamForClient[v1.GetDeploymentContextResponse], error) {
	return c.getDeploymentContext.CallServerStream(ctx, req)
}

// DeploymentContextServiceHandler is an implementation of the
// xyz.block.ftl.v1.DeploymentContextService service.
type DeploymentContextServiceHandler interface {
	// Ping service for readiness.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Get configuration state for the deployment
	GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest], *connect.ServerStream[v1.GetDeploymentContextResponse]) error
}

// NewDeploymentContextServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentContextServiceHandler(svc DeploymentContextServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentContextServiceMethods := v1.File_xyz_block_ftl_v1_deploymentcontext_proto.Services().ByName("DeploymentContextService").Methods()
	deploymentContextServicePingHandler := connect.NewUnaryHandler(
		DeploymentContextServicePingProcedure,
		svc.Ping,
		connect.WithSchema(deploymentContextServiceMethods.ByName("Ping")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	deploymentContextServiceGetDeploymentContextHandler := connect.NewServerStreamHandler(
		DeploymentContextServiceGetDeploymentContextProcedure,
		svc.GetDeploymentContext,
		connect.WithSchema(deploymentContextServiceMethods.ByName("GetDeploymentContext")),
		connect.WithHandlerOptions(opts...),
	)
	return "/xyz.block.ftl.v1.DeploymentContextService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentContextServicePingProcedure:
			deploymentContextServicePingHandler.ServeHTTP(w, r)
		case DeploymentContextServiceGetDeploymentContextProcedure:
			deploymentContextServiceGetDeploymentContextHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentContextServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentContextServiceHandler struct{}

func (UnimplementedDeploymentContextServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DeploymentContextService.Ping is not implemented"))
}

func (UnimplementedDeploymentContextServiceHandler) GetDeploymentContext(context.Context, *connect.Request[v1.GetDeploymentContextRequest], *connect.ServerStream[v1.GetDeploymentContextResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("xyz.block.ftl.v1.DeploymentContextService.GetDeploymentContext is not implemented"))
}
