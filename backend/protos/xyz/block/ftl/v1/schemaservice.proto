syntax = "proto3";

package xyz.block.ftl.v1;

import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message GetSchemaRequest {}
message GetSchemaResponse {
  ftl.schema.v1.Schema schema = 1;
  repeated ftl.schema.v1.Changeset changesets = 2;
}

message PullSchemaRequest {
  string subscription_id = 1;
}

message PullSchemaResponse {
  ftl.schema.v1.Notification event = 1;
}

message UpdateDeploymentRuntimeRequest {
  optional string changeset = 1;
  xyz.block.ftl.schema.v1.RuntimeElement update = 2;
}

message UpdateDeploymentRuntimeResponse {}

message GetDeploymentsRequest {}

message GetDeploymentsResponse {
  repeated DeployedSchema schema = 1;
}

message RealmChange {
  string name = 1;
  // The modules to add or update.
  repeated ftl.schema.v1.Module modules = 2;
  // The deployments to remove.
  repeated string to_remove = 3;
  // Whether this is an external realm.
  bool external = 4;
}

message CreateChangesetRequest {
  repeated RealmChange realm_changes = 1;
}

message CreateChangesetResponse {
  // The changeset key of the newly created changeset.
  string changeset = 1;
}

message DeployedSchema {
  string deployment_key = 1;
  ftl.schema.v1.Module schema = 2;
  bool is_active = 3;
}
message PrepareChangesetRequest {
  // The changeset key to prepare.
  string changeset = 1;
}

message PrepareChangesetResponse {}

message CommitChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message CommitChangesetResponse {
  ftl.schema.v1.Changeset changeset = 1;
}

message DrainChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message DrainChangesetResponse {}

message FinalizeChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message FinalizeChangesetResponse {}

message FailChangesetRequest {
  // The changeset key to fail.
  string changeset = 1;
}

message FailChangesetResponse {}

message RollbackChangesetRequest {
  // The changeset key to fail.
  string changeset = 1;
  string error = 2;
}

message RollbackChangesetResponse {
  ftl.schema.v1.Changeset changeset = 1;
}

message GetDeploymentRequest {
  string deployment_key = 1;
}
message GetDeploymentResponse {
  ftl.schema.v1.Module schema = 1;
}

message PushSchemaRequest {
  ftl.schema.v1.Notification event = 1;
}

message PushSchemaResponse {}

service SchemaService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get the full schema.
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Pull schema changes.
  //
  // Note that if there are no deployments this will block indefinitely, making it unsuitable for
  // just retrieving the schema. Use GetSchema for that.
  rpc PullSchema(PullSchemaRequest) returns (stream PullSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // UpdateModuleRuntime is used to update the runtime configuration of a module.
  rpc UpdateDeploymentRuntime(UpdateDeploymentRuntimeRequest) returns (UpdateDeploymentRuntimeResponse);

  // GetDeployments is used to get the schema for all deployments.
  rpc GetDeployments(GetDeploymentsRequest) returns (GetDeploymentsResponse);

  // CreateChangeset creates a new changeset.
  rpc CreateChangeset(CreateChangesetRequest) returns (CreateChangesetResponse);

  // PrepareChangeset moves the changeset into the prepared state.
  rpc PrepareChangeset(PrepareChangesetRequest) returns (PrepareChangesetResponse);

  // CommitChangeset makes all deployments for the changeset part of the canonical schema.
  rpc CommitChangeset(CommitChangesetRequest) returns (CommitChangesetResponse);

  rpc DrainChangeset(DrainChangesetRequest) returns (DrainChangesetResponse);

  rpc FinalizeChangeset(FinalizeChangesetRequest) returns (FinalizeChangesetResponse);
  // RollbackChangeset Rolls back a failing changeset
  rpc RollbackChangeset(RollbackChangesetRequest) returns (RollbackChangesetResponse);
  // FailChangeset fails an active changeset.
  rpc FailChangeset(FailChangesetRequest) returns (FailChangesetResponse);
  // GetDeployment gets a deployment by deployment key
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);
}

service SchemaMirrorService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // PushSchema is used to push schema changes to the mirror service.
  rpc PushSchema(stream PushSchemaRequest) returns (PushSchemaResponse);
}