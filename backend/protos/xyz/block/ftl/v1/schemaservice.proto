syntax = "proto3";

package xyz.block.ftl.v1;

import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/v1;ftlv1";
option java_multiple_files = true;

message GetSchemaRequest {}
message GetSchemaResponse {
  ftl.schema.v1.Schema schema = 1;
  repeated ftl.schema.v1.Changeset changesets = 2;
}

message PullSchemaRequest {}
message PullSchemaResponse {
  // ChangesetCreated is sent when a new changeset is created.
  message ChangesetCreated {
    ftl.schema.v1.Changeset changeset = 1;
  }

  // ChangesetFailed is sent when a changeset fails.
  message ChangesetFailed {
    string key = 1;
    string error = 2;
  }

  // ChangesetFailed is sent when a changeset becomes canonical.
  message ChangesetCommitted {
    string key = 1;
  }

  // Deployment created is sent when a deployment is new to the listener but is not part of a changeset.
  message DeploymentCreated {
    // Will not be set for builtin modules.
    // optional string key = 1;
    // string module_name = 2;
    // If present, the deployment is not yet canonical as it is currently part of a changeset.
    // optional string changeset = 3;

    optional string changeset = 1;
    optional ftl.schema.v1.Module schema = 2;
  }

  message DeploymentUpdated {
    // Will not be set for builtin modules.
    // optional string key = 1;
    // string module_name = 2;
    // If present, the deployment is not yet canonical as it is currently part of a changeset.
    optional string changeset = 1;

    optional ftl.schema.v1.Module schema = 2;
  }

  message DeploymentRemoved {
    // Will not be set for builtin modules.
    optional string key = 1;
    string module_name = 2;

    // If this is true then the module was removed as well as the deployment.
    bool module_removed = 3;
  }

  oneof event {
    ChangesetCreated changeset_created = 4;
    ChangesetFailed changeset_failed = 5;
    ChangesetCommitted changeset_committed = 6;
    DeploymentCreated deployment_created = 7;
    DeploymentUpdated deployment_updated = 8;
    DeploymentRemoved deployment_removed = 9;
  }

  // If true there are more schema changes immediately following this one as part of the initial batch.
  // If false this is the last schema change in the initial batch, but others may follow later.
  bool more = 31634;
}

message UpdateDeploymentRuntimeRequest {
  ftl.schema.v1.ModuleRuntimeEvent event = 1;
}

message UpdateDeploymentRuntimeResponse {}

message UpdateSchemaRequest {
  ftl.schema.v1.Event event = 1;
}

message UpdateSchemaResponse {}

message GetDeploymentsRequest {}

message GetDeploymentsResponse {
  repeated DeployedSchema schema = 1;
}
message CreateChangesetRequest {
  // The modules to add or update.
  repeated ftl.schema.v1.Module modules = 1;
  // The deployments to remove.
  repeated string removed_deployments = 2;
}

message CreateChangesetResponse {
  // The changeset key of the newly created changeset.
  string changeset = 1;
}

message DeployedSchema {
  string deployment_key = 1;
  ftl.schema.v1.Module schema = 2;
  bool is_active = 3;
}
message PrepareChangesetRequest {
  // The changeset key to prepare.
  string changeset = 1;
}

message PrepareChangesetResponse {}

message CommitChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message CommitChangesetResponse {
  ftl.schema.v1.Changeset changeset = 1;
}

message DrainChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message DrainChangesetResponse {}

message FinalizeChangesetRequest {
  // The changeset key to commit.
  string changeset = 1;
}

message FinalizeChangesetResponse {}

message FailChangesetRequest {
  // The changeset key to fail.
  string changeset = 1;
  string error = 2;
}

message FailChangesetResponse {}

message GetDeploymentRequest {
  string deployment_key = 1;
}
message GetDeploymentResponse {
  ftl.schema.v1.Module schema = 1;
}

service SchemaService {
  // Ping service for readiness.
  rpc Ping(PingRequest) returns (PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get the full schema.
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Pull schema changes from the Controller.
  //
  // Note that if there are no deployments this will block indefinitely, making it unsuitable for
  // just retrieving the schema. Use GetSchema for that.
  rpc PullSchema(PullSchemaRequest) returns (stream PullSchemaResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // UpdateModuleRuntime is used to update the runtime configuration of a module.
  rpc UpdateDeploymentRuntime(UpdateDeploymentRuntimeRequest) returns (UpdateDeploymentRuntimeResponse);

  // UpdateSchema is used to update the schema.
  rpc UpdateSchema(UpdateSchemaRequest) returns (UpdateSchemaResponse);

  // GetDeployments is used to get the schema for all deployments.
  rpc GetDeployments(GetDeploymentsRequest) returns (GetDeploymentsResponse);

  // CreateChangeset creates a new changeset.
  rpc CreateChangeset(CreateChangesetRequest) returns (CreateChangesetResponse);

  // PrepareChangeset moves the changeset into the prepared state.
  rpc PrepareChangeset(PrepareChangesetRequest) returns (PrepareChangesetResponse);

  // CommitChangeset makes all deployments for the changeset part of the canonical schema.
  rpc CommitChangeset(CommitChangesetRequest) returns (CommitChangesetResponse);

  rpc DrainChangeset(DrainChangesetRequest) returns (DrainChangesetResponse);
  rpc FinalizeChangeset(FinalizeChangesetRequest) returns (FinalizeChangesetResponse);
  // FailChangeset fails an active changeset.
  rpc FailChangeset(FailChangesetRequest) returns (FailChangesetResponse);
  // GetDeployment gets a deployment by deployment key
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);
}
