syntax = "proto3";

package xyz.block.ftl.hotreload.v1;

import "xyz/block/ftl/language/v1/service.proto";
import "xyz/block/ftl/schema/v1/schema.proto";
import "xyz/block/ftl/v1/ftl.proto";

option go_package = "github.com/block/ftl/backend/protos/xyz/block/ftl/hotreload/v1;hotreloadpb";
option java_multiple_files = true;

message ReloadRequest {
  bool force_new_runner = 1;
  // If the schema has changed on the plugin side, this will be true
  bool schema_changed = 2;
}

message ReloadResponse {
  SchemaState state = 1;
  bool failed = 2;
}

message WatchRequest {}

message WatchResponse {
  SchemaState state = 1;
}

message RunnerInfoRequest {
  string address = 1;
  string deployment = 2;
  int64 schema_version = 3;
  int64 runner_version = 4;
  repeated Database databases = 5;
}

message Database {
  string name = 1;
  string address = 2;
}

message RunnerInfoResponse {
  bool outdated = 1;
}

message ReloadNotRequired {}

message ReloadSuccess {
  SchemaState state = 1;
}

message ReloadFailed {
  // Module schema for the built module
  SchemaState state = 1;
}

message SchemaState {
  ftl.schema.v1.Module module = 1;
  ftl.language.v1.ErrorList errors = 2;
  bool new_runner_required = 3;
  int64 version = 4;
}

// HotReloadService is for communication between a language plugin a language runtime that can perform a hot reload
service HotReloadService {
  // Ping service for readiness.
  rpc Ping(xyz.block.ftl.v1.PingRequest) returns (xyz.block.ftl.v1.PingResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Forces an explicit Reload from the plugin. This is useful for when the plugin needs to trigger a Reload,
  // such as when the Reload context changes.
  //
  rpc Reload(ReloadRequest) returns (ReloadResponse);

  // Watch for hot reloads not initiated by an explicit Reload call.
  rpc Watch(WatchRequest) returns (stream WatchResponse);

  // Invoked by the runner to provide runner information to the plugin.
  rpc RunnerInfo(RunnerInfoRequest) returns (RunnerInfoResponse);
}
