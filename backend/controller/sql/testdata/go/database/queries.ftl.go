// Code generated by FTL. DO NOT EDIT.
package database

import (
	"context"
	"github.com/alecthomas/types/tuple"
	"github.com/block/ftl/common/reflection"
	"github.com/block/ftl/go-runtime/ftl"
	"github.com/block/ftl/go-runtime/server"
	stdtime "time"
)

type FindByDataAndIdsQuery struct {
	TextFields []string
	_2s        []int
}
type Request struct {
	Id        int
	Data      ftl.Option[string]
	CreatedAt stdtime.Time
}

type CreateRequestClient func(context.Context, ftl.Option[string]) error

type FindByDataAndIdsClient func(context.Context, FindByDataAndIdsQuery) ([]Request, error)

type FindMultipleClient func(context.Context, []string) ([]Request, error)

type GetRequestDataClient func(context.Context) ([]ftl.Option[string], error)

func init() {
	reflection.Register(
		server.QuerySink[ftl.Option[string]]("database", "createRequest", reflection.CommandTypeExec, "testdb", "postgres", "INSERT INTO requests (data) VALUES ($1)", []string{}, []tuple.Pair[string, string]{}),
		server.Query[FindByDataAndIdsQuery, Request]("database", "findByDataAndIds", reflection.CommandTypeMany, "testdb", "postgres", "SELECT id, data, created_at FROM requests WHERE data = ANY($1::text[]) AND id = ANY($2::int[])", []string{}, []tuple.Pair[string, string]{tuple.PairOf("id", "Id"), tuple.PairOf("data", "Data"), tuple.PairOf("created_at", "CreatedAt")}),
		server.Query[[]string, Request]("database", "findMultiple", reflection.CommandTypeMany, "testdb", "postgres", "SELECT id, data, created_at FROM requests WHERE data = ANY($1::text[])", []string{}, []tuple.Pair[string, string]{tuple.PairOf("id", "Id"), tuple.PairOf("data", "Data"), tuple.PairOf("created_at", "CreatedAt")}),
		server.QuerySource[ftl.Option[string]]("database", "getRequestData", reflection.CommandTypeMany, "testdb", "postgres", "SELECT data FROM requests", []string{}, []tuple.Pair[string, string]{}),
	)
}
