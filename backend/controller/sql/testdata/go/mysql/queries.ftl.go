// Code generated by FTL. DO NOT EDIT.
package mysql

import (
    "context"
    "github.com/alecthomas/types/tuple"
    "github.com/block/ftl/common/reflection"
    "github.com/block/ftl/go-runtime/ftl"
    "github.com/block/ftl/go-runtime/server"
    stdtime "time"
)

type CreateRequestQuery struct {
  	Data string
}
type GetAllTestTypesResult struct {
  	Id int
  	IntVal int
  	FloatVal float64
  	TextVal string
  	BoolVal bool
  	TimeVal stdtime.Time
  	BlobVal []byte
  	OptionalVal ftl.Option[string]
}
type GetRequestDataResult struct {
  	Data string
}
type GetTestTypeQuery struct {
  	Id int
}
type GetTestTypeResult struct {
  	Id int
  	IntVal int
  	FloatVal float64
  	TextVal string
  	BoolVal bool
  	TimeVal stdtime.Time
  	BlobVal []byte
  	OptionalVal ftl.Option[string]
}
type InsertTestTypesQuery struct {
  	IntVal int
  	FloatVal float64
  	TextVal string
  	BoolVal bool
  	TimeVal stdtime.Time
  	BlobVal []byte
  	OptionalVal ftl.Option[string]
}
	
type CreateRequestClient func(context.Context, CreateRequestQuery) error
	
type GetAllTestTypesClient func(context.Context) ([]GetAllTestTypesResult, error)
	
type GetRequestDataClient func(context.Context) ([]GetRequestDataResult, error)
	
type GetTestTypeClient func(context.Context, GetTestTypeQuery) (GetTestTypeResult, error)
	
type InsertTestTypesClient func(context.Context, InsertTestTypesQuery) error

func init() {
	reflection.Register(
		server.QuerySink[CreateRequestQuery]("mysql", "createRequest", reflection.CommandTypeExec, "testdb", "INSERT INTO requests (data) VALUES (?)", []string{"Data"}, []tuple.Pair[string,string]{}),
		server.QuerySource[GetAllTestTypesResult]("mysql", "getAllTestTypes", reflection.CommandTypeMany, "testdb", "SELECT id, int_val, float_val, text_val, bool_val, time_val, blob_val, optional_val  FROM test_types", []string{}, []tuple.Pair[string,string]{tuple.PairOf("id", "Id"),tuple.PairOf("int_val", "IntVal"),tuple.PairOf("float_val", "FloatVal"),tuple.PairOf("text_val", "TextVal"),tuple.PairOf("bool_val", "BoolVal"),tuple.PairOf("time_val", "TimeVal"),tuple.PairOf("blob_val", "BlobVal"),tuple.PairOf("optional_val", "OptionalVal")}),
		server.QuerySource[GetRequestDataResult]("mysql", "getRequestData", reflection.CommandTypeMany, "testdb", "SELECT data FROM requests", []string{}, []tuple.Pair[string,string]{tuple.PairOf("data", "Data")}),
		server.Query[GetTestTypeQuery, GetTestTypeResult]("mysql", "getTestType", reflection.CommandTypeOne, "testdb", "SELECT id, int_val, float_val, text_val, bool_val, time_val, blob_val, optional_val  FROM test_types  WHERE id = ?", []string{"Id"}, []tuple.Pair[string,string]{tuple.PairOf("id", "Id"),tuple.PairOf("int_val", "IntVal"),tuple.PairOf("float_val", "FloatVal"),tuple.PairOf("text_val", "TextVal"),tuple.PairOf("bool_val", "BoolVal"),tuple.PairOf("time_val", "TimeVal"),tuple.PairOf("blob_val", "BlobVal"),tuple.PairOf("optional_val", "OptionalVal")}),
		server.QuerySink[InsertTestTypesQuery]("mysql", "insertTestTypes", reflection.CommandTypeExec, "testdb", "INSERT INTO test_types (int_val, float_val, text_val, bool_val, time_val, blob_val, optional_val)  VALUES (?, ?, ?, ?, ?, ?, ?)", []string{"IntVal","FloatVal","TextVal","BoolVal","TimeVal","BlobVal","OptionalVal"}, []tuple.Pair[string,string]{}),
	)
}