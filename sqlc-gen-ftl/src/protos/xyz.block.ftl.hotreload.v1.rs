// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReloadRequest {
    #[prost(bool, tag="1")]
    pub force_new_runner: bool,
    /// If the reload results in a new runner, this will be the new deployment key
    #[prost(string, tag="2")]
    pub new_deployment_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReloadResponse {
    #[prost(message, optional, tag="1")]
    pub state: ::core::option::Option<SchemaState>,
    #[prost(bool, tag="2")]
    pub failed: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WatchRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchResponse {
    #[prost(message, optional, tag="1")]
    pub state: ::core::option::Option<SchemaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunnerInfoRequest {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub deployment: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub databases: ::prost::alloc::vec::Vec<Database>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Database {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RunnerInfoResponse {
    #[prost(bool, tag="1")]
    pub outdated: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReloadNotRequired {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReloadSuccess {
    #[prost(message, optional, tag="1")]
    pub state: ::core::option::Option<SchemaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReloadFailed {
    /// Module schema for the built module
    #[prost(message, optional, tag="1")]
    pub state: ::core::option::Option<SchemaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SchemaState {
    #[prost(message, optional, tag="1")]
    pub module: ::core::option::Option<super::super::schema::v1::Module>,
    #[prost(message, optional, tag="2")]
    pub errors: ::core::option::Option<super::super::language::v1::ErrorList>,
    #[prost(bool, tag="3")]
    pub new_runner_required: bool,
    #[prost(int64, tag="4")]
    pub version: i64,
}
// @@protoc_insertion_point(module)
