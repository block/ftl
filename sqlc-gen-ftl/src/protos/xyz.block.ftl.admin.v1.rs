// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigRef {
    #[prost(string, optional, tag="1")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigListRequest {
    #[prost(string, optional, tag="1")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="2")]
    pub include_values: ::core::option::Option<bool>,
    #[prost(enumeration="ConfigProvider", optional, tag="3")]
    pub provider: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigListResponse {
    #[prost(message, repeated, tag="1")]
    pub configs: ::prost::alloc::vec::Vec<config_list_response::Config>,
}
/// Nested message and enum types in `ConfigListResponse`.
pub mod config_list_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Config {
        #[prost(string, tag="1")]
        pub ref_path: ::prost::alloc::string::String,
        #[prost(bytes="bytes", optional, tag="2")]
        pub value: ::core::option::Option<::prost::bytes::Bytes>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigGetRequest {
    #[prost(message, optional, tag="1")]
    pub r#ref: ::core::option::Option<ConfigRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigGetResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigSetRequest {
    #[prost(enumeration="ConfigProvider", optional, tag="1")]
    pub provider: ::core::option::Option<i32>,
    #[prost(message, optional, tag="2")]
    pub r#ref: ::core::option::Option<ConfigRef>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigSetResponse {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigUnsetRequest {
    #[prost(enumeration="ConfigProvider", optional, tag="1")]
    pub provider: ::core::option::Option<i32>,
    #[prost(message, optional, tag="2")]
    pub r#ref: ::core::option::Option<ConfigRef>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigUnsetResponse {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretsListRequest {
    #[prost(string, optional, tag="1")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="2")]
    pub include_values: ::core::option::Option<bool>,
    #[prost(enumeration="SecretProvider", optional, tag="3")]
    pub provider: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretsListResponse {
    #[prost(message, repeated, tag="1")]
    pub secrets: ::prost::alloc::vec::Vec<secrets_list_response::Secret>,
}
/// Nested message and enum types in `SecretsListResponse`.
pub mod secrets_list_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Secret {
        #[prost(string, tag="1")]
        pub ref_path: ::prost::alloc::string::String,
        #[prost(bytes="bytes", optional, tag="2")]
        pub value: ::core::option::Option<::prost::bytes::Bytes>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretGetRequest {
    #[prost(message, optional, tag="1")]
    pub r#ref: ::core::option::Option<ConfigRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretGetResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretSetRequest {
    #[prost(enumeration="SecretProvider", optional, tag="1")]
    pub provider: ::core::option::Option<i32>,
    #[prost(message, optional, tag="2")]
    pub r#ref: ::core::option::Option<ConfigRef>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SecretSetResponse {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretUnsetRequest {
    #[prost(enumeration="SecretProvider", optional, tag="1")]
    pub provider: ::core::option::Option<i32>,
    #[prost(message, optional, tag="2")]
    pub r#ref: ::core::option::Option<ConfigRef>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SecretUnsetResponse {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapConfigsForModuleRequest {
    #[prost(string, tag="1")]
    pub module: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapConfigsForModuleResponse {
    #[prost(map="string, bytes", tag="1")]
    pub values: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::bytes::Bytes>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapSecretsForModuleRequest {
    #[prost(string, tag="1")]
    pub module: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MapSecretsForModuleResponse {
    #[prost(map="string, bytes", tag="1")]
    pub values: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::bytes::Bytes>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetSubscriptionRequest {
    #[prost(message, optional, tag="1")]
    pub subscription: ::core::option::Option<super::super::schema::v1::Ref>,
    #[prost(enumeration="SubscriptionOffset", tag="2")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetSubscriptionResponse {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyChangesetRequest {
    /// The modules to add or update.
    #[prost(message, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<super::super::schema::v1::Module>,
    /// The deployments to remove.
    #[prost(string, repeated, tag="2")]
    pub to_remove: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyChangesetResponse {
    /// The changeset, the result can be determined by checking the state
    #[prost(message, optional, tag="2")]
    pub changeset: ::core::option::Option<super::super::schema::v1::Changeset>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArtefactDiffsRequest {
    #[prost(string, repeated, tag="1")]
    pub client_digests: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArtefactDiffsResponse {
    #[prost(string, repeated, tag="1")]
    pub missing_digests: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Artefacts that the client already has, and their path+executable status.
    #[prost(message, repeated, tag="2")]
    pub client_artefacts: ::prost::alloc::vec::Vec<DeploymentArtefact>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDeploymentArtefactsRequest {
    #[prost(string, tag="1")]
    pub deployment_key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub have_artefacts: ::prost::alloc::vec::Vec<DeploymentArtefact>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDeploymentArtefactsResponse {
    #[prost(message, optional, tag="1")]
    pub artefact: ::core::option::Option<DeploymentArtefact>,
    #[prost(bytes="bytes", tag="2")]
    pub chunk: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeploymentArtefact {
    #[prost(bytes="bytes", tag="1")]
    pub digest: ::prost::bytes::Bytes,
    #[prost(string, tag="2")]
    pub path: ::prost::alloc::string::String,
    #[prost(bool, tag="3")]
    pub executable: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadArtefactRequest {
    /// Digest of the complete artefact.
    #[prost(bytes="bytes", tag="1")]
    pub digest: ::prost::bytes::Bytes,
    /// Size of the complete artefact.
    #[prost(int64, tag="2")]
    pub size: i64,
    /// Chunk of the artefact.
    #[prost(bytes="bytes", tag="3")]
    pub chunk: ::prost::bytes::Bytes,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UploadArtefactResponse {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClusterInfoRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterInfoResponse {
    #[prost(string, tag="1")]
    pub os: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub arch: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConfigProvider {
    Unspecified = 0,
    /// Write values inline in the configuration file.
    Inline = 1,
    /// Print configuration as environment variables.
    Envar = 2,
}
impl ConfigProvider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CONFIG_PROVIDER_UNSPECIFIED",
            Self::Inline => "CONFIG_PROVIDER_INLINE",
            Self::Envar => "CONFIG_PROVIDER_ENVAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONFIG_PROVIDER_UNSPECIFIED" => Some(Self::Unspecified),
            "CONFIG_PROVIDER_INLINE" => Some(Self::Inline),
            "CONFIG_PROVIDER_ENVAR" => Some(Self::Envar),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecretProvider {
    Unspecified = 0,
    /// Write values inline in the configuration file.
    Inline = 1,
    /// Print configuration as environment variables.
    Envar = 2,
    /// Write to the system keychain.
    Keychain = 3,
    /// Store a secret in the 1Password vault.
    Op = 4,
    /// Store a secret in the AWS Secrets Manager.
    Asm = 5,
}
impl SecretProvider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SECRET_PROVIDER_UNSPECIFIED",
            Self::Inline => "SECRET_PROVIDER_INLINE",
            Self::Envar => "SECRET_PROVIDER_ENVAR",
            Self::Keychain => "SECRET_PROVIDER_KEYCHAIN",
            Self::Op => "SECRET_PROVIDER_OP",
            Self::Asm => "SECRET_PROVIDER_ASM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECRET_PROVIDER_UNSPECIFIED" => Some(Self::Unspecified),
            "SECRET_PROVIDER_INLINE" => Some(Self::Inline),
            "SECRET_PROVIDER_ENVAR" => Some(Self::Envar),
            "SECRET_PROVIDER_KEYCHAIN" => Some(Self::Keychain),
            "SECRET_PROVIDER_OP" => Some(Self::Op),
            "SECRET_PROVIDER_ASM" => Some(Self::Asm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubscriptionOffset {
    Unspecified = 0,
    Earliest = 1,
    Latest = 2,
}
impl SubscriptionOffset {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SUBSCRIPTION_OFFSET_UNSPECIFIED",
            Self::Earliest => "SUBSCRIPTION_OFFSET_EARLIEST",
            Self::Latest => "SUBSCRIPTION_OFFSET_LATEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUBSCRIPTION_OFFSET_UNSPECIFIED" => Some(Self::Unspecified),
            "SUBSCRIPTION_OFFSET_EARLIEST" => Some(Self::Earliest),
            "SUBSCRIPTION_OFFSET_LATEST" => Some(Self::Latest),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
