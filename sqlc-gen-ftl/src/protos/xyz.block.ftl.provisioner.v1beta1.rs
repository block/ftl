// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProvisionRequest {
    #[prost(string, tag="1")]
    pub ftl_cluster_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub desired_module: ::core::option::Option<super::super::schema::v1::Module>,
    #[prost(message, optional, tag="3")]
    pub previous_module: ::core::option::Option<super::super::schema::v1::Module>,
    #[prost(string, tag="4")]
    pub changeset: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="5")]
    pub kinds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProvisionResponse {
    #[prost(string, tag="1")]
    pub provisioning_token: ::prost::alloc::string::String,
    #[prost(enumeration="provision_response::ProvisionResponseStatus", tag="2")]
    pub status: i32,
}
/// Nested message and enum types in `ProvisionResponse`.
pub mod provision_response {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ProvisionResponseStatus {
        Unspecified = 0,
        Submitted = 1,
    }
    impl ProvisionResponseStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "PROVISION_RESPONSE_STATUS_UNSPECIFIED",
                Self::Submitted => "PROVISION_RESPONSE_STATUS_SUBMITTED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PROVISION_RESPONSE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "PROVISION_RESPONSE_STATUS_SUBMITTED" => Some(Self::Submitted),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {
    #[prost(string, tag="1")]
    pub provisioning_token: ::prost::alloc::string::String,
    /// The outputs of this module are updated if the the status is a success
    #[prost(message, optional, tag="2")]
    pub desired_module: ::core::option::Option<super::super::schema::v1::Module>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    #[prost(oneof="status_response::Status", tags="1, 2, 3")]
    pub status: ::core::option::Option<status_response::Status>,
}
/// Nested message and enum types in `StatusResponse`.
pub mod status_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ProvisioningRunning {
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ProvisioningFailed {
        #[prost(string, tag="1")]
        pub error_message: ::prost::alloc::string::String,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ProvisioningSuccess {
        #[prost(message, repeated, tag="1")]
        pub outputs: ::prost::alloc::vec::Vec<super::super::super::schema::v1::RuntimeElement>,
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Status {
        #[prost(message, tag="1")]
        Running(ProvisioningRunning),
        #[prost(message, tag="2")]
        Success(ProvisioningSuccess),
        #[prost(message, tag="3")]
        Failed(ProvisioningFailed),
    }
}
// @@protoc_insertion_point(module)
