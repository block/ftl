// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edges {
    #[prost(message, repeated, tag="1")]
    pub r#in: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
    #[prost(message, repeated, tag="2")]
    pub out: ::prost::alloc::vec::Vec<super::super::schema::v1::Ref>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Config {
    #[prost(message, optional, tag="1")]
    pub config: ::core::option::Option<super::super::schema::v1::Config>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<super::super::schema::v1::Data>,
    #[prost(string, tag="2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Database {
    #[prost(message, optional, tag="1")]
    pub database: ::core::option::Option<super::super::schema::v1::Database>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enum {
    #[prost(message, optional, tag="1")]
    pub r#enum: ::core::option::Option<super::super::schema::v1::Enum>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Topic {
    #[prost(message, optional, tag="1")]
    pub topic: ::core::option::Option<super::super::schema::v1::Topic>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypeAlias {
    #[prost(message, optional, tag="1")]
    pub typealias: ::core::option::Option<super::super::schema::v1::TypeAlias>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Secret {
    #[prost(message, optional, tag="1")]
    pub secret: ::core::option::Option<super::super::schema::v1::Secret>,
    #[prost(message, optional, tag="2")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(string, tag="3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Verb {
    #[prost(message, optional, tag="1")]
    pub verb: ::core::option::Option<super::super::schema::v1::Verb>,
    #[prost(string, tag="2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub json_request_schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub edges: ::core::option::Option<Edges>,
    #[prost(message, optional, tag="5")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Module {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub runtime: ::core::option::Option<super::super::schema::v1::ModuleRuntime>,
    #[prost(message, repeated, tag="4")]
    pub verbs: ::prost::alloc::vec::Vec<Verb>,
    #[prost(message, repeated, tag="5")]
    pub data: ::prost::alloc::vec::Vec<Data>,
    #[prost(message, repeated, tag="6")]
    pub secrets: ::prost::alloc::vec::Vec<Secret>,
    #[prost(message, repeated, tag="7")]
    pub configs: ::prost::alloc::vec::Vec<Config>,
    #[prost(message, repeated, tag="8")]
    pub databases: ::prost::alloc::vec::Vec<Database>,
    #[prost(message, repeated, tag="9")]
    pub enums: ::prost::alloc::vec::Vec<Enum>,
    #[prost(message, repeated, tag="10")]
    pub topics: ::prost::alloc::vec::Vec<Topic>,
    #[prost(message, repeated, tag="11")]
    pub typealiases: ::prost::alloc::vec::Vec<TypeAlias>,
    #[prost(message, optional, tag="12")]
    pub module: ::core::option::Option<super::super::schema::v1::Module>,
    #[prost(message, optional, tag="13")]
    pub git: ::core::option::Option<super::super::schema::v1::MetadataGit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopologyGroup {
    #[prost(string, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Topology {
    #[prost(message, repeated, tag="1")]
    pub levels: ::prost::alloc::vec::Vec<TopologyGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetModulesRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModulesResponse {
    #[prost(message, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<Module>,
    #[prost(message, optional, tag="2")]
    pub topology: ::core::option::Option<Topology>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamModulesRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamModulesResponse {
    #[prost(message, repeated, tag="1")]
    pub modules: ::prost::alloc::vec::Vec<Module>,
    #[prost(message, optional, tag="2")]
    pub topology: ::core::option::Option<Topology>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConfigRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConfigResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConfigRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConfigResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSecretRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub module: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="bytes", tag="3")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSecretResponse {
    #[prost(bytes="bytes", tag="1")]
    pub value: ::prost::bytes::Bytes,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetInfoRequest {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInfoResponse {
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub is_local_dev: bool,
    #[prost(string, tag="3")]
    pub build_time: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteGooseRequest {
    #[prost(string, tag="1")]
    pub prompt: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteGooseResponse {
    #[prost(string, tag="1")]
    pub response: ::prost::alloc::string::String,
    #[prost(enumeration="execute_goose_response::Source", tag="2")]
    pub source: i32,
}
/// Nested message and enum types in `ExecuteGooseResponse`.
pub mod execute_goose_response {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Source {
        Unspecified = 0,
        Stdout = 1,
        Stderr = 2,
        Completion = 3,
    }
    impl Source {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "SOURCE_UNSPECIFIED",
                Self::Stdout => "SOURCE_STDOUT",
                Self::Stderr => "SOURCE_STDERR",
                Self::Completion => "SOURCE_COMPLETION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SOURCE_UNSPECIFIED" => Some(Self::Unspecified),
                "SOURCE_STDOUT" => Some(Self::Stdout),
                "SOURCE_STDERR" => Some(Self::Stderr),
                "SOURCE_COMPLETION" => Some(Self::Completion),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenFileInEditorRequest {
    #[prost(string, tag="1")]
    pub editor: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub path: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub line: i32,
    #[prost(int32, tag="4")]
    pub column: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenFileInEditorResponse {
}
// @@protoc_insertion_point(module)
