// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/admin/v1/admin.proto (package xyz.block.ftl.admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Changeset, Module, Ref, RuntimeElement } from "../../schema/v1/schema_pb.js";
import { TimelineQuery } from "../../timeline/v1/timeline_pb.js";
import { LogEvent } from "../../timeline/v1/event_pb.js";

/**
 * @generated from enum xyz.block.ftl.admin.v1.ConfigProvider
 */
export enum ConfigProvider {
  /**
   * @generated from enum value: CONFIG_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: CONFIG_PROVIDER_INLINE = 1;
   */
  INLINE = 1,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: CONFIG_PROVIDER_ENVAR = 2;
   */
  ENVAR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConfigProvider)
proto3.util.setEnumType(ConfigProvider, "xyz.block.ftl.admin.v1.ConfigProvider", [
  { no: 0, name: "CONFIG_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "CONFIG_PROVIDER_INLINE" },
  { no: 2, name: "CONFIG_PROVIDER_ENVAR" },
]);

/**
 * @generated from enum xyz.block.ftl.admin.v1.SecretProvider
 */
export enum SecretProvider {
  /**
   * @generated from enum value: SECRET_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Write values inline in the configuration file.
   *
   * @generated from enum value: SECRET_PROVIDER_INLINE = 1;
   */
  INLINE = 1,

  /**
   * Print configuration as environment variables.
   *
   * @generated from enum value: SECRET_PROVIDER_ENVAR = 2;
   */
  ENVAR = 2,

  /**
   * Write to the system keychain.
   *
   * @generated from enum value: SECRET_PROVIDER_KEYCHAIN = 3;
   */
  KEYCHAIN = 3,

  /**
   * Store a secret in the 1Password vault.
   *
   * @generated from enum value: SECRET_PROVIDER_OP = 4;
   */
  OP = 4,

  /**
   * Store a secret in the AWS Secrets Manager.
   *
   * @generated from enum value: SECRET_PROVIDER_ASM = 5;
   */
  ASM = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(SecretProvider)
proto3.util.setEnumType(SecretProvider, "xyz.block.ftl.admin.v1.SecretProvider", [
  { no: 0, name: "SECRET_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "SECRET_PROVIDER_INLINE" },
  { no: 2, name: "SECRET_PROVIDER_ENVAR" },
  { no: 3, name: "SECRET_PROVIDER_KEYCHAIN" },
  { no: 4, name: "SECRET_PROVIDER_OP" },
  { no: 5, name: "SECRET_PROVIDER_ASM" },
]);

/**
 * @generated from enum xyz.block.ftl.admin.v1.SubscriptionOffset
 */
export enum SubscriptionOffset {
  /**
   * @generated from enum value: SUBSCRIPTION_OFFSET_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUBSCRIPTION_OFFSET_EARLIEST = 1;
   */
  EARLIEST = 1,

  /**
   * @generated from enum value: SUBSCRIPTION_OFFSET_LATEST = 2;
   */
  LATEST = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SubscriptionOffset)
proto3.util.setEnumType(SubscriptionOffset, "xyz.block.ftl.admin.v1.SubscriptionOffset", [
  { no: 0, name: "SUBSCRIPTION_OFFSET_UNSPECIFIED" },
  { no: 1, name: "SUBSCRIPTION_OFFSET_EARLIEST" },
  { no: 2, name: "SUBSCRIPTION_OFFSET_LATEST" },
]);

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigRef
 */
export class ConfigRef extends Message<ConfigRef> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ConfigRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRef {
    return new ConfigRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigRef | PlainMessage<ConfigRef> | undefined, b: ConfigRef | PlainMessage<ConfigRef> | undefined): boolean {
    return proto3.util.equals(ConfigRef, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigListRequest
 */
export class ConfigListRequest extends Message<ConfigListRequest> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 2;
   */
  includeValues?: boolean;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.ConfigProvider provider = 3;
   */
  provider?: ConfigProvider;

  constructor(data?: PartialMessage<ConfigListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListRequest {
    return new ConfigListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListRequest | PlainMessage<ConfigListRequest> | undefined, b: ConfigListRequest | PlainMessage<ConfigListRequest> | undefined): boolean {
    return proto3.util.equals(ConfigListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigListResponse
 */
export class ConfigListResponse extends Message<ConfigListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.ConfigListResponse.Config configs = 1;
   */
  configs: ConfigListResponse_Config[] = [];

  constructor(data?: PartialMessage<ConfigListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configs", kind: "message", T: ConfigListResponse_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListResponse {
    return new ConfigListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListResponse | PlainMessage<ConfigListResponse> | undefined, b: ConfigListResponse | PlainMessage<ConfigListResponse> | undefined): boolean {
    return proto3.util.equals(ConfigListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigListResponse.Config
 */
export class ConfigListResponse_Config extends Message<ConfigListResponse_Config> {
  /**
   * @generated from field: string ref_path = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: Uint8Array;

  constructor(data?: PartialMessage<ConfigListResponse_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigListResponse.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigListResponse_Config {
    return new ConfigListResponse_Config().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigListResponse_Config | PlainMessage<ConfigListResponse_Config> | undefined, b: ConfigListResponse_Config | PlainMessage<ConfigListResponse_Config> | undefined): boolean {
    return proto3.util.equals(ConfigListResponse_Config, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigGetRequest
 */
export class ConfigGetRequest extends Message<ConfigGetRequest> {
  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 1;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<ConfigGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigGetRequest {
    return new ConfigGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigGetRequest | PlainMessage<ConfigGetRequest> | undefined, b: ConfigGetRequest | PlainMessage<ConfigGetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigGetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigGetResponse
 */
export class ConfigGetResponse extends Message<ConfigGetResponse> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<ConfigGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigGetResponse {
    return new ConfigGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigGetResponse | PlainMessage<ConfigGetResponse> | undefined, b: ConfigGetResponse | PlainMessage<ConfigGetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigGetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigSetRequest
 */
export class ConfigSetRequest extends Message<ConfigSetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<ConfigSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSetRequest {
    return new ConfigSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigSetRequest | PlainMessage<ConfigSetRequest> | undefined, b: ConfigSetRequest | PlainMessage<ConfigSetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigSetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigSetResponse
 */
export class ConfigSetResponse extends Message<ConfigSetResponse> {
  constructor(data?: PartialMessage<ConfigSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSetResponse {
    return new ConfigSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigSetResponse | PlainMessage<ConfigSetResponse> | undefined, b: ConfigSetResponse | PlainMessage<ConfigSetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigSetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigUnsetRequest
 */
export class ConfigUnsetRequest extends Message<ConfigUnsetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.ConfigProvider provider = 1;
   */
  provider?: ConfigProvider;

  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<ConfigUnsetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigUnsetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(ConfigProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigUnsetRequest {
    return new ConfigUnsetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigUnsetRequest | PlainMessage<ConfigUnsetRequest> | undefined, b: ConfigUnsetRequest | PlainMessage<ConfigUnsetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigUnsetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ConfigUnsetResponse
 */
export class ConfigUnsetResponse extends Message<ConfigUnsetResponse> {
  constructor(data?: PartialMessage<ConfigUnsetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ConfigUnsetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigUnsetResponse {
    return new ConfigUnsetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigUnsetResponse | PlainMessage<ConfigUnsetResponse> | undefined, b: ConfigUnsetResponse | PlainMessage<ConfigUnsetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigUnsetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretsListRequest
 */
export class SecretsListRequest extends Message<SecretsListRequest> {
  /**
   * @generated from field: optional string module = 1;
   */
  module?: string;

  /**
   * @generated from field: optional bool include_values = 2;
   */
  includeValues?: boolean;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.SecretProvider provider = 3;
   */
  provider?: SecretProvider;

  constructor(data?: PartialMessage<SecretsListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretsListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "include_values", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListRequest {
    return new SecretsListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListRequest | PlainMessage<SecretsListRequest> | undefined, b: SecretsListRequest | PlainMessage<SecretsListRequest> | undefined): boolean {
    return proto3.util.equals(SecretsListRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretsListResponse
 */
export class SecretsListResponse extends Message<SecretsListResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.SecretsListResponse.Secret secrets = 1;
   */
  secrets: SecretsListResponse_Secret[] = [];

  constructor(data?: PartialMessage<SecretsListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretsListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secrets", kind: "message", T: SecretsListResponse_Secret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListResponse {
    return new SecretsListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListResponse | PlainMessage<SecretsListResponse> | undefined, b: SecretsListResponse | PlainMessage<SecretsListResponse> | undefined): boolean {
    return proto3.util.equals(SecretsListResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretsListResponse.Secret
 */
export class SecretsListResponse_Secret extends Message<SecretsListResponse_Secret> {
  /**
   * @generated from field: string ref_path = 1;
   */
  refPath = "";

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: Uint8Array;

  constructor(data?: PartialMessage<SecretsListResponse_Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretsListResponse.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretsListResponse_Secret {
    return new SecretsListResponse_Secret().fromJsonString(jsonString, options);
  }

  static equals(a: SecretsListResponse_Secret | PlainMessage<SecretsListResponse_Secret> | undefined, b: SecretsListResponse_Secret | PlainMessage<SecretsListResponse_Secret> | undefined): boolean {
    return proto3.util.equals(SecretsListResponse_Secret, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretGetRequest
 */
export class SecretGetRequest extends Message<SecretGetRequest> {
  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 1;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<SecretGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretGetRequest {
    return new SecretGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretGetRequest | PlainMessage<SecretGetRequest> | undefined, b: SecretGetRequest | PlainMessage<SecretGetRequest> | undefined): boolean {
    return proto3.util.equals(SecretGetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretGetResponse
 */
export class SecretGetResponse extends Message<SecretGetResponse> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SecretGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretGetResponse {
    return new SecretGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretGetResponse | PlainMessage<SecretGetResponse> | undefined, b: SecretGetResponse | PlainMessage<SecretGetResponse> | undefined): boolean {
    return proto3.util.equals(SecretGetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretSetRequest
 */
export class SecretSetRequest extends Message<SecretSetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  /**
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<SecretSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretSetRequest {
    return new SecretSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretSetRequest | PlainMessage<SecretSetRequest> | undefined, b: SecretSetRequest | PlainMessage<SecretSetRequest> | undefined): boolean {
    return proto3.util.equals(SecretSetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretSetResponse
 */
export class SecretSetResponse extends Message<SecretSetResponse> {
  constructor(data?: PartialMessage<SecretSetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretSetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretSetResponse {
    return new SecretSetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretSetResponse | PlainMessage<SecretSetResponse> | undefined, b: SecretSetResponse | PlainMessage<SecretSetResponse> | undefined): boolean {
    return proto3.util.equals(SecretSetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretUnsetRequest
 */
export class SecretUnsetRequest extends Message<SecretUnsetRequest> {
  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.SecretProvider provider = 1;
   */
  provider?: SecretProvider;

  /**
   * @generated from field: xyz.block.ftl.admin.v1.ConfigRef ref = 2;
   */
  ref?: ConfigRef;

  constructor(data?: PartialMessage<SecretUnsetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretUnsetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(SecretProvider), opt: true },
    { no: 2, name: "ref", kind: "message", T: ConfigRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretUnsetRequest {
    return new SecretUnsetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SecretUnsetRequest | PlainMessage<SecretUnsetRequest> | undefined, b: SecretUnsetRequest | PlainMessage<SecretUnsetRequest> | undefined): boolean {
    return proto3.util.equals(SecretUnsetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.SecretUnsetResponse
 */
export class SecretUnsetResponse extends Message<SecretUnsetResponse> {
  constructor(data?: PartialMessage<SecretUnsetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.SecretUnsetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecretUnsetResponse {
    return new SecretUnsetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SecretUnsetResponse | PlainMessage<SecretUnsetResponse> | undefined, b: SecretUnsetResponse | PlainMessage<SecretUnsetResponse> | undefined): boolean {
    return proto3.util.equals(SecretUnsetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.MapConfigsForModuleRequest
 */
export class MapConfigsForModuleRequest extends Message<MapConfigsForModuleRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  constructor(data?: PartialMessage<MapConfigsForModuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.MapConfigsForModuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapConfigsForModuleRequest {
    return new MapConfigsForModuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapConfigsForModuleRequest {
    return new MapConfigsForModuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapConfigsForModuleRequest {
    return new MapConfigsForModuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MapConfigsForModuleRequest | PlainMessage<MapConfigsForModuleRequest> | undefined, b: MapConfigsForModuleRequest | PlainMessage<MapConfigsForModuleRequest> | undefined): boolean {
    return proto3.util.equals(MapConfigsForModuleRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.MapConfigsForModuleResponse
 */
export class MapConfigsForModuleResponse extends Message<MapConfigsForModuleResponse> {
  /**
   * @generated from field: map<string, bytes> values = 1;
   */
  values: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<MapConfigsForModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.MapConfigsForModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapConfigsForModuleResponse {
    return new MapConfigsForModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapConfigsForModuleResponse {
    return new MapConfigsForModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapConfigsForModuleResponse {
    return new MapConfigsForModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MapConfigsForModuleResponse | PlainMessage<MapConfigsForModuleResponse> | undefined, b: MapConfigsForModuleResponse | PlainMessage<MapConfigsForModuleResponse> | undefined): boolean {
    return proto3.util.equals(MapConfigsForModuleResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.MapSecretsForModuleRequest
 */
export class MapSecretsForModuleRequest extends Message<MapSecretsForModuleRequest> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  constructor(data?: PartialMessage<MapSecretsForModuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.MapSecretsForModuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapSecretsForModuleRequest {
    return new MapSecretsForModuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapSecretsForModuleRequest {
    return new MapSecretsForModuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapSecretsForModuleRequest {
    return new MapSecretsForModuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MapSecretsForModuleRequest | PlainMessage<MapSecretsForModuleRequest> | undefined, b: MapSecretsForModuleRequest | PlainMessage<MapSecretsForModuleRequest> | undefined): boolean {
    return proto3.util.equals(MapSecretsForModuleRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.MapSecretsForModuleResponse
 */
export class MapSecretsForModuleResponse extends Message<MapSecretsForModuleResponse> {
  /**
   * @generated from field: map<string, bytes> values = 1;
   */
  values: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<MapSecretsForModuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.MapSecretsForModuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapSecretsForModuleResponse {
    return new MapSecretsForModuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapSecretsForModuleResponse {
    return new MapSecretsForModuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapSecretsForModuleResponse {
    return new MapSecretsForModuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MapSecretsForModuleResponse | PlainMessage<MapSecretsForModuleResponse> | undefined, b: MapSecretsForModuleResponse | PlainMessage<MapSecretsForModuleResponse> | undefined): boolean {
    return proto3.util.equals(MapSecretsForModuleResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ResetSubscriptionRequest
 */
export class ResetSubscriptionRequest extends Message<ResetSubscriptionRequest> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Ref subscription = 1;
   */
  subscription?: Ref;

  /**
   * @generated from field: xyz.block.ftl.admin.v1.SubscriptionOffset offset = 2;
   */
  offset = SubscriptionOffset.UNSPECIFIED;

  constructor(data?: PartialMessage<ResetSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ResetSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: Ref },
    { no: 2, name: "offset", kind: "enum", T: proto3.getEnumType(SubscriptionOffset) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetSubscriptionRequest {
    return new ResetSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetSubscriptionRequest | PlainMessage<ResetSubscriptionRequest> | undefined, b: ResetSubscriptionRequest | PlainMessage<ResetSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(ResetSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ResetSubscriptionResponse
 */
export class ResetSubscriptionResponse extends Message<ResetSubscriptionResponse> {
  constructor(data?: PartialMessage<ResetSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ResetSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetSubscriptionResponse {
    return new ResetSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetSubscriptionResponse | PlainMessage<ResetSubscriptionResponse> | undefined, b: ResetSubscriptionResponse | PlainMessage<ResetSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(ResetSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.RealmChange
 */
export class RealmChange extends Message<RealmChange> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The modules to add or update.
   *
   * @generated from field: repeated xyz.block.ftl.schema.v1.Module modules = 2;
   */
  modules: Module[] = [];

  /**
   * The deployments to remove.
   *
   * @generated from field: repeated string to_remove = 3;
   */
  toRemove: string[] = [];

  /**
   * Whether this is an external realm.
   *
   * @generated from field: bool external = 4;
   */
  external = false;

  constructor(data?: PartialMessage<RealmChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.RealmChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "modules", kind: "message", T: Module, repeated: true },
    { no: 3, name: "to_remove", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "external", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RealmChange {
    return new RealmChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RealmChange {
    return new RealmChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RealmChange {
    return new RealmChange().fromJsonString(jsonString, options);
  }

  static equals(a: RealmChange | PlainMessage<RealmChange> | undefined, b: RealmChange | PlainMessage<RealmChange> | undefined): boolean {
    return proto3.util.equals(RealmChange, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ApplyChangesetRequest
 */
export class ApplyChangesetRequest extends Message<ApplyChangesetRequest> {
  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.RealmChange realm_changes = 1;
   */
  realmChanges: RealmChange[] = [];

  constructor(data?: PartialMessage<ApplyChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ApplyChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "realm_changes", kind: "message", T: RealmChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyChangesetRequest {
    return new ApplyChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyChangesetRequest {
    return new ApplyChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyChangesetRequest {
    return new ApplyChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyChangesetRequest | PlainMessage<ApplyChangesetRequest> | undefined, b: ApplyChangesetRequest | PlainMessage<ApplyChangesetRequest> | undefined): boolean {
    return proto3.util.equals(ApplyChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ApplyChangesetResponse
 */
export class ApplyChangesetResponse extends Message<ApplyChangesetResponse> {
  /**
   * The changeset, the result can be determined by checking the state
   *
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 2;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<ApplyChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ApplyChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyChangesetResponse {
    return new ApplyChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyChangesetResponse {
    return new ApplyChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyChangesetResponse {
    return new ApplyChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyChangesetResponse | PlainMessage<ApplyChangesetResponse> | undefined, b: ApplyChangesetResponse | PlainMessage<ApplyChangesetResponse> | undefined): boolean {
    return proto3.util.equals(ApplyChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.DeployImagesRequest
 */
export class DeployImagesRequest extends Message<DeployImagesRequest> {
  /**
   * @generated from field: repeated string image = 1;
   */
  image: string[] = [];

  /**
   * Allow insecure images, e.g. from localhost. This does not propagate to the underlying cluster, if the cluster does not allow insecure images this will fail.
   *
   * @generated from field: bool allow_insecure = 2;
   */
  allowInsecure = false;

  constructor(data?: PartialMessage<DeployImagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.DeployImagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "allow_insecure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployImagesRequest {
    return new DeployImagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployImagesRequest {
    return new DeployImagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployImagesRequest {
    return new DeployImagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployImagesRequest | PlainMessage<DeployImagesRequest> | undefined, b: DeployImagesRequest | PlainMessage<DeployImagesRequest> | undefined): boolean {
    return proto3.util.equals(DeployImagesRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.DeployImagesResponse
 */
export class DeployImagesResponse extends Message<DeployImagesResponse> {
  /**
   * The changeset, the result can be determined by checking the state
   *
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<DeployImagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.DeployImagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployImagesResponse {
    return new DeployImagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployImagesResponse {
    return new DeployImagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployImagesResponse {
    return new DeployImagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployImagesResponse | PlainMessage<DeployImagesResponse> | undefined, b: DeployImagesResponse | PlainMessage<DeployImagesResponse> | undefined): boolean {
    return proto3.util.equals(DeployImagesResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.UpdateDeploymentRuntimeRequest
 */
export class UpdateDeploymentRuntimeRequest extends Message<UpdateDeploymentRuntimeRequest> {
  /**
   * The modules to add or update.
   *
   * @generated from field: xyz.block.ftl.schema.v1.RuntimeElement element = 1;
   */
  element?: RuntimeElement;

  constructor(data?: PartialMessage<UpdateDeploymentRuntimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.UpdateDeploymentRuntimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "element", kind: "message", T: RuntimeElement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined, b: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.UpdateDeploymentRuntimeResponse
 */
export class UpdateDeploymentRuntimeResponse extends Message<UpdateDeploymentRuntimeResponse> {
  constructor(data?: PartialMessage<UpdateDeploymentRuntimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.UpdateDeploymentRuntimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined, b: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetArtefactDiffsRequest
 */
export class GetArtefactDiffsRequest extends Message<GetArtefactDiffsRequest> {
  /**
   * @generated from field: repeated string client_digests = 1;
   */
  clientDigests: string[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetArtefactDiffsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsRequest {
    return new GetArtefactDiffsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined, b: GetArtefactDiffsRequest | PlainMessage<GetArtefactDiffsRequest> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetArtefactDiffsResponse
 */
export class GetArtefactDiffsResponse extends Message<GetArtefactDiffsResponse> {
  /**
   * @generated from field: repeated string missing_digests = 1;
   */
  missingDigests: string[] = [];

  /**
   * Artefacts that the client already has, and their path+executable status.
   *
   * @generated from field: repeated xyz.block.ftl.admin.v1.DeploymentArtefact client_artefacts = 2;
   */
  clientArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetArtefactDiffsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetArtefactDiffsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "missing_digests", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "client_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtefactDiffsResponse {
    return new GetArtefactDiffsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined, b: GetArtefactDiffsResponse | PlainMessage<GetArtefactDiffsResponse> | undefined): boolean {
    return proto3.util.equals(GetArtefactDiffsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetDeploymentArtefactsRequest
 */
export class GetDeploymentArtefactsRequest extends Message<GetDeploymentArtefactsRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.DeploymentArtefact have_artefacts = 2;
   */
  haveArtefacts: DeploymentArtefact[] = [];

  constructor(data?: PartialMessage<GetDeploymentArtefactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetDeploymentArtefactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "have_artefacts", kind: "message", T: DeploymentArtefact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsRequest {
    return new GetDeploymentArtefactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined, b: GetDeploymentArtefactsRequest | PlainMessage<GetDeploymentArtefactsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetDeploymentArtefactsResponse
 */
export class GetDeploymentArtefactsResponse extends Message<GetDeploymentArtefactsResponse> {
  /**
   * @generated from field: xyz.block.ftl.admin.v1.DeploymentArtefact artefact = 1;
   */
  artefact?: DeploymentArtefact;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<GetDeploymentArtefactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetDeploymentArtefactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artefact", kind: "message", T: DeploymentArtefact },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentArtefactsResponse {
    return new GetDeploymentArtefactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined, b: GetDeploymentArtefactsResponse | PlainMessage<GetDeploymentArtefactsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentArtefactsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.DeploymentArtefact
 */
export class DeploymentArtefact extends Message<DeploymentArtefact> {
  /**
   * @generated from field: bytes digest = 1;
   */
  digest = new Uint8Array(0);

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: bool executable = 3;
   */
  executable = false;

  constructor(data?: PartialMessage<DeploymentArtefact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.DeploymentArtefact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "executable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeploymentArtefact {
    return new DeploymentArtefact().fromJsonString(jsonString, options);
  }

  static equals(a: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined, b: DeploymentArtefact | PlainMessage<DeploymentArtefact> | undefined): boolean {
    return proto3.util.equals(DeploymentArtefact, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.UploadArtefactRequest
 */
export class UploadArtefactRequest extends Message<UploadArtefactRequest> {
  /**
   * Digest of the complete artefact.
   *
   * @generated from field: bytes digest = 1;
   */
  digest = new Uint8Array(0);

  /**
   * Size of the complete artefact.
   *
   * @generated from field: int64 size = 2;
   */
  size = protoInt64.zero;

  /**
   * Chunk of the artefact.
   *
   * @generated from field: bytes chunk = 3;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadArtefactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.UploadArtefactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactRequest {
    return new UploadArtefactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined, b: UploadArtefactRequest | PlainMessage<UploadArtefactRequest> | undefined): boolean {
    return proto3.util.equals(UploadArtefactRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.UploadArtefactResponse
 */
export class UploadArtefactResponse extends Message<UploadArtefactResponse> {
  constructor(data?: PartialMessage<UploadArtefactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.UploadArtefactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadArtefactResponse {
    return new UploadArtefactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined, b: UploadArtefactResponse | PlainMessage<UploadArtefactResponse> | undefined): boolean {
    return proto3.util.equals(UploadArtefactResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ClusterInfoRequest
 */
export class ClusterInfoRequest extends Message<ClusterInfoRequest> {
  constructor(data?: PartialMessage<ClusterInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ClusterInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterInfoRequest {
    return new ClusterInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterInfoRequest {
    return new ClusterInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterInfoRequest {
    return new ClusterInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterInfoRequest | PlainMessage<ClusterInfoRequest> | undefined, b: ClusterInfoRequest | PlainMessage<ClusterInfoRequest> | undefined): boolean {
    return proto3.util.equals(ClusterInfoRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.ClusterInfoResponse
 */
export class ClusterInfoResponse extends Message<ClusterInfoResponse> {
  /**
   * @generated from field: string os = 1;
   */
  os = "";

  /**
   * @generated from field: string arch = 2;
   */
  arch = "";

  constructor(data?: PartialMessage<ClusterInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.ClusterInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterInfoResponse {
    return new ClusterInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterInfoResponse {
    return new ClusterInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterInfoResponse {
    return new ClusterInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterInfoResponse | PlainMessage<ClusterInfoResponse> | undefined, b: ClusterInfoResponse | PlainMessage<ClusterInfoResponse> | undefined): boolean {
    return proto3.util.equals(ClusterInfoResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.StreamLogsRequest
 */
export class StreamLogsRequest extends Message<StreamLogsRequest> {
  /**
   * @generated from field: xyz.block.ftl.timeline.v1.TimelineQuery query = 1;
   */
  query?: TimelineQuery;

  constructor(data?: PartialMessage<StreamLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.StreamLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: TimelineQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamLogsRequest {
    return new StreamLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamLogsRequest | PlainMessage<StreamLogsRequest> | undefined, b: StreamLogsRequest | PlainMessage<StreamLogsRequest> | undefined): boolean {
    return proto3.util.equals(StreamLogsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.StreamLogsResponse
 */
export class StreamLogsResponse extends Message<StreamLogsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.timeline.v1.LogEvent logs = 1;
   */
  logs: LogEvent[] = [];

  constructor(data?: PartialMessage<StreamLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.StreamLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: LogEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamLogsResponse {
    return new StreamLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamLogsResponse | PlainMessage<StreamLogsResponse> | undefined, b: StreamLogsResponse | PlainMessage<StreamLogsResponse> | undefined): boolean {
    return proto3.util.equals(StreamLogsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetTopicInfoRequest
 */
export class GetTopicInfoRequest extends Message<GetTopicInfoRequest> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Ref topic = 1;
   */
  topic?: Ref;

  constructor(data?: PartialMessage<GetTopicInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetTopicInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "message", T: Ref },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicInfoRequest {
    return new GetTopicInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicInfoRequest {
    return new GetTopicInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicInfoRequest {
    return new GetTopicInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicInfoRequest | PlainMessage<GetTopicInfoRequest> | undefined, b: GetTopicInfoRequest | PlainMessage<GetTopicInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetTopicInfoRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.PubSubEventMetadata
 */
export class PubSubEventMetadata extends Message<PubSubEventMetadata> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: string request_key = 3;
   */
  requestKey = "";

  constructor(data?: PartialMessage<PubSubEventMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.PubSubEventMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "request_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubSubEventMetadata {
    return new PubSubEventMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubSubEventMetadata {
    return new PubSubEventMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubSubEventMetadata {
    return new PubSubEventMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PubSubEventMetadata | PlainMessage<PubSubEventMetadata> | undefined, b: PubSubEventMetadata | PlainMessage<PubSubEventMetadata> | undefined): boolean {
    return proto3.util.equals(PubSubEventMetadata, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetTopicInfoResponse
 */
export class GetTopicInfoResponse extends Message<GetTopicInfoResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.GetTopicInfoResponse.PartitionInfo partitions = 1;
   */
  partitions: GetTopicInfoResponse_PartitionInfo[] = [];

  constructor(data?: PartialMessage<GetTopicInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetTopicInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partitions", kind: "message", T: GetTopicInfoResponse_PartitionInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicInfoResponse {
    return new GetTopicInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicInfoResponse {
    return new GetTopicInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicInfoResponse {
    return new GetTopicInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicInfoResponse | PlainMessage<GetTopicInfoResponse> | undefined, b: GetTopicInfoResponse | PlainMessage<GetTopicInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetTopicInfoResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetTopicInfoResponse.PartitionInfo
 */
export class GetTopicInfoResponse_PartitionInfo extends Message<GetTopicInfoResponse_PartitionInfo> {
  /**
   * @generated from field: int32 partition = 1;
   */
  partition = 0;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.PubSubEventMetadata head = 2;
   */
  head?: PubSubEventMetadata;

  constructor(data?: PartialMessage<GetTopicInfoResponse_PartitionInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetTopicInfoResponse.PartitionInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partition", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "head", kind: "message", T: PubSubEventMetadata, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicInfoResponse_PartitionInfo {
    return new GetTopicInfoResponse_PartitionInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicInfoResponse_PartitionInfo {
    return new GetTopicInfoResponse_PartitionInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicInfoResponse_PartitionInfo {
    return new GetTopicInfoResponse_PartitionInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicInfoResponse_PartitionInfo | PlainMessage<GetTopicInfoResponse_PartitionInfo> | undefined, b: GetTopicInfoResponse_PartitionInfo | PlainMessage<GetTopicInfoResponse_PartitionInfo> | undefined): boolean {
    return proto3.util.equals(GetTopicInfoResponse_PartitionInfo, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetSubscriptionInfoRequest
 */
export class GetSubscriptionInfoRequest extends Message<GetSubscriptionInfoRequest> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Ref subscription = 1;
   */
  subscription?: Ref;

  constructor(data?: PartialMessage<GetSubscriptionInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetSubscriptionInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: Ref },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubscriptionInfoRequest {
    return new GetSubscriptionInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubscriptionInfoRequest {
    return new GetSubscriptionInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubscriptionInfoRequest {
    return new GetSubscriptionInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubscriptionInfoRequest | PlainMessage<GetSubscriptionInfoRequest> | undefined, b: GetSubscriptionInfoRequest | PlainMessage<GetSubscriptionInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetSubscriptionInfoRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetSubscriptionInfoResponse
 */
export class GetSubscriptionInfoResponse extends Message<GetSubscriptionInfoResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.admin.v1.GetSubscriptionInfoResponse.PartitionInfo partitions = 1;
   */
  partitions: GetSubscriptionInfoResponse_PartitionInfo[] = [];

  constructor(data?: PartialMessage<GetSubscriptionInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetSubscriptionInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partitions", kind: "message", T: GetSubscriptionInfoResponse_PartitionInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubscriptionInfoResponse {
    return new GetSubscriptionInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubscriptionInfoResponse {
    return new GetSubscriptionInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubscriptionInfoResponse {
    return new GetSubscriptionInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubscriptionInfoResponse | PlainMessage<GetSubscriptionInfoResponse> | undefined, b: GetSubscriptionInfoResponse | PlainMessage<GetSubscriptionInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetSubscriptionInfoResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.admin.v1.GetSubscriptionInfoResponse.PartitionInfo
 */
export class GetSubscriptionInfoResponse_PartitionInfo extends Message<GetSubscriptionInfoResponse_PartitionInfo> {
  /**
   * @generated from field: int32 partition = 1;
   */
  partition = 0;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.PubSubEventMetadata consumed = 2;
   */
  consumed?: PubSubEventMetadata;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.PubSubEventMetadata next = 3;
   */
  next?: PubSubEventMetadata;

  /**
   * @generated from field: optional xyz.block.ftl.admin.v1.PubSubEventMetadata head = 4;
   */
  head?: PubSubEventMetadata;

  constructor(data?: PartialMessage<GetSubscriptionInfoResponse_PartitionInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.admin.v1.GetSubscriptionInfoResponse.PartitionInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partition", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "consumed", kind: "message", T: PubSubEventMetadata, opt: true },
    { no: 3, name: "next", kind: "message", T: PubSubEventMetadata, opt: true },
    { no: 4, name: "head", kind: "message", T: PubSubEventMetadata, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubscriptionInfoResponse_PartitionInfo {
    return new GetSubscriptionInfoResponse_PartitionInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubscriptionInfoResponse_PartitionInfo {
    return new GetSubscriptionInfoResponse_PartitionInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubscriptionInfoResponse_PartitionInfo {
    return new GetSubscriptionInfoResponse_PartitionInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubscriptionInfoResponse_PartitionInfo | PlainMessage<GetSubscriptionInfoResponse_PartitionInfo> | undefined, b: GetSubscriptionInfoResponse_PartitionInfo | PlainMessage<GetSubscriptionInfoResponse_PartitionInfo> | undefined): boolean {
    return proto3.util.equals(GetSubscriptionInfoResponse_PartitionInfo, a, b);
  }
}

