// Code generated by go2proto. DO NOT EDIT.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/cron/v1/cron.proto (package xyz.block.ftl.cron.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * CronState is the state of scheduled cron jobs
 *
 * @generated from message xyz.block.ftl.cron.v1.CronState
 */
export class CronState extends Message<CronState> {
  /**
   * @generated from field: map<string, google.protobuf.Timestamp> last_executions = 1;
   */
  lastExecutions: { [key: string]: Timestamp } = {};

  /**
   * @generated from field: map<string, google.protobuf.Timestamp> next_executions = 2;
   */
  nextExecutions: { [key: string]: Timestamp } = {};

  constructor(data?: PartialMessage<CronState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.cron.v1.CronState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_executions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Timestamp} },
    { no: 2, name: "next_executions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Timestamp} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronState {
    return new CronState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronState {
    return new CronState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronState {
    return new CronState().fromJsonString(jsonString, options);
  }

  static equals(a: CronState | PlainMessage<CronState> | undefined, b: CronState | PlainMessage<CronState> | undefined): boolean {
    return proto3.util.equals(CronState, a, b);
  }
}

