// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/schemaservice.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Changeset, Module, ModuleRuntimeEvent, Schema } from "../schema/v1/schema_pb.js";

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Schema schema = 1;
   */
  schema?: Schema;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Changeset changesets = 2;
   */
  changesets: Changeset[] = [];

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
    { no: 2, name: "changesets", kind: "message", T: Changeset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaRequest
 */
export class PullSchemaRequest extends Message<PullSchemaRequest> {
  constructor(data?: PartialMessage<PullSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined, b: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined): boolean {
    return proto3.util.equals(PullSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse
 */
export class PullSchemaResponse extends Message<PullSchemaResponse> {
  /**
   * @generated from oneof xyz.block.ftl.v1.PullSchemaResponse.event
   */
  event: {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.ChangesetCreated changeset_created = 4;
     */
    value: PullSchemaResponse_ChangesetCreated;
    case: "changesetCreated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.ChangesetFailed changeset_failed = 5;
     */
    value: PullSchemaResponse_ChangesetFailed;
    case: "changesetFailed";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.ChangesetCommited changeset_commited = 6;
     */
    value: PullSchemaResponse_ChangesetCommited;
    case: "changesetCommited";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.DeploymentCreated deployment_created = 7;
     */
    value: PullSchemaResponse_DeploymentCreated;
    case: "deploymentCreated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.DeploymentUpdated deployment_updated = 8;
     */
    value: PullSchemaResponse_DeploymentUpdated;
    case: "deploymentUpdated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.PullSchemaResponse.DeploymentRemoved deployment_removed = 9;
     */
    value: PullSchemaResponse_DeploymentRemoved;
    case: "deploymentRemoved";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * If true there are more schema changes immediately following this one as part of the initial batch.
   * If false this is the last schema change in the initial batch, but others may follow later.
   *
   * @generated from field: bool more = 31634;
   */
  more = false;

  constructor(data?: PartialMessage<PullSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "changeset_created", kind: "message", T: PullSchemaResponse_ChangesetCreated, oneof: "event" },
    { no: 5, name: "changeset_failed", kind: "message", T: PullSchemaResponse_ChangesetFailed, oneof: "event" },
    { no: 6, name: "changeset_commited", kind: "message", T: PullSchemaResponse_ChangesetCommited, oneof: "event" },
    { no: 7, name: "deployment_created", kind: "message", T: PullSchemaResponse_DeploymentCreated, oneof: "event" },
    { no: 8, name: "deployment_updated", kind: "message", T: PullSchemaResponse_DeploymentUpdated, oneof: "event" },
    { no: 9, name: "deployment_removed", kind: "message", T: PullSchemaResponse_DeploymentRemoved, oneof: "event" },
    { no: 31634, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined, b: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse, a, b);
  }
}

/**
 * ChangesetCreated is sent when a new changeset is created.
 * TODO: consider whether to:
 * - include all modules in the message? and don't publish individual DeploymentCreated messages for them
 * - Let deployments be created into a changeset after the changeset is created
 *     - Add a way to indicate how many deployments are expected in the changeset? So listeners can determine if they have the full changeset?
 *
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.ChangesetCreated
 */
export class PullSchemaResponse_ChangesetCreated extends Message<PullSchemaResponse_ChangesetCreated> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<PullSchemaResponse_ChangesetCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.ChangesetCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_ChangesetCreated {
    return new PullSchemaResponse_ChangesetCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetCreated {
    return new PullSchemaResponse_ChangesetCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetCreated {
    return new PullSchemaResponse_ChangesetCreated().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_ChangesetCreated | PlainMessage<PullSchemaResponse_ChangesetCreated> | undefined, b: PullSchemaResponse_ChangesetCreated | PlainMessage<PullSchemaResponse_ChangesetCreated> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_ChangesetCreated, a, b);
  }
}

/**
 * ChangesetFailed is sent when a changeset fails.
 *
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.ChangesetFailed
 */
export class PullSchemaResponse_ChangesetFailed extends Message<PullSchemaResponse_ChangesetFailed> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<PullSchemaResponse_ChangesetFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.ChangesetFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_ChangesetFailed {
    return new PullSchemaResponse_ChangesetFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetFailed {
    return new PullSchemaResponse_ChangesetFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetFailed {
    return new PullSchemaResponse_ChangesetFailed().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_ChangesetFailed | PlainMessage<PullSchemaResponse_ChangesetFailed> | undefined, b: PullSchemaResponse_ChangesetFailed | PlainMessage<PullSchemaResponse_ChangesetFailed> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_ChangesetFailed, a, b);
  }
}

/**
 * ChangesetFailed is sent when a changeset becomes canonical.
 *
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.ChangesetCommited
 */
export class PullSchemaResponse_ChangesetCommited extends Message<PullSchemaResponse_ChangesetCommited> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<PullSchemaResponse_ChangesetCommited>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.ChangesetCommited";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_ChangesetCommited {
    return new PullSchemaResponse_ChangesetCommited().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetCommited {
    return new PullSchemaResponse_ChangesetCommited().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_ChangesetCommited {
    return new PullSchemaResponse_ChangesetCommited().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_ChangesetCommited | PlainMessage<PullSchemaResponse_ChangesetCommited> | undefined, b: PullSchemaResponse_ChangesetCommited | PlainMessage<PullSchemaResponse_ChangesetCommited> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_ChangesetCommited, a, b);
  }
}

/**
 * Deployment created is sent when a deployment is new to the listener but is not part of a changeset.
 *
 * Will not be set for builtin modules.
 * optional string key = 1;
 * string module_name = 2;
 * If present, the deployment is not yet canonical as it is currently part of a changeset.
 * optional string changeset = 3;
 *
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.DeploymentCreated
 */
export class PullSchemaResponse_DeploymentCreated extends Message<PullSchemaResponse_DeploymentCreated> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Module schema = 1;
   */
  schema?: Module;

  constructor(data?: PartialMessage<PullSchemaResponse_DeploymentCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.DeploymentCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_DeploymentCreated {
    return new PullSchemaResponse_DeploymentCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentCreated {
    return new PullSchemaResponse_DeploymentCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentCreated {
    return new PullSchemaResponse_DeploymentCreated().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_DeploymentCreated | PlainMessage<PullSchemaResponse_DeploymentCreated> | undefined, b: PullSchemaResponse_DeploymentCreated | PlainMessage<PullSchemaResponse_DeploymentCreated> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_DeploymentCreated, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.DeploymentUpdated
 */
export class PullSchemaResponse_DeploymentUpdated extends Message<PullSchemaResponse_DeploymentUpdated> {
  /**
   * Will not be set for builtin modules.
   * optional string key = 1;
   * string module_name = 2;
   * If present, the deployment is not yet canonical as it is currently part of a changeset.
   *
   * @generated from field: optional string changeset = 1;
   */
  changeset?: string;

  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Module schema = 2;
   */
  schema?: Module;

  constructor(data?: PartialMessage<PullSchemaResponse_DeploymentUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.DeploymentUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "schema", kind: "message", T: Module, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_DeploymentUpdated {
    return new PullSchemaResponse_DeploymentUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentUpdated {
    return new PullSchemaResponse_DeploymentUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentUpdated {
    return new PullSchemaResponse_DeploymentUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_DeploymentUpdated | PlainMessage<PullSchemaResponse_DeploymentUpdated> | undefined, b: PullSchemaResponse_DeploymentUpdated | PlainMessage<PullSchemaResponse_DeploymentUpdated> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_DeploymentUpdated, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse.DeploymentRemoved
 */
export class PullSchemaResponse_DeploymentRemoved extends Message<PullSchemaResponse_DeploymentRemoved> {
  /**
   * Will not be set for builtin modules.
   *
   * @generated from field: optional string key = 1;
   */
  key?: string;

  /**
   * @generated from field: string module_name = 2;
   */
  moduleName = "";

  /**
   * If this is true then the module was removed as well as the deployment.
   *
   * @generated from field: bool module_removed = 3;
   */
  moduleRemoved = false;

  constructor(data?: PartialMessage<PullSchemaResponse_DeploymentRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse.DeploymentRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_removed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse_DeploymentRemoved {
    return new PullSchemaResponse_DeploymentRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentRemoved {
    return new PullSchemaResponse_DeploymentRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse_DeploymentRemoved {
    return new PullSchemaResponse_DeploymentRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse_DeploymentRemoved | PlainMessage<PullSchemaResponse_DeploymentRemoved> | undefined, b: PullSchemaResponse_DeploymentRemoved | PlainMessage<PullSchemaResponse_DeploymentRemoved> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse_DeploymentRemoved, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeploymentRuntimeRequest
 */
export class UpdateDeploymentRuntimeRequest extends Message<UpdateDeploymentRuntimeRequest> {
  /**
   * @generated from field: string deployment = 1;
   */
  deployment = "";

  /**
   * @generated from field: optional string changeset = 2;
   */
  changeset?: string;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.ModuleRuntimeEvent event = 3;
   */
  event?: ModuleRuntimeEvent;

  constructor(data?: PartialMessage<UpdateDeploymentRuntimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeploymentRuntimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "event", kind: "message", T: ModuleRuntimeEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined, b: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeploymentRuntimeResponse
 */
export class UpdateDeploymentRuntimeResponse extends Message<UpdateDeploymentRuntimeResponse> {
  constructor(data?: PartialMessage<UpdateDeploymentRuntimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeploymentRuntimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined, b: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateChangesetRequest
 */
export class CreateChangesetRequest extends Message<CreateChangesetRequest> {
  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Module modules = 1;
   */
  modules: Module[] = [];

  constructor(data?: PartialMessage<CreateChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangesetRequest | PlainMessage<CreateChangesetRequest> | undefined, b: CreateChangesetRequest | PlainMessage<CreateChangesetRequest> | undefined): boolean {
    return proto3.util.equals(CreateChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateChangesetResponse
 */
export class CreateChangesetResponse extends Message<CreateChangesetResponse> {
  /**
   * The changeset key of the newly created changeset.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<CreateChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangesetResponse | PlainMessage<CreateChangesetResponse> | undefined, b: CreateChangesetResponse | PlainMessage<CreateChangesetResponse> | undefined): boolean {
    return proto3.util.equals(CreateChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CommitChangesetRequest
 */
export class CommitChangesetRequest extends Message<CommitChangesetRequest> {
  /**
   * The changeset key to commit.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<CommitChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CommitChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CommitChangesetRequest | PlainMessage<CommitChangesetRequest> | undefined, b: CommitChangesetRequest | PlainMessage<CommitChangesetRequest> | undefined): boolean {
    return proto3.util.equals(CommitChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CommitChangesetResponse
 */
export class CommitChangesetResponse extends Message<CommitChangesetResponse> {
  constructor(data?: PartialMessage<CommitChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CommitChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommitChangesetResponse | PlainMessage<CommitChangesetResponse> | undefined, b: CommitChangesetResponse | PlainMessage<CommitChangesetResponse> | undefined): boolean {
    return proto3.util.equals(CommitChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FailChangesetRequest
 */
export class FailChangesetRequest extends Message<FailChangesetRequest> {
  /**
   * The changeset key to fail.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<FailChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FailChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FailChangesetRequest | PlainMessage<FailChangesetRequest> | undefined, b: FailChangesetRequest | PlainMessage<FailChangesetRequest> | undefined): boolean {
    return proto3.util.equals(FailChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FailChangesetResponse
 */
export class FailChangesetResponse extends Message<FailChangesetResponse> {
  constructor(data?: PartialMessage<FailChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FailChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FailChangesetResponse | PlainMessage<FailChangesetResponse> | undefined, b: FailChangesetResponse | PlainMessage<FailChangesetResponse> | undefined): boolean {
    return proto3.util.equals(FailChangesetResponse, a, b);
  }
}

