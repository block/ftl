// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/schemaservice.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Changeset, Module, RuntimeElement, Schema } from "../schema/v1/schema_pb.js";

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Schema schema = 1;
   */
  schema?: Schema;

  /**
   * @generated from field: repeated xyz.block.ftl.schema.v1.Changeset changesets = 2;
   */
  changesets: Changeset[] = [];

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema },
    { no: 2, name: "changesets", kind: "message", T: Changeset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

/**
 * ChangesetCreated is sent when a new changeset is created.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetCreatedNotification
 */
export class ChangesetCreatedNotification extends Message<ChangesetCreatedNotification> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<ChangesetCreatedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetCreatedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetCreatedNotification {
    return new ChangesetCreatedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetCreatedNotification {
    return new ChangesetCreatedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetCreatedNotification {
    return new ChangesetCreatedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetCreatedNotification | PlainMessage<ChangesetCreatedNotification> | undefined, b: ChangesetCreatedNotification | PlainMessage<ChangesetCreatedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetCreatedNotification, a, b);
  }
}

/**
 * ChangesetPreparedNotification is sent when a changeset is provisioned and ready to become active
 *
 * @generated from message xyz.block.ftl.v1.ChangesetPreparedNotification
 */
export class ChangesetPreparedNotification extends Message<ChangesetPreparedNotification> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<ChangesetPreparedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetPreparedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetPreparedNotification {
    return new ChangesetPreparedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetPreparedNotification {
    return new ChangesetPreparedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetPreparedNotification {
    return new ChangesetPreparedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetPreparedNotification | PlainMessage<ChangesetPreparedNotification> | undefined, b: ChangesetPreparedNotification | PlainMessage<ChangesetPreparedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetPreparedNotification, a, b);
  }
}

/**
 * ChangesetFailed is sent when a changeset becomes canonical.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetCommittedNotification
 */
export class ChangesetCommittedNotification extends Message<ChangesetCommittedNotification> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<ChangesetCommittedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetCommittedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetCommittedNotification {
    return new ChangesetCommittedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetCommittedNotification {
    return new ChangesetCommittedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetCommittedNotification {
    return new ChangesetCommittedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetCommittedNotification | PlainMessage<ChangesetCommittedNotification> | undefined, b: ChangesetCommittedNotification | PlainMessage<ChangesetCommittedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetCommittedNotification, a, b);
  }
}

/**
 * ChangesetRollingBack is sent when a changeset is being rolled back without committing.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetRollingBackNotification
 */
export class ChangesetRollingBackNotification extends Message<ChangesetRollingBackNotification> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<ChangesetRollingBackNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetRollingBackNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetRollingBackNotification {
    return new ChangesetRollingBackNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetRollingBackNotification {
    return new ChangesetRollingBackNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetRollingBackNotification {
    return new ChangesetRollingBackNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetRollingBackNotification | PlainMessage<ChangesetRollingBackNotification> | undefined, b: ChangesetRollingBackNotification | PlainMessage<ChangesetRollingBackNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetRollingBackNotification, a, b);
  }
}

/**
 * ChangesetFailed is sent when a changeset fails.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetFailedNotification
 */
export class ChangesetFailedNotification extends Message<ChangesetFailedNotification> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<ChangesetFailedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetFailedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetFailedNotification {
    return new ChangesetFailedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetFailedNotification {
    return new ChangesetFailedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetFailedNotification {
    return new ChangesetFailedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetFailedNotification | PlainMessage<ChangesetFailedNotification> | undefined, b: ChangesetFailedNotification | PlainMessage<ChangesetFailedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetFailedNotification, a, b);
  }
}

/**
 * ChangesetDrained is sent when a changeset has been drained.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetDrainedNotification
 */
export class ChangesetDrainedNotification extends Message<ChangesetDrainedNotification> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<ChangesetDrainedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetDrainedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetDrainedNotification {
    return new ChangesetDrainedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetDrainedNotification {
    return new ChangesetDrainedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetDrainedNotification {
    return new ChangesetDrainedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetDrainedNotification | PlainMessage<ChangesetDrainedNotification> | undefined, b: ChangesetDrainedNotification | PlainMessage<ChangesetDrainedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetDrainedNotification, a, b);
  }
}

/**
 * ChangesetFinalized is sent when a changeset has been finalized.
 *
 * @generated from message xyz.block.ftl.v1.ChangesetFinalizedNotification
 */
export class ChangesetFinalizedNotification extends Message<ChangesetFinalizedNotification> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<ChangesetFinalizedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.ChangesetFinalizedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangesetFinalizedNotification {
    return new ChangesetFinalizedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangesetFinalizedNotification {
    return new ChangesetFinalizedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangesetFinalizedNotification {
    return new ChangesetFinalizedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: ChangesetFinalizedNotification | PlainMessage<ChangesetFinalizedNotification> | undefined, b: ChangesetFinalizedNotification | PlainMessage<ChangesetFinalizedNotification> | undefined): boolean {
    return proto3.util.equals(ChangesetFinalizedNotification, a, b);
  }
}

/**
 * InitialSchemaNotification is used to notify the initial schema state
 *
 * @generated from message xyz.block.ftl.v1.InitialSchemaNotification
 */
export class InitialSchemaNotification extends Message<InitialSchemaNotification> {
  /**
   * @generated from field: optional xyz.block.ftl.schema.v1.Schema schema = 1;
   */
  schema?: Schema;

  constructor(data?: PartialMessage<InitialSchemaNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.InitialSchemaNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Schema, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitialSchemaNotification {
    return new InitialSchemaNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitialSchemaNotification {
    return new InitialSchemaNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitialSchemaNotification {
    return new InitialSchemaNotification().fromJsonString(jsonString, options);
  }

  static equals(a: InitialSchemaNotification | PlainMessage<InitialSchemaNotification> | undefined, b: InitialSchemaNotification | PlainMessage<InitialSchemaNotification> | undefined): boolean {
    return proto3.util.equals(InitialSchemaNotification, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.RuntimeElementUpdatedNotification
 */
export class RuntimeElementUpdatedNotification extends Message<RuntimeElementUpdatedNotification> {
  /**
   * @generated from field: optional string changeset = 1;
   */
  changeset?: string;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.RuntimeElement runtime = 2;
   */
  runtime?: RuntimeElement;

  constructor(data?: PartialMessage<RuntimeElementUpdatedNotification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.RuntimeElementUpdatedNotification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "runtime", kind: "message", T: RuntimeElement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeElementUpdatedNotification {
    return new RuntimeElementUpdatedNotification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeElementUpdatedNotification {
    return new RuntimeElementUpdatedNotification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeElementUpdatedNotification {
    return new RuntimeElementUpdatedNotification().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeElementUpdatedNotification | PlainMessage<RuntimeElementUpdatedNotification> | undefined, b: RuntimeElementUpdatedNotification | PlainMessage<RuntimeElementUpdatedNotification> | undefined): boolean {
    return proto3.util.equals(RuntimeElementUpdatedNotification, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaRequest
 */
export class PullSchemaRequest extends Message<PullSchemaRequest> {
  /**
   * @generated from field: string subscription_id = 1;
   */
  subscriptionId = "";

  constructor(data?: PartialMessage<PullSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaRequest {
    return new PullSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined, b: PullSchemaRequest | PlainMessage<PullSchemaRequest> | undefined): boolean {
    return proto3.util.equals(PullSchemaRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PullSchemaResponse
 */
export class PullSchemaResponse extends Message<PullSchemaResponse> {
  /**
   * @generated from oneof xyz.block.ftl.v1.PullSchemaResponse.event
   */
  event: {
    /**
     * @generated from field: xyz.block.ftl.v1.InitialSchemaNotification initial_schema = 1;
     */
    value: InitialSchemaNotification;
    case: "initialSchema";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetCreatedNotification changeset_created = 2;
     */
    value: ChangesetCreatedNotification;
    case: "changesetCreated";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetPreparedNotification changeset_prepared = 3;
     */
    value: ChangesetPreparedNotification;
    case: "changesetPrepared";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetCommittedNotification changeset_committed = 4;
     */
    value: ChangesetCommittedNotification;
    case: "changesetCommitted";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetRollingBackNotification changeset_rolling_back = 5;
     */
    value: ChangesetRollingBackNotification;
    case: "changesetRollingBack";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetFailedNotification changeset_failed = 6;
     */
    value: ChangesetFailedNotification;
    case: "changesetFailed";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetDrainedNotification changeset_drained = 7;
     */
    value: ChangesetDrainedNotification;
    case: "changesetDrained";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.ChangesetFinalizedNotification changeset_finalized = 8;
     */
    value: ChangesetFinalizedNotification;
    case: "changesetFinalized";
  } | {
    /**
     * @generated from field: xyz.block.ftl.v1.RuntimeElementUpdatedNotification runtime_updated = 9;
     */
    value: RuntimeElementUpdatedNotification;
    case: "runtimeUpdated";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PullSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PullSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initial_schema", kind: "message", T: InitialSchemaNotification, oneof: "event" },
    { no: 2, name: "changeset_created", kind: "message", T: ChangesetCreatedNotification, oneof: "event" },
    { no: 3, name: "changeset_prepared", kind: "message", T: ChangesetPreparedNotification, oneof: "event" },
    { no: 4, name: "changeset_committed", kind: "message", T: ChangesetCommittedNotification, oneof: "event" },
    { no: 5, name: "changeset_rolling_back", kind: "message", T: ChangesetRollingBackNotification, oneof: "event" },
    { no: 6, name: "changeset_failed", kind: "message", T: ChangesetFailedNotification, oneof: "event" },
    { no: 7, name: "changeset_drained", kind: "message", T: ChangesetDrainedNotification, oneof: "event" },
    { no: 8, name: "changeset_finalized", kind: "message", T: ChangesetFinalizedNotification, oneof: "event" },
    { no: 9, name: "runtime_updated", kind: "message", T: RuntimeElementUpdatedNotification, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullSchemaResponse {
    return new PullSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined, b: PullSchemaResponse | PlainMessage<PullSchemaResponse> | undefined): boolean {
    return proto3.util.equals(PullSchemaResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeploymentRuntimeRequest
 */
export class UpdateDeploymentRuntimeRequest extends Message<UpdateDeploymentRuntimeRequest> {
  /**
   * @generated from field: optional string changeset = 1;
   */
  changeset?: string;

  /**
   * @generated from field: xyz.block.ftl.schema.v1.RuntimeElement update = 2;
   */
  update?: RuntimeElement;

  constructor(data?: PartialMessage<UpdateDeploymentRuntimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeploymentRuntimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "update", kind: "message", T: RuntimeElement },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeRequest {
    return new UpdateDeploymentRuntimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined, b: UpdateDeploymentRuntimeRequest | PlainMessage<UpdateDeploymentRuntimeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.UpdateDeploymentRuntimeResponse
 */
export class UpdateDeploymentRuntimeResponse extends Message<UpdateDeploymentRuntimeResponse> {
  constructor(data?: PartialMessage<UpdateDeploymentRuntimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.UpdateDeploymentRuntimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeploymentRuntimeResponse {
    return new UpdateDeploymentRuntimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined, b: UpdateDeploymentRuntimeResponse | PlainMessage<UpdateDeploymentRuntimeResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeploymentRuntimeResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentsRequest
 */
export class GetDeploymentsRequest extends Message<GetDeploymentsRequest> {
  constructor(data?: PartialMessage<GetDeploymentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentsRequest {
    return new GetDeploymentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentsRequest {
    return new GetDeploymentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentsRequest {
    return new GetDeploymentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentsRequest | PlainMessage<GetDeploymentsRequest> | undefined, b: GetDeploymentsRequest | PlainMessage<GetDeploymentsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentsRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentsResponse
 */
export class GetDeploymentsResponse extends Message<GetDeploymentsResponse> {
  /**
   * @generated from field: repeated xyz.block.ftl.v1.DeployedSchema schema = 1;
   */
  schema: DeployedSchema[] = [];

  constructor(data?: PartialMessage<GetDeploymentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: DeployedSchema, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentsResponse {
    return new GetDeploymentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentsResponse {
    return new GetDeploymentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentsResponse {
    return new GetDeploymentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentsResponse | PlainMessage<GetDeploymentsResponse> | undefined, b: GetDeploymentsResponse | PlainMessage<GetDeploymentsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentsResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateChangesetRequest
 */
export class CreateChangesetRequest extends Message<CreateChangesetRequest> {
  /**
   * The modules to add or update.
   *
   * @generated from field: repeated xyz.block.ftl.schema.v1.Module modules = 1;
   */
  modules: Module[] = [];

  /**
   * The deployments to remove.
   *
   * @generated from field: repeated string removed_deployments = 2;
   */
  removedDeployments: string[] = [];

  constructor(data?: PartialMessage<CreateChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: Module, repeated: true },
    { no: 2, name: "removed_deployments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangesetRequest {
    return new CreateChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangesetRequest | PlainMessage<CreateChangesetRequest> | undefined, b: CreateChangesetRequest | PlainMessage<CreateChangesetRequest> | undefined): boolean {
    return proto3.util.equals(CreateChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CreateChangesetResponse
 */
export class CreateChangesetResponse extends Message<CreateChangesetResponse> {
  /**
   * The changeset key of the newly created changeset.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<CreateChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CreateChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateChangesetResponse {
    return new CreateChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateChangesetResponse | PlainMessage<CreateChangesetResponse> | undefined, b: CreateChangesetResponse | PlainMessage<CreateChangesetResponse> | undefined): boolean {
    return proto3.util.equals(CreateChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DeployedSchema
 */
export class DeployedSchema extends Message<DeployedSchema> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  /**
   * @generated from field: xyz.block.ftl.schema.v1.Module schema = 2;
   */
  schema?: Module;

  /**
   * @generated from field: bool is_active = 3;
   */
  isActive = false;

  constructor(data?: PartialMessage<DeployedSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DeployedSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "message", T: Module },
    { no: 3, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployedSchema {
    return new DeployedSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployedSchema {
    return new DeployedSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployedSchema {
    return new DeployedSchema().fromJsonString(jsonString, options);
  }

  static equals(a: DeployedSchema | PlainMessage<DeployedSchema> | undefined, b: DeployedSchema | PlainMessage<DeployedSchema> | undefined): boolean {
    return proto3.util.equals(DeployedSchema, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PrepareChangesetRequest
 */
export class PrepareChangesetRequest extends Message<PrepareChangesetRequest> {
  /**
   * The changeset key to prepare.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<PrepareChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PrepareChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareChangesetRequest {
    return new PrepareChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareChangesetRequest {
    return new PrepareChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareChangesetRequest {
    return new PrepareChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareChangesetRequest | PlainMessage<PrepareChangesetRequest> | undefined, b: PrepareChangesetRequest | PlainMessage<PrepareChangesetRequest> | undefined): boolean {
    return proto3.util.equals(PrepareChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.PrepareChangesetResponse
 */
export class PrepareChangesetResponse extends Message<PrepareChangesetResponse> {
  constructor(data?: PartialMessage<PrepareChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.PrepareChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareChangesetResponse {
    return new PrepareChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareChangesetResponse {
    return new PrepareChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareChangesetResponse {
    return new PrepareChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareChangesetResponse | PlainMessage<PrepareChangesetResponse> | undefined, b: PrepareChangesetResponse | PlainMessage<PrepareChangesetResponse> | undefined): boolean {
    return proto3.util.equals(PrepareChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CommitChangesetRequest
 */
export class CommitChangesetRequest extends Message<CommitChangesetRequest> {
  /**
   * The changeset key to commit.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<CommitChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CommitChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitChangesetRequest {
    return new CommitChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CommitChangesetRequest | PlainMessage<CommitChangesetRequest> | undefined, b: CommitChangesetRequest | PlainMessage<CommitChangesetRequest> | undefined): boolean {
    return proto3.util.equals(CommitChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.CommitChangesetResponse
 */
export class CommitChangesetResponse extends Message<CommitChangesetResponse> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Changeset changeset = 1;
   */
  changeset?: Changeset;

  constructor(data?: PartialMessage<CommitChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.CommitChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "message", T: Changeset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitChangesetResponse {
    return new CommitChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CommitChangesetResponse | PlainMessage<CommitChangesetResponse> | undefined, b: CommitChangesetResponse | PlainMessage<CommitChangesetResponse> | undefined): boolean {
    return proto3.util.equals(CommitChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DrainChangesetRequest
 */
export class DrainChangesetRequest extends Message<DrainChangesetRequest> {
  /**
   * The changeset key to commit.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<DrainChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DrainChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrainChangesetRequest {
    return new DrainChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrainChangesetRequest {
    return new DrainChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrainChangesetRequest {
    return new DrainChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DrainChangesetRequest | PlainMessage<DrainChangesetRequest> | undefined, b: DrainChangesetRequest | PlainMessage<DrainChangesetRequest> | undefined): boolean {
    return proto3.util.equals(DrainChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.DrainChangesetResponse
 */
export class DrainChangesetResponse extends Message<DrainChangesetResponse> {
  constructor(data?: PartialMessage<DrainChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.DrainChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrainChangesetResponse {
    return new DrainChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrainChangesetResponse {
    return new DrainChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrainChangesetResponse {
    return new DrainChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DrainChangesetResponse | PlainMessage<DrainChangesetResponse> | undefined, b: DrainChangesetResponse | PlainMessage<DrainChangesetResponse> | undefined): boolean {
    return proto3.util.equals(DrainChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FinalizeChangesetRequest
 */
export class FinalizeChangesetRequest extends Message<FinalizeChangesetRequest> {
  /**
   * The changeset key to commit.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  constructor(data?: PartialMessage<FinalizeChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FinalizeChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinalizeChangesetRequest {
    return new FinalizeChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinalizeChangesetRequest {
    return new FinalizeChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinalizeChangesetRequest {
    return new FinalizeChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FinalizeChangesetRequest | PlainMessage<FinalizeChangesetRequest> | undefined, b: FinalizeChangesetRequest | PlainMessage<FinalizeChangesetRequest> | undefined): boolean {
    return proto3.util.equals(FinalizeChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FinalizeChangesetResponse
 */
export class FinalizeChangesetResponse extends Message<FinalizeChangesetResponse> {
  constructor(data?: PartialMessage<FinalizeChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FinalizeChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinalizeChangesetResponse {
    return new FinalizeChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinalizeChangesetResponse {
    return new FinalizeChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinalizeChangesetResponse {
    return new FinalizeChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FinalizeChangesetResponse | PlainMessage<FinalizeChangesetResponse> | undefined, b: FinalizeChangesetResponse | PlainMessage<FinalizeChangesetResponse> | undefined): boolean {
    return proto3.util.equals(FinalizeChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FailChangesetRequest
 */
export class FailChangesetRequest extends Message<FailChangesetRequest> {
  /**
   * The changeset key to fail.
   *
   * @generated from field: string changeset = 1;
   */
  changeset = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<FailChangesetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FailChangesetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailChangesetRequest {
    return new FailChangesetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FailChangesetRequest | PlainMessage<FailChangesetRequest> | undefined, b: FailChangesetRequest | PlainMessage<FailChangesetRequest> | undefined): boolean {
    return proto3.util.equals(FailChangesetRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.FailChangesetResponse
 */
export class FailChangesetResponse extends Message<FailChangesetResponse> {
  constructor(data?: PartialMessage<FailChangesetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.FailChangesetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailChangesetResponse {
    return new FailChangesetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FailChangesetResponse | PlainMessage<FailChangesetResponse> | undefined, b: FailChangesetResponse | PlainMessage<FailChangesetResponse> | undefined): boolean {
    return proto3.util.equals(FailChangesetResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentRequest
 */
export class GetDeploymentRequest extends Message<GetDeploymentRequest> {
  /**
   * @generated from field: string deployment_key = 1;
   */
  deploymentKey = "";

  constructor(data?: PartialMessage<GetDeploymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentRequest {
    return new GetDeploymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined, b: GetDeploymentRequest | PlainMessage<GetDeploymentRequest> | undefined): boolean {
    return proto3.util.equals(GetDeploymentRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.v1.GetDeploymentResponse
 */
export class GetDeploymentResponse extends Message<GetDeploymentResponse> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Module schema = 1;
   */
  schema?: Module;

  constructor(data?: PartialMessage<GetDeploymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.v1.GetDeploymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "message", T: Module },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeploymentResponse {
    return new GetDeploymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined, b: GetDeploymentResponse | PlainMessage<GetDeploymentResponse> | undefined): boolean {
    return proto3.util.equals(GetDeploymentResponse, a, b);
  }
}

