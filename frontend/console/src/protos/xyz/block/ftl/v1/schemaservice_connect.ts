// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file xyz/block/ftl/v1/schemaservice.proto (package xyz.block.ftl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { PingRequest, PingResponse } from "./ftl_pb.js";
import { MethodIdempotency, MethodKind } from "@bufbuild/protobuf";
import { CommitChangesetRequest, CommitChangesetResponse, CreateChangesetRequest, CreateChangesetResponse, FailChangesetRequest, FailChangesetResponse, GetDeploymentRequest, GetDeploymentResponse, GetDeploymentsRequest, GetDeploymentsResponse, GetSchemaRequest, GetSchemaResponse, PrepareChangesetRequest, PrepareChangesetResponse, PullSchemaRequest, PullSchemaResponse, UpdateDeploymentRuntimeRequest, UpdateDeploymentRuntimeResponse, UpdateSchemaRequest, UpdateSchemaResponse } from "./schemaservice_pb.js";

/**
 * @generated from service xyz.block.ftl.v1.SchemaService
 */
export const SchemaService = {
  typeName: "xyz.block.ftl.v1.SchemaService",
  methods: {
    /**
     * Ping service for readiness.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Get the full schema.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.GetSchema
     */
    getSchema: {
      name: "GetSchema",
      I: GetSchemaRequest,
      O: GetSchemaResponse,
      kind: MethodKind.Unary,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * Pull schema changes from the Controller.
     *
     * Note that if there are no deployments this will block indefinitely, making it unsuitable for
     * just retrieving the schema. Use GetSchema for that.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.PullSchema
     */
    pullSchema: {
      name: "PullSchema",
      I: PullSchemaRequest,
      O: PullSchemaResponse,
      kind: MethodKind.ServerStreaming,
      idempotency: MethodIdempotency.NoSideEffects,
    },
    /**
     * UpdateModuleRuntime is used to update the runtime configuration of a module.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.UpdateDeploymentRuntime
     */
    updateDeploymentRuntime: {
      name: "UpdateDeploymentRuntime",
      I: UpdateDeploymentRuntimeRequest,
      O: UpdateDeploymentRuntimeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSchema is used to update the schema.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.UpdateSchema
     */
    updateSchema: {
      name: "UpdateSchema",
      I: UpdateSchemaRequest,
      O: UpdateSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDeployments is used to get the schema for all deployments.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.GetDeployments
     */
    getDeployments: {
      name: "GetDeployments",
      I: GetDeploymentsRequest,
      O: GetDeploymentsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateChangeset creates a new changeset.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.CreateChangeset
     */
    createChangeset: {
      name: "CreateChangeset",
      I: CreateChangesetRequest,
      O: CreateChangesetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PrepareChangeset moves the changeset into the prepared state.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.PrepareChangeset
     */
    prepareChangeset: {
      name: "PrepareChangeset",
      I: PrepareChangesetRequest,
      O: PrepareChangesetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CommitChangeset makes all deployments for the changeset part of the canonical schema.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.CommitChangeset
     */
    commitChangeset: {
      name: "CommitChangeset",
      I: CommitChangesetRequest,
      O: CommitChangesetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * FailChangeset fails an active changeset.
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.FailChangeset
     */
    failChangeset: {
      name: "FailChangeset",
      I: FailChangesetRequest,
      O: FailChangesetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetDeployment gets a deployment by deployment key
     *
     * @generated from rpc xyz.block.ftl.v1.SchemaService.GetDeployment
     */
    getDeployment: {
      name: "GetDeployment",
      I: GetDeploymentRequest,
      O: GetDeploymentResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

