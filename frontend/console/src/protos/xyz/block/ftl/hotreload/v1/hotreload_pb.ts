// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/hotreload/v1/hotreload.proto (package xyz.block.ftl.hotreload.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Module } from "../../schema/v1/schema_pb.js";
import { ErrorList } from "../../language/v1/language_pb.js";

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadRequest
 */
export class ReloadRequest extends Message<ReloadRequest> {
  /**
   * @generated from field: bool force = 1;
   */
  force = false;

  constructor(data?: PartialMessage<ReloadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadRequest {
    return new ReloadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadRequest {
    return new ReloadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadRequest {
    return new ReloadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadRequest | PlainMessage<ReloadRequest> | undefined, b: ReloadRequest | PlainMessage<ReloadRequest> | undefined): boolean {
    return proto3.util.equals(ReloadRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadResponse
 */
export class ReloadResponse extends Message<ReloadResponse> {
  /**
   * @generated from field: xyz.block.ftl.hotreload.v1.SchemaState state = 1;
   */
  state?: SchemaState;

  /**
   * @generated from field: bool failed = 2;
   */
  failed = false;

  constructor(data?: PartialMessage<ReloadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: SchemaState },
    { no: 2, name: "failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadResponse {
    return new ReloadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadResponse {
    return new ReloadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadResponse {
    return new ReloadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadResponse | PlainMessage<ReloadResponse> | undefined, b: ReloadResponse | PlainMessage<ReloadResponse> | undefined): boolean {
    return proto3.util.equals(ReloadResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.WatchRequest
 */
export class WatchRequest extends Message<WatchRequest> {
  constructor(data?: PartialMessage<WatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.WatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRequest {
    return new WatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRequest {
    return new WatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRequest {
    return new WatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRequest | PlainMessage<WatchRequest> | undefined, b: WatchRequest | PlainMessage<WatchRequest> | undefined): boolean {
    return proto3.util.equals(WatchRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.WatchResponse
 */
export class WatchResponse extends Message<WatchResponse> {
  /**
   * @generated from field: xyz.block.ftl.hotreload.v1.SchemaState state = 1;
   */
  state?: SchemaState;

  constructor(data?: PartialMessage<WatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.WatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: SchemaState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResponse {
    return new WatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResponse {
    return new WatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResponse {
    return new WatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResponse | PlainMessage<WatchResponse> | undefined, b: WatchResponse | PlainMessage<WatchResponse> | undefined): boolean {
    return proto3.util.equals(WatchResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.RunnerInfoRequest
 */
export class RunnerInfoRequest extends Message<RunnerInfoRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string deployment = 2;
   */
  deployment = "";

  /**
   * @generated from field: repeated xyz.block.ftl.hotreload.v1.Database databases = 3;
   */
  databases: Database[] = [];

  /**
   * @generated from field: int64 version = 4;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<RunnerInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.RunnerInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "databases", kind: "message", T: Database, repeated: true },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerInfoRequest {
    return new RunnerInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerInfoRequest {
    return new RunnerInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerInfoRequest {
    return new RunnerInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerInfoRequest | PlainMessage<RunnerInfoRequest> | undefined, b: RunnerInfoRequest | PlainMessage<RunnerInfoRequest> | undefined): boolean {
    return proto3.util.equals(RunnerInfoRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.Database
 */
export class Database extends Message<Database> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<Database>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.Database";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Database {
    return new Database().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJsonString(jsonString, options);
  }

  static equals(a: Database | PlainMessage<Database> | undefined, b: Database | PlainMessage<Database> | undefined): boolean {
    return proto3.util.equals(Database, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.RunnerInfoResponse
 */
export class RunnerInfoResponse extends Message<RunnerInfoResponse> {
  /**
   * @generated from field: bool outdated = 1;
   */
  outdated = false;

  constructor(data?: PartialMessage<RunnerInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.RunnerInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outdated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunnerInfoResponse {
    return new RunnerInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunnerInfoResponse {
    return new RunnerInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunnerInfoResponse {
    return new RunnerInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunnerInfoResponse | PlainMessage<RunnerInfoResponse> | undefined, b: RunnerInfoResponse | PlainMessage<RunnerInfoResponse> | undefined): boolean {
    return proto3.util.equals(RunnerInfoResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadNotRequired
 */
export class ReloadNotRequired extends Message<ReloadNotRequired> {
  constructor(data?: PartialMessage<ReloadNotRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadNotRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadNotRequired {
    return new ReloadNotRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadNotRequired {
    return new ReloadNotRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadNotRequired {
    return new ReloadNotRequired().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadNotRequired | PlainMessage<ReloadNotRequired> | undefined, b: ReloadNotRequired | PlainMessage<ReloadNotRequired> | undefined): boolean {
    return proto3.util.equals(ReloadNotRequired, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadSuccess
 */
export class ReloadSuccess extends Message<ReloadSuccess> {
  /**
   * @generated from field: xyz.block.ftl.hotreload.v1.SchemaState state = 1;
   */
  state?: SchemaState;

  constructor(data?: PartialMessage<ReloadSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: SchemaState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadSuccess | PlainMessage<ReloadSuccess> | undefined, b: ReloadSuccess | PlainMessage<ReloadSuccess> | undefined): boolean {
    return proto3.util.equals(ReloadSuccess, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadFailed
 */
export class ReloadFailed extends Message<ReloadFailed> {
  /**
   * Module schema for the built module
   *
   * @generated from field: xyz.block.ftl.hotreload.v1.SchemaState state = 1;
   */
  state?: SchemaState;

  constructor(data?: PartialMessage<ReloadFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: SchemaState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadFailed {
    return new ReloadFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadFailed {
    return new ReloadFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadFailed {
    return new ReloadFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadFailed | PlainMessage<ReloadFailed> | undefined, b: ReloadFailed | PlainMessage<ReloadFailed> | undefined): boolean {
    return proto3.util.equals(ReloadFailed, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.SchemaState
 */
export class SchemaState extends Message<SchemaState> {
  /**
   * @generated from field: xyz.block.ftl.schema.v1.Module module = 1;
   */
  module?: Module;

  /**
   * @generated from field: xyz.block.ftl.language.v1.ErrorList errors = 2;
   */
  errors?: ErrorList;

  /**
   * @generated from field: bool new_runner_required = 3;
   */
  newRunnerRequired = false;

  /**
   * @generated from field: int64 version = 4;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<SchemaState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.SchemaState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "message", T: Module },
    { no: 2, name: "errors", kind: "message", T: ErrorList },
    { no: 3, name: "new_runner_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchemaState {
    return new SchemaState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchemaState {
    return new SchemaState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchemaState {
    return new SchemaState().fromJsonString(jsonString, options);
  }

  static equals(a: SchemaState | PlainMessage<SchemaState> | undefined, b: SchemaState | PlainMessage<SchemaState> | undefined): boolean {
    return proto3.util.equals(SchemaState, a, b);
  }
}

