// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file xyz/block/ftl/hotreload/v1/hotreload.proto (package xyz.block.ftl.hotreload.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Module } from "../../schema/v1/schema_pb.js";
import { ErrorList } from "../../language/v1/language_pb.js";

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadRequest
 */
export class ReloadRequest extends Message<ReloadRequest> {
  /**
   * @generated from field: bool force = 1;
   */
  force = false;

  constructor(data?: PartialMessage<ReloadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadRequest {
    return new ReloadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadRequest {
    return new ReloadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadRequest {
    return new ReloadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadRequest | PlainMessage<ReloadRequest> | undefined, b: ReloadRequest | PlainMessage<ReloadRequest> | undefined): boolean {
    return proto3.util.equals(ReloadRequest, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadResponse
 */
export class ReloadResponse extends Message<ReloadResponse> {
  /**
   * @generated from oneof xyz.block.ftl.hotreload.v1.ReloadResponse.event
   */
  event: {
    /**
     * @generated from field: xyz.block.ftl.hotreload.v1.ReloadSuccess reload_success = 1;
     */
    value: ReloadSuccess;
    case: "reloadSuccess";
  } | {
    /**
     * @generated from field: xyz.block.ftl.hotreload.v1.ReloadFailed reload_failed = 2;
     */
    value: ReloadFailed;
    case: "reloadFailed";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ReloadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reload_success", kind: "message", T: ReloadSuccess, oneof: "event" },
    { no: 2, name: "reload_failed", kind: "message", T: ReloadFailed, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadResponse {
    return new ReloadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadResponse {
    return new ReloadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadResponse {
    return new ReloadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadResponse | PlainMessage<ReloadResponse> | undefined, b: ReloadResponse | PlainMessage<ReloadResponse> | undefined): boolean {
    return proto3.util.equals(ReloadResponse, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadSuccess
 */
export class ReloadSuccess extends Message<ReloadSuccess> {
  /**
   * Module schema for the built module
   *
   * @generated from field: xyz.block.ftl.schema.v1.Module module = 1;
   */
  module?: Module;

  /**
   * Module schema for the built module
   *
   * @generated from field: xyz.block.ftl.language.v1.ErrorList errors = 2;
   */
  errors?: ErrorList;

  constructor(data?: PartialMessage<ReloadSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "message", T: Module },
    { no: 2, name: "errors", kind: "message", T: ErrorList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadSuccess {
    return new ReloadSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadSuccess | PlainMessage<ReloadSuccess> | undefined, b: ReloadSuccess | PlainMessage<ReloadSuccess> | undefined): boolean {
    return proto3.util.equals(ReloadSuccess, a, b);
  }
}

/**
 * @generated from message xyz.block.ftl.hotreload.v1.ReloadFailed
 */
export class ReloadFailed extends Message<ReloadFailed> {
  /**
   * Module schema for the built module
   *
   * @generated from field: xyz.block.ftl.language.v1.ErrorList errors = 1;
   */
  errors?: ErrorList;

  constructor(data?: PartialMessage<ReloadFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xyz.block.ftl.hotreload.v1.ReloadFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ErrorList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadFailed {
    return new ReloadFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadFailed {
    return new ReloadFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadFailed {
    return new ReloadFailed().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadFailed | PlainMessage<ReloadFailed> | undefined, b: ReloadFailed | PlainMessage<ReloadFailed> | undefined): boolean {
    return proto3.util.equals(ReloadFailed, a, b);
  }
}

