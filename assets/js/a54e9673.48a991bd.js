"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[963],{4036:(e,n,a)=>{a.d(n,{A:()=>w});var t=a(8225),r=a(3372),s=a(8086),i=a(1654),l=a(4699),o=a(5531),d=a(2136),c=a(6070);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:a}=e;const r=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,o.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function p(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,s=h(e),[i,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[d,u]=b({queryString:a,groupId:r}),[p,g]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(a);return[r,(0,t.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:r}),y=(()=>{const e=d??p;return m({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{y&&o(y)}),[y]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=a(4185);const y={tabList:"tabList_W6YW",tabItem:"tabItem_G0iJ"};var x=a(7557);function f(e){let{className:n,block:a,selectedValue:t,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,a=o.indexOf(n),r=l[a].value;r!==t&&(d(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;n=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;n=o[a]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n),children:l.map((e=>{let{value:n,label:a,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...s,className:(0,r.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function j(e){let{lazy:n,children:a,selectedValue:s}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=p(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",y.tabList),children:[(0,x.jsx)(f,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},4262:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"reference/databases","title":"Databases","description":"Working with databases in FTL","source":"@site/docs/reference/databases.md","sourceDirName":"reference","slug":"/reference/databases","permalink":"/ftl/docs/reference/databases","draft":false,"unlisted":false,"editUrl":"https://github.com/block/ftl/tree/main/docs/docs/reference/databases.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17,"title":"Databases","description":"Working with databases in FTL"},"sidebar":"tutorialSidebar","previous":{"title":"External Types","permalink":"/ftl/docs/reference/externaltypes"}}');var r=a(7557),s=a(6039),i=a(4036),l=a(8784);const o={sidebar_position:17,title:"Databases",description:"Working with databases in FTL"},d="Databases",c={},u=[{value:"Creating a New Database",id:"creating-a-new-database",level:2},{value:"SQL File Structure",id:"sql-file-structure",level:2},{value:"Schema Directory",id:"schema-directory",level:3},{value:"Queries Directory",id:"queries-directory",level:3},{value:"Provisioning",id:"provisioning",level:2},{value:"Migrations",id:"migrations",level:2},{value:"Connecting with your DB",id:"connecting-with-your-db",level:2},{value:"Using the Generated Database Handle",id:"using-the-generated-database-handle",level:3},{value:"Using Generated Query Clients",id:"using-generated-query-clients",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"databases",children:"Databases"})}),"\n",(0,r.jsx)(n.p,{children:"FTL has support for Postgresql and MySQL databases, including support for automatic provisioning and migrations."}),"\n","\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsx)(l.A,{value:"go",label:"Go",default:!0,children:(0,r.jsxs)(n.p,{children:["Your database is automatically declared by following a specific directory structure for your SQL files. No additional configuration is needed - just create the directory structure and FTL will handle the rest. See the ",(0,r.jsx)(n.a,{href:"#creating-a-new-database",children:"Creating a New Database"})," section for CLI shortcuts."]})}),(0,r.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsxs)(n.p,{children:["Your database is automatically declared by following a specific directory structure for your SQL files. No additional configuration is needed - just create the directory structure and FTL will handle the rest. See the ",(0,r.jsx)(n.a,{href:"#creating-a-new-database",children:"Creating a New Database"})," section for CLI shortcuts."]})}),(0,r.jsx)(l.A,{value:"java",label:"Java",children:(0,r.jsxs)(n.p,{children:["Your database is automatically declared by following a specific directory structure for your SQL files. No additional configuration is needed - just create the directory structure and FTL will handle the rest. See the ",(0,r.jsx)(n.a,{href:"#creating-a-new-database",children:"Creating a New Database"})," section for CLI shortcuts."]})}),(0,r.jsxs)(l.A,{value:"schema",label:"Schema",children:[(0,r.jsxs)(n.p,{children:["In the FTL schema, databases are represented using the ",(0,r.jsx)(n.code,{children:"database"})," keyword with the engine type and name:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-schema",children:'module example {\n  // Database declaration\n  database postgres testdb  \n    +migration sha256:59b989063b6de57a1b6867e8ad7915109c9b8632616118c6ef23e4439cf17f8e\n  \n  // Data structures for database operations\n  data CreateUserParams {\n    name String\n    email String\n  }\n  \n  data UserResult {\n    id Int +sql column "users"."id"\n    name String +sql column "users"."name"\n    email String +sql column "users"."email"\n  }\n  \n  // Query that returns a single row\n  verb getUser(Int) example.UserResult\n    +database calls example.testdb\n    +sql query one "SELECT id, name, email FROM users WHERE id = ?"\n  \n  // Query that returns multiple rows\n  verb listUsers(Unit) [example.UserResult]\n    +database calls example.testdb\n    +sql query many "SELECT id, name, email FROM users ORDER BY name"\n  \n  // Query that performs an action but doesn\'t return data\n  verb createUser(example.CreateUserParams) Unit\n    +database calls example.testdb\n    +sql query exec "INSERT INTO users (name, email) VALUES (?, ?)"\n  \n  // Custom verb that uses a database query\n  export verb getUserEmail(Int) String\n}\n'})}),(0,r.jsx)(n.p,{children:"The schema representation includes:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"database"})," declaration with the engine type (",(0,r.jsx)(n.code,{children:"postgres"})," or ",(0,r.jsx)(n.code,{children:"mysql"}),") and database name"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"+migration"})," annotation with a SHA256 hash of the migration files"]}),"\n",(0,r.jsxs)(n.li,{children:["Data structures with ",(0,r.jsx)(n.code,{children:"+sql column"})," annotations mapping to database columns"]}),"\n",(0,r.jsxs)(n.li,{children:["Verb declarations with ",(0,r.jsx)(n.code,{children:"+database calls"})," and ",(0,r.jsx)(n.code,{children:"+sql query"})," annotations specifying the query type and SQL statement"]}),"\n"]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-new-database",children:"Creating a New Database"}),"\n",(0,r.jsxs)(n.p,{children:["To create a new database with the required directory structure, you can use the ",(0,r.jsx)(n.code,{children:"ftl postgres new"})," or ",(0,r.jsx)(n.code,{children:"ftl mysql new"})," command. The format of the command is:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ftl <engine> new <module>.<datasource>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<engine>"})," is either ",(0,r.jsx)(n.code,{children:"mysql"})," or ",(0,r.jsx)(n.code,{children:"postgres"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<module>.<datasource>"})," is the qualified name of the datasource (module name can be omitted if in a single module directory)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ftl mysql new mymodule.mydb    # Create a MySQL database named "mydb" in module "mymodule"\nftl postgres new mydb          # Create a PostgreSQL database named "mydb" in the current module\n'})}),"\n",(0,r.jsx)(n.p,{children:"This command will:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create the appropriate directory structure"}),"\n",(0,r.jsxs)(n.li,{children:["Create an initial migration file in the ",(0,r.jsx)(n.code,{children:"schema"})," directory"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"sql-file-structure",children:"SQL File Structure"}),"\n",(0,r.jsxs)(n.p,{children:["In order to be discoverable by FTL, the SQL files in your project must follow a specific directory structure. FTL supports two database engines, declared via the directory hierarchy as either ",(0,r.jsx)(n.code,{children:"mysql"})," or ",(0,r.jsx)(n.code,{children:"postgres"}),":"]}),"\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsxs)(l.A,{value:"go",label:"Go",default:!0,children:[(0,r.jsx)(n.p,{children:"For Go projects, SQL files must be located in:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'db/\n  \u251c\u2500\u2500 mysql/           # must be exactly "mysql" or "postgres"\n  \u2502   \u2514\u2500\u2500 mydb/        # database name\n  \u2502       \u251c\u2500\u2500 schema/  # contains migration files\n  \u2502       \u2514\u2500\u2500 queries/ # contains query files\n'})}),(0,r.jsxs)(n.p,{children:["The presence of a ",(0,r.jsx)(n.code,{children:"schema"})," directory under your database name automatically declares the database in FTL."]})]}),(0,r.jsxs)(l.A,{value:"kotlin",label:"Kotlin",children:[(0,r.jsx)(n.p,{children:"For Kotlin projects, SQL files must be located in:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'src/main/resources/\n  \u2514\u2500\u2500 db/\n      \u251c\u2500\u2500 mysql/           # must be exactly "mysql" or "postgres"\n      \u2502   \u2514\u2500\u2500 mydb/        # database name\n      \u2502       \u251c\u2500\u2500 schema/  # contains migration files\n      \u2502       \u2514\u2500\u2500 queries/ # contains query files\n'})}),(0,r.jsxs)(n.p,{children:["The presence of a ",(0,r.jsx)(n.code,{children:"schema"})," directory under your database name automatically declares the database in FTL."]})]}),(0,r.jsxs)(l.A,{value:"java",label:"Java",children:[(0,r.jsx)(n.p,{children:"For Java projects, SQL files must be located in:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'src/main/resources/\n  \u2514\u2500\u2500 db/\n      \u251c\u2500\u2500 mysql/           # must be exactly "mysql" or "postgres"\n      \u2502   \u2514\u2500\u2500 mydb/        # database name\n      \u2502       \u251c\u2500\u2500 schema/  # contains migration files\n      \u2502       \u2514\u2500\u2500 queries/ # contains query files\n'})}),(0,r.jsxs)(n.p,{children:["The presence of a ",(0,r.jsx)(n.code,{children:"schema"})," directory under your database name automatically declares the database in FTL."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"schema-directory",children:"Schema Directory"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"schema"})," directory contains all your database migration ",(0,r.jsx)(n.code,{children:".sql"})," files. These files are used to create and modify your database schema."]}),"\n",(0,r.jsx)(n.h3,{id:"queries-directory",children:"Queries Directory"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"queries"})," directory contains ",(0,r.jsx)(n.code,{children:".sql"})," files with any SQL queries you would like generated as FTL verbs for use in your module. These queries must be annotated with ",(0,r.jsx)(n.a,{href:"https://docs.sqlc.dev/",children:"SQLC annotation syntax"}),". FTL will automatically lift these queries into the module schema and provide a type-safe client to execute each query."]}),"\n",(0,r.jsxs)(n.p,{children:["Find more information in the ",(0,r.jsx)(n.a,{href:"#using-generated-query-clients",children:"Using Generated Query Clients"})," section below."]}),"\n",(0,r.jsx)(n.h2,{id:"provisioning",children:"Provisioning"}),"\n",(0,r.jsxs)(n.p,{children:["FTL includes support for automatically provisioning databases. The actual backing implementation is\nextensible, and presently we include support for both local development provisioning using docker,\nand cloud formations based provisioning for AWS deployments. When using ",(0,r.jsx)(n.code,{children:"ftl dev"})," a docker container\nwill automatically be spun up for each datasource that has been defined, and FTL will automatically\nhandle configuration. The same applies when deploying to an AWS cluster with cloud formations\nprovisioning setup."]}),"\n",(0,r.jsx)(n.h2,{id:"migrations",children:"Migrations"}),"\n",(0,r.jsxs)(n.p,{children:["FTL includes support for automatically running migrations on databases. This is provided by ",(0,r.jsx)(n.a,{href:"https://github.com/amacneil/dbmate",children:"dbmate"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To create additional migrations you can use the ",(0,r.jsx)(n.code,{children:"ftl postgres new migration"})," or ",(0,r.jsx)(n.code,{children:"ftl mysql new migration"})," command. The format of the command is ",(0,r.jsx)(n.code,{children:"ftl <engine> new migration <module>.<datasource> <migration-name>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The module name can be omitted if the current working directory only contains a single module."}),"\n",(0,r.jsxs)(n.p,{children:["E.g. to create a new migration called ",(0,r.jsx)(n.code,{children:"init"})," for the ",(0,r.jsx)(n.code,{children:"testdb"})," datasource in the ",(0,r.jsx)(n.code,{children:"mysql"})," module you would run ",(0,r.jsx)(n.code,{children:"ftl mysql new migration mysql.testdb init"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"When the modules are provisioned FTL will automatically run these migrations for you."}),"\n",(0,r.jsx)(n.h2,{id:"connecting-with-your-db",children:"Connecting with your DB"}),"\n",(0,r.jsx)(n.p,{children:"There are two supported ways to interact with your database in FTL: using the generated database handle to perform raw queries, or using generated query clients."}),"\n",(0,r.jsx)(n.h3,{id:"using-the-generated-database-handle",children:"Using the Generated Database Handle"}),"\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsxs)(l.A,{value:"go",label:"Go",default:!0,children:[(0,r.jsxs)(n.p,{children:["Once you've declared a database, FTL automatically generates a database handle that provides direct access to the underlying connection. You can use this to execute raw SQL queries (where ",(0,r.jsx)(n.code,{children:"MydbHandle"})," is the generated handle type for the ",(0,r.jsx)(n.code,{children:"mydb"})," datasource):"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'//ftl:verb export\nfunc Query(ctx context.Context, db MydbHandle) ([]string, error) {\n\trows, err := db.QueryContext(ctx, "SELECT data FROM requests")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []string\n\tfor rows.Next() {\n\t\tvar i string\n\t\tif err := rows.Scan(&i); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n'})})]}),(0,r.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.p,{children:"TBD"})}),(0,r.jsx)(l.A,{value:"java",label:"Java",children:(0,r.jsx)(n.p,{children:"TBD"})}),(0,r.jsxs)(l.A,{value:"schema",label:"Schema",children:[(0,r.jsxs)(n.p,{children:["In the FTL schema, the database handle is represented by the ",(0,r.jsx)(n.code,{children:"+database calls"})," annotation on verbs:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-schema",children:"module example {\n  // Database declaration\n  database postgres mydb\n    +migration sha256:59b989063b6de57a1b6867e8ad7915109c9b8632616118c6ef23e4439cf17f8e\n  \n  // Verb that uses the database handle directly\n  export verb query(Unit) [String]\n    +database calls example.mydb\n}\n"})}),(0,r.jsx)(n.p,{children:"When you use a database handle in your code, you're directly accessing the underlying database connection. The FTL compiler automatically generates the appropriate handle type based on the database declaration."})]})]}),"\n",(0,r.jsx)(n.h3,{id:"using-generated-query-clients",children:"Using Generated Query Clients"}),"\n",(0,r.jsxs)(n.p,{children:["For better type safety and maintainability, FTL can automatically generate type-safe query clients from SQL files in your ",(0,r.jsx)(n.code,{children:"queries"})," directory. Your SQL files must be annotated with ",(0,r.jsx)(n.a,{href:"https://docs.sqlc.dev/",children:"SQLC annotation syntax"})," to specify the type of query and its parameters. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- name: GetUser :one\nSELECT id, name, email\nFROM users\nWHERE id = $1;\n\n-- name: ListUsers :many\nSELECT id, name, email\nFROM users\nORDER BY name;\n\n-- name: CreateUser :exec\nINSERT INTO users (name, email)\nVALUES ($1, $2);\n"})}),"\n",(0,r.jsx)(n.p,{children:"These queries will be automatically converted into FTL verbs with corresponding generated clients that you can inject into your verbs just like any other verb client. For example:"}),"\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsx)(l.A,{value:"go",label:"Go",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'//ftl:verb export\nfunc GetEmail(ctx context.Context, id int, query GetUserClient) (string, error) {\n\tresult, err := query(ctx, id)\n\tif err != nil {\n\t\treturn "", err\n\t}\n\treturn result.Email, nil\n}\n'})})}),(0,r.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Verb\nfun getEmail(id: Int, query: GetUserClient): String {\n    val result = query.getUser(id)\n    return result.email\n}\n"})})}),(0,r.jsx)(l.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Verb\npublic String getEmail(int id, GetUserClient query) {\n    UserResult result = query.getUser(id);\n    return result.getEmail();\n}\n"})})}),(0,r.jsxs)(l.A,{value:"schema",label:"Schema",children:[(0,r.jsxs)(n.p,{children:["In the FTL schema, the generated query clients are represented as verbs with the ",(0,r.jsx)(n.code,{children:"+database calls"})," and ",(0,r.jsx)(n.code,{children:"+sql query"})," annotations:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-schema",children:'module example {\n  // Database declaration\n  database postgres testdb\n    +migration sha256:59b989063b6de57a1b6867e8ad7915109c9b8632616118c6ef23e4439cf17f8e\n  \n  // Data structures for query results and parameters\n  data UserResult {\n    id Int +sql column "users"."id"\n    name String +sql column "users"."name"\n    email String +sql column "users"."email"\n  }\n  \n  data CreateUserParams {\n    name String\n    email String\n  }\n  \n  // Query that returns a single row\n  verb getUser(Int) example.UserResult\n    +database calls example.testdb\n    +sql query one "SELECT id, name, email FROM users WHERE id = ?"\n  \n  // Query that returns multiple rows\n  verb listUsers(Unit) [example.UserResult]\n    +database calls example.testdb\n    +sql query many "SELECT id, name, email FROM users ORDER BY name"\n  \n  // Query that performs an action but doesn\'t return data\n  verb createUser(example.CreateUserParams) Unit\n    +database calls example.testdb\n    +sql query exec "INSERT INTO users (name, email) VALUES (?, ?)"\n  \n  // Custom verb that uses the generated query client\n  export verb getUserEmail(Int) String\n    +calls example.getUser\n}\n'})}),(0,r.jsx)(n.p,{children:"When you use a generated query client in your code, you're calling a verb that has been automatically generated from your SQL query. FTL handles the mapping between your SQL queries and the generated verbs."})]})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},6039:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(8225);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},8784:(e,n,a)=>{a.d(n,{A:()=>i});a(8225);var t=a(3372);const r={tabItem:"tabItem_f5BR"};var s=a(7557);function i(e){let{children:n,hidden:a,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,i),hidden:a,children:n})}}}]);