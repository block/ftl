"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[954],{670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"reference/ingress","title":"HTTP Ingress","description":"Handling incoming HTTP requests","source":"@site/docs/reference/ingress.md","sourceDirName":"reference","slug":"/reference/ingress","permalink":"/ftl/docs/reference/ingress","draft":false,"unlisted":false,"editUrl":"https://github.com/block/ftl/tree/main/docs/docs/reference/ingress.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"title":"HTTP Ingress","description":"Handling incoming HTTP requests"},"sidebar":"tutorialSidebar","previous":{"title":"Cron","permalink":"/ftl/docs/reference/cron"},"next":{"title":"Secrets/Config","permalink":"/ftl/docs/reference/secretsconfig"}}');var r=n(7557),a=n(972),i=n(8630),o=n(4932);const l={sidebar_position:15,title:"HTTP Ingress",description:"Handling incoming HTTP requests"},c="HTTP Ingress",d={},u=[{value:"Field mapping",id:"field-mapping",level:3},{value:"Optional fields",id:"optional-fields",level:3},{value:"Casing",id:"casing",level:3},{value:"SumTypes",id:"sumtypes",level:3},{value:"Encoding query params as JSON",id:"encoding-query-params-as-json",level:3}];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"http-ingress",children:"HTTP Ingress"})}),"\n",(0,r.jsxs)(t.p,{children:["Verbs annotated with ",(0,r.jsx)(t.code,{children:"ftl:ingress"})," will be exposed via HTTP (",(0,r.jsx)(t.code,{children:"http"})," is the default ingress type). These endpoints will then be available on one of our default ",(0,r.jsx)(t.code,{children:"ingress"})," ports (local development defaults to ",(0,r.jsx)(t.code,{children:"http://localhost:8891"}),")."]}),"\n",(0,r.jsxs)(t.p,{children:["The following will be available at ",(0,r.jsx)(t.code,{children:"http://localhost:8891/http/users/123/posts?postId=456"}),"."]}),"\n","\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'type GetRequestPathParams struct {\n\tUserID string `json:"userId"`\n}\n\ntype GetRequestQueryParams struct {\n\tPostID string `json:"postId"`\n}\n\ntype GetResponse struct {\n\tMessage string `json:"msg"`\n}\n\n//ftl:ingress GET /http/users/{userId}/posts\nfunc Get(ctx context.Context, req builtin.HttpRequest[ftl.Unit, GetRequestPathParams, GetRequestQueryParams]) (builtin.HttpResponse[GetResponse, ErrorResponse], error) {\n  // ...\n}\n'})}),(0,r.jsxs)(t.p,{children:["Because the example above only has a single path parameter it can be simplified by just using a scalar such as ",(0,r.jsx)(t.code,{children:"string"})," or ",(0,r.jsx)(t.code,{children:"int64"})," as the path parameter type:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"//ftl:ingress GET /http/users/{userId}/posts\nfunc Get(ctx context.Context, req builtin.HttpRequest[ftl.Unit, int64, GetRequestQueryParams]) (builtin.HttpResponse[GetResponse, ErrorResponse], error) {\n  // ...\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE!"}),"\nThe ",(0,r.jsx)(t.code,{children:"req"})," and ",(0,r.jsx)(t.code,{children:"resp"})," types of HTTP ",(0,r.jsx)(t.code,{children:"ingress"})," ",(0,r.jsx)(t.a,{href:"../reference/verbs",children:"verbs"})," must be ",(0,r.jsx)(t.code,{children:"builtin.HttpRequest"})," and ",(0,r.jsx)(t.code,{children:"builtin.HttpResponse"})," respectively. These types provide the necessary fields for HTTP ",(0,r.jsx)(t.code,{children:"ingress"})," (",(0,r.jsx)(t.code,{children:"headers"}),", ",(0,r.jsx)(t.code,{children:"statusCode"}),", etc.)"]}),"\n"]}),(0,r.jsx)(t.p,{children:"Key points:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ingress"})," verbs will be automatically exported by default."]}),"\n"]}),(0,r.jsx)(t.h3,{id:"field-mapping",children:"Field mapping"}),(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"HttpRequest"})," request object takes 3 type parameters, the body, the path parameters and the query parameters."]}),(0,r.jsx)(t.p,{children:"Given the following request verb:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'type PostBody struct{\n\tTitle string               `json:"title"`\n\tContent string             `json:"content"`\n\tTag ftl.Option[string]     `json:"tag"`\n}\ntype PostPathParams struct {\n\tUserID string             `json:"userId"`\n\tPostID string             `json:"postId"`\n}\n\ntype PostQueryParams struct {\n\tPublish boolean `json:"publish"`\n}\n\n//ftl:ingress http PUT /users/{userId}/posts/{postId}\nfunc Get(ctx context.Context, req builtin.HttpRequest[PostBody, PostPathParams, PostQueryParams]) (builtin.HttpResponse[GetResponse, string], error) {\n\treturn builtin.HttpResponse[GetResponse, string]{\n\t\tHeaders: map[string][]string{"Get": {"Header from FTL"}},\n\t\tBody: ftl.Some(GetResponse{\n\t\t\tMessage: fmt.Sprintf("UserID: %s, PostID: %s, Tag: %s", req.pathParameters.UserID, req.pathParameters.PostID, req.Body.Tag.Default("none")),\n\t\t}),\n\t}, nil\n}\n'})}),(0,r.jsx)(t.p,{children:"The rules for how each element is mapped are slightly different, as they have a different structure:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The body is mapped directly to the body of the request, generally as a JSON object. Scalars are also supported, as well as []byte to get the raw body. If they type is ",(0,r.jsx)(t.code,{children:"any"})," then it will be assumed to be JSON and mapped to the appropriate types based on the JSON structure."]}),"\n",(0,r.jsxs)(t.li,{children:["The path parameters can be mapped directly to an object with field names corresponding to the name of the path parameter. If there is only a single path parameter it can be injected directly as a scalar. They can also be injected as a ",(0,r.jsx)(t.code,{children:"map[string]string"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["The path parameters can also be mapped directly to an object with field names corresponding to the name of the path parameter. They can also be injected directly as a ",(0,r.jsx)(t.code,{children:"map[string]string"}),", or ",(0,r.jsx)(t.code,{children:"map[string][]string"})," for multiple values."]}),"\n"]}),(0,r.jsx)(t.h3,{id:"optional-fields",children:"Optional fields"}),(0,r.jsxs)(t.p,{children:["Optional fields are represented by the ",(0,r.jsx)(t.code,{children:"ftl.Option"})," type. The ",(0,r.jsx)(t.code,{children:"Option"})," type is a wrapper around the actual type and can be ",(0,r.jsx)(t.code,{children:"Some"})," or ",(0,r.jsx)(t.code,{children:"None"}),". In the example above, the ",(0,r.jsx)(t.code,{children:"Tag"})," field is optional."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"curl -i http://localhost:8891/users/123/posts/456\n"})}),(0,r.jsxs)(t.p,{children:["Because the ",(0,r.jsx)(t.code,{children:"tag"})," query parameter is not provided, the response will be:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "msg": "UserID: 123, PostID: 456, Tag: none"\n}\n'})}),(0,r.jsx)(t.h3,{id:"casing",children:"Casing"}),(0,r.jsxs)(t.p,{children:["Field names use lowerCamelCase by default. You can override this by using the ",(0,r.jsx)(t.code,{children:"json"})," tag."]}),(0,r.jsx)(t.h3,{id:"sumtypes",children:"SumTypes"}),(0,r.jsx)(t.p,{children:"Given the following request verb:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"//ftl:enum export\ntype SumType interface {\n\ttag()\n}\n\ntype A string\n\nfunc (A) tag() {}\n\ntype B []string\n\nfunc (B) tag() {}\n\n//ftl:ingress http POST /typeenum\nfunc TypeEnum(ctx context.Context, req builtin.HttpRequest[SumType, ftl.Unit, ftl.Unit]) (builtin.HttpResponse[SumType, string], error) {\n\treturn builtin.HttpResponse[SumType, string]{Body: ftl.Some(req.Body)}, nil\n}\n"})}),(0,r.jsxs)(t.p,{children:["The following curl request will map the ",(0,r.jsx)(t.code,{children:"SumType"})," name and value to the ",(0,r.jsx)(t.code,{children:"req.Body"}),":"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:'curl -X POST "http://localhost:8891/typeenum" \\\n     -H "Content-Type: application/json" \\\n     --data \'{"name": "A", "value": "sample"}\'\n'})}),(0,r.jsx)(t.p,{children:"The response will be:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "name": "A",\n  "value": "sample"\n}\n'})}),(0,r.jsx)(t.h3,{id:"encoding-query-params-as-json",children:"Encoding query params as JSON"}),(0,r.jsxs)(t.p,{children:["Complex query params can also be encoded as JSON using the ",(0,r.jsx)(t.code,{children:"@json"})," query parameter. For example:"]}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:'{"tag":"ftl"}'})," url-encoded is ",(0,r.jsx)(t.code,{children:"%7B%22tag%22%3A%22ftl%22%7D"})]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"curl -i http://localhost:8891/users/123/posts/456?@json=%7B%22tag%22%3A%22ftl%22%7D\n"})})]}),(0,r.jsxs)(o.A,{value:"kotlin",label:"Kotlin",children:[(0,r.jsxs)(t.p,{children:["Kotlin uses the ",(0,r.jsx)(t.code,{children:"JAX-RS"})," annotations to define HTTP endpoints. The following example shows how to define an HTTP endpoint in Kotlin. As the underling implementation is based on ",(0,r.jsx)(t.a,{href:"https://quarkus.io",children:"Quarkus"}),"\nit is also possible to use the ",(0,r.jsx)(t.a,{href:"https://quarkus.io/guides/rest#accessing-request-parameters",children:"Quarkus extensions to the JAX-RS annotations"}),"."]}),(0,r.jsx)(t.p,{children:"In general the difference between the Quarkus annotation and the standard JAX-RS ones is that the Quarkus parameters infer the parameter name from the method parameter name, while the JAX-RS ones require the parameter name to be explicitly defined."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'import java.util.List\n\nimport jakarta.ws.rs.DELETE\nimport jakarta.ws.rs.GET\nimport jakarta.ws.rs.POST\nimport jakarta.ws.rs.PUT\nimport jakarta.ws.rs.Path\n\nimport jakarta.ws.rs.QueryParam // JAX-RS annotation to get the query parameter\nimport org.jboss.resteasy.reactive.RestPath // Quarkus annotation to get the path parameter\n\n@Path("/")\npublic class TestHTTP {\n\n    @GET\n    @Path("/http/users/{userId}/posts")\n    fun get(@RestPath userId: String,@QueryParam("postId") post: String) : String {\n        //...\n    }\n\n}\n'})}),(0,r.jsxs)(t.p,{children:["Under the hood these HTTP invocations are being mapped to verbs that take a ",(0,r.jsx)(t.code,{children:"builtin.HttpRequest"})," and return a ",(0,r.jsx)(t.code,{children:"builtin.HttpResponse"}),". This is not exposed directly to the user, but is instead mapped directly to ",(0,r.jsx)(t.code,{children:"JAX-RS"})," annotations."]})]}),(0,r.jsxs)(o.A,{value:"java",label:"Java",children:[(0,r.jsxs)(t.p,{children:["JVM Languages use the ",(0,r.jsx)(t.code,{children:"JAX-RS"})," annotations to define HTTP endpoints. The following example shows how to define an HTTP endpoint in Java. As the underling implementation is based on ",(0,r.jsx)(t.a,{href:"https://quarkus.io",children:"Quarkus"}),"\nit is also possible to use the ",(0,r.jsx)(t.a,{href:"https://quarkus.io/guides/rest#accessing-request-parameters",children:"Quarkus extensions to the JAX-RS annotations"}),"."]}),(0,r.jsx)(t.p,{children:"In general the difference between the Quarkus annotation and the standard JAX-RS ones is that the Quarkus parameters infer the parameter name from the method parameter name, while the JAX-RS ones require the parameter name to be explicitly defined."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'import java.util.List;\n\nimport jakarta.ws.rs.DELETE;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.POST;\nimport jakarta.ws.rs.PUT;\nimport jakarta.ws.rs.Path;\n\nimport jakarta.ws.rs.QueryParam; // JAX-RS annotation to get the query parameter\nimport org.jboss.resteasy.reactive.RestPath; // Quarkus annotation to get the path parameter\n\n@Path("/")\npublic class TestHTTP {\n\n    @GET\n    @Path("/http/users/{userId}/posts")\n    public String get(@RestPath String userId, @QueryParam("postId") String post) {\n        //...\n    }\n\n}\n'})}),(0,r.jsxs)(t.p,{children:["Under the hood these HTTP invocations are being mapped to verbs that take a ",(0,r.jsx)(t.code,{children:"builtin.HttpRequest"})," and return a ",(0,r.jsx)(t.code,{children:"builtin.HttpResponse"}),". This is not exposed directly to the user, but is instead mapped directly to ",(0,r.jsx)(t.code,{children:"JAX-RS"})," annotations."]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},4932:(e,t,n)=>{n.d(t,{A:()=>i});n(8225);var s=n(3372);const r={tabItem:"tabItem_tr6E"};var a=n(7557);function i(e){let{children:t,hidden:n,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:n,children:t})}},8630:(e,t,n)=>{n.d(t,{A:()=>v});var s=n(8225),r=n(3372),a=n(1910),i=n(1654),o=n(932),l=n(2955),c=n(1192),d=n(7931);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:a}))),[c,u]=m({queryString:n,groupId:r}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,d.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),j=(()=>{const e=c??g;return h({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{j&&l(j)}),[j]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var f=n(224);const j={tabList:"tabList_t6iw",tabItem:"tabItem_FCC1"};var x=n(7557);function b(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),r=o[n].value;r!==s&&(c(t),i(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...a,className:(0,r.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function T(e){const t=g(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,x.jsx)(b,{...t,...e}),(0,x.jsx)(y,{...t,...e})]})}function v(e){const t=(0,f.A)();return(0,x.jsx)(T,{...e,children:u(e.children)},String(t))}},972:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(8225);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);