"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[523],{78:(e,t,l)=>{l.d(t,{A:()=>i});l(8225);var n=l(3372);const s={tabItem:"tabItem_k9Yy"};var r=l(7557);function i(e){let{children:t,hidden:l,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,i),hidden:l,children:t})}},1414:(e,t,l)=>{l.d(t,{A:()=>v});var n=l(8225),s=l(3372),r=l(2646),i=l(1654),a=l(8322),d=l(9467),c=l(1544),o=l(5126);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:t,children:l}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:l,attributes:n,default:s}}=e;return{value:t,label:l,attributes:n,default:s}}))}(l);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,l])}function u(e){let{value:t,tabValues:l}=e;return l.some((e=>e.value===t))}function j(e){let{queryString:t=!1,groupId:l}=e;const s=(0,i.W6)(),r=function(e){let{queryString:t=!1,groupId:l}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:t,groupId:l});return[(0,d.aZ)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})}),[r,s])]}function g(e){const{defaultValue:t,queryString:l=!1,groupId:s}=e,r=x(e),[i,d]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=l.find((e=>e.default))??l[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,h]=j({queryString:l,groupId:s}),[g,p]=function(e){let{groupId:t}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,o.Dv)(l);return[s,(0,n.useCallback)((e=>{l&&r.set(e)}),[l,r])]}({groupId:s}),f=(()=>{const e=c??g;return u({value:e,tabValues:r})?e:null})();(0,a.A)((()=>{f&&d(f)}),[f]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),p(e)}),[h,p,r]),tabValues:r}}var p=l(8442);const f={tabList:"tabList_CY6c",tabItem:"tabItem_IDbK"};var y=l(7557);function m(e){let{className:t,block:l,selectedValue:n,selectValue:i,tabValues:a}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),o=e=>{const t=e.currentTarget,l=d.indexOf(t),s=a[l].value;s!==n&&(c(t),i(s))},h=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const l=d.indexOf(e.currentTarget)+1;t=d[l]??d[0];break}case"ArrowLeft":{const l=d.indexOf(e.currentTarget)-1;t=d[l]??d[d.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":l},t),children:a.map((e=>{let{value:t,label:l,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>{d.push(e)},onKeyDown:h,onClick:o,...r,className:(0,s.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":n===t}),children:l??t},t)}))})}function b(e){let{lazy:t,children:l,selectedValue:r}=e;const i=(Array.isArray(l)?l:[l]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function A(e){const t=g(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,y.jsx)(m,{...t,...e}),(0,y.jsx)(b,{...t,...e})]})}function v(e){const t=(0,p.A)();return(0,y.jsx)(A,{...e,children:h(e.children)},String(t))}},5443:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"reference/types","title":"Types","description":"Declaring and using Types","source":"@site/docs/reference/types.md","sourceDirName":"reference","slug":"/reference/types","permalink":"/ftl/docs/reference/types","draft":false,"unlisted":false,"editUrl":"https://github.com/block/ftl/tree/main/docs/docs/reference/types.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Types","description":"Declaring and using Types"},"sidebar":"tutorialSidebar","previous":{"title":"Verbs","permalink":"/ftl/docs/reference/verbs"},"next":{"title":"Visibility","permalink":"/ftl/docs/reference/visibility"}}');var s=l(7557),r=l(6039),i=l(1414),a=l(78);const d={sidebar_position:2,title:"Types",description:"Declaring and using Types"},c="Types",o={},h=[{value:"Basic types",id:"basic-types",level:2},{value:"Data structures",id:"data-structures",level:2},{value:"Generics",id:"generics",level:2},{value:"Type enums (sum types)",id:"type-enums-sum-types",level:2},{value:"Value enums",id:"value-enums",level:2},{value:"Type aliases",id:"type-aliases",level:2}];function x(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"types",children:"Types"})}),"\n",(0,s.jsxs)(t.p,{children:["FTL supports the following types: ",(0,s.jsx)(t.code,{children:"Int"})," (64-bit), ",(0,s.jsx)(t.code,{children:"Float"})," (64-bit), ",(0,s.jsx)(t.code,{children:"String"}),", ",(0,s.jsx)(t.code,{children:"Bytes"})," (a byte array), ",(0,s.jsx)(t.code,{children:"Bool"}),", ",(0,s.jsx)(t.code,{children:"Time"}),",\n",(0,s.jsx)(t.code,{children:"Any"})," (a dynamic type), ",(0,s.jsx)(t.code,{children:"Unit"}),' (similar to "void"), arrays, maps, data structures, and constant enumerations. Each FTL\ntype is mapped to a corresponding language-specific type. For example in Go ',(0,s.jsx)(t.code,{children:"Float"})," is represented as ",(0,s.jsx)(t.code,{children:"float64"}),", ",(0,s.jsx)(t.code,{children:"Time"}),"\nis represented by ",(0,s.jsx)(t.code,{children:"time.Time"}),", and so on."]}),"\n",(0,s.jsx)(t.p,{children:"User-defined types referenced by a verb will be automatically exported as FTL types."}),"\n","\n",(0,s.jsx)(t.h2,{id:"basic-types",children:"Basic types"}),"\n",(0,s.jsx)(t.p,{children:"The following table shows how FTL types map to language-specific types:"}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(a.A,{value:"go",label:"Go",default:!0,children:(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"FTL"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Go"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Int"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"int"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Float"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"float64"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"string"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bytes"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"[]byte"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bool"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"bool"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Time"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"time.Time"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Any"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"./externaltypes",children:"External"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Unit"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"N/A"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Map<K,V>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"map[K]V"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Array<T>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"[]T"})})]})]})]})}),(0,s.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"FTL"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Kotlin"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Int"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Long"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Float"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Double"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"String"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bytes"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ByteArray"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bool"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Boolean"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Time"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ZonedDateTime"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Any"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"./externaltypes",children:"External"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Unit"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"N/A"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Map<K,V>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Map<K,V>"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Array<T>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"List<T>"})})]})]})]})}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"FTL"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Java"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Java (optional)"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Int"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"long"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Long"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Float"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"double"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Double"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"String"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"@Nullable String"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bytes"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"[]byte"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"@Nullable byte[]"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Bool"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Boolean"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Time"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ZonedDateTime\ufe0f"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"@Nullable ZonedDateTime"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Any"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"./externaltypes",children:"External"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"./externaltypes",children:"External"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Unit"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"void"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"N/A"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Map<K,V>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Map<K,V>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"@Nullable Map<K,V>"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Array<T>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"List<T>"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"@Nullable List<T>"})})]})]})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"data-structures",children:"Data structures"}),"\n",(0,s.jsx)(t.p,{children:"FTL supports user-defined data structures, declared using the idiomatic syntax of the target language."}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(a.A,{value:"go",label:"Go",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"type Person struct {\n  Name string\n  Age  int\n}\n"})})}),(0,s.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:"data class Person(\n  val name: String,\n  val age: Int\n)\n"})})}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class Person {\n  private final String name;\n  private final int age;\n\n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"generics",children:"Generics"}),"\n",(0,s.jsx)(t.p,{children:"FTL has first-class support for generics, declared using the idiomatic syntax of the target language."}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(a.A,{value:"go",label:"Go",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"type Pair[T, U] struct {\n  First  T\n  Second U\n}\n"})})}),(0,s.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:"data class Pair<T, U>(\n  val first: T,\n  val second: U\n)\n"})})}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class Pair<T, U> {\n  private final T first;\n  private final U second;\n\n  public Pair(T first, U second) {\n    this.first = first;\n    this.second = second;\n  }\n}\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"type-enums-sum-types",children:"Type enums (sum types)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Tagged_union",children:"Sum types"})," are supported by FTL's type system."]}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsxs)(a.A,{value:"go",label:"Go",default:!0,children:[(0,s.jsxs)(t.p,{children:["Sum types aren't directly supported by Go, however they can be approximated with the use of ",(0,s.jsx)(t.a,{href:"https://blog.chewxy.com/2018/03/18/golang-interfaces/",children:"sealed interfaces"}),":"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"//ftl:enum\ntype Animal interface { animal() }\n\ntype Cat struct {}\nfunc (Cat) animal() {}\n\ntype Dog struct {}\nfunc (Dog) animal() {}\n"})})]}),(0,s.jsxs)(a.A,{value:"kotlin",label:"Kotlin",children:[(0,s.jsxs)(t.p,{children:["Sum types aren't directly supported by Kotlin, however they can be approximated with the use of ",(0,s.jsx)(t.a,{href:"https://kotlinlang.org/docs/sealed-classes.html",children:"sealed interfaces"}),":"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:"@Enum\nsealed interface Animal\n\n@EnumHolder\nclass Cat() : Animal\n\n@EnumHolder\nclass Dog() : Animal\n"})})]}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"TODO"}),"\n"]})})]}),"\n",(0,s.jsx)(t.h2,{id:"value-enums",children:"Value enums"}),"\n",(0,s.jsx)(t.p,{children:"A value enum is an enumerated set of string or integer values."}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(a.A,{value:"go",label:"Go",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'//ftl:enum\ntype Colour string\n\nconst (\n  Red   Colour = "red"\n  Green Colour = "green"\n  Blue  Colour = "blue"\n)\n'})})}),(0,s.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:'@Enum\npublic enum class Colour(\n  public final val `value`: String,\n) {\n  Red("red"),\n  Green("green"),\n  Blue("blue"),\n  ;\n}\n'})})}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Enum\npublic enum Colour {\n  Red("red"),\n  Green("green"),\n  Blue("blue");\n\n  private final String value;\n\n  Colour(String value) {\n    this.value = value;\n  }\n}\n'})})})]}),"\n",(0,s.jsx)(t.h2,{id:"type-aliases",children:"Type aliases"}),"\n",(0,s.jsx)(t.p,{children:"A type alias is an alternate name for an existing type. It can be declared like so:"}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(a.A,{value:"go",label:"Go",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"//ftl:typealias\ntype UserID string\n"})})}),(0,s.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:"typealias UserID = String\n"})})}),(0,s.jsx)(a.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"// Java does not support type aliases directly\n// Use a wrapper class instead\npublic class UserID {\n    private final String value;\n\n    public UserID(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Type aliases are useful for making code more readable and type-safe by giving meaningful names to types that represent specific concepts in your domain."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},6039:(e,t,l)=>{l.d(t,{R:()=>i,x:()=>a});var n=l(8225);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);