"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{2377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"reference/externaltypes","title":"External Types","description":"Using external types in your modules","source":"@site/docs/reference/externaltypes.md","sourceDirName":"reference","slug":"/reference/externaltypes","permalink":"/ftl/docs/reference/externaltypes","draft":false,"unlisted":false,"editUrl":"https://github.com/block/ftl/tree/main/docs/docs/reference/externaltypes.md","tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"sidebar_position":16,"title":"External Types","description":"Using external types in your modules"},"sidebar":"tutorialSidebar","previous":{"title":"Retries","permalink":"/ftl/docs/reference/retries"},"next":{"title":"Unit Tests","permalink":"/ftl/docs/reference/unittests"}}');var a=n(7557),s=n(972),l=n(8630),i=n(4932);const o={sidebar_position:16,title:"External Types",description:"Using external types in your modules"},p="External Types",c={},u=[{value:"Cross-Runtime Type Mappings",id:"cross-runtime-type-mappings",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"external-types",children:"External Types"})}),"\n",(0,a.jsx)(t.p,{children:"FTL supports the use of external types in your FTL modules. External types are types defined in other packages or modules that are not part of the FTL module."}),"\n",(0,a.jsx)(t.p,{children:"The primary difference is that external types are not defined in the FTL schema, and therefore serialization and deserialization of these types is not handled\nby FTL. Instead, FTL relies on the runtime to handle serialization and deserialization of these types."}),"\n",(0,a.jsx)(t.p,{children:"In some cases this feature can also be used to provide custom serialization and deserialization logic for types that are not directly supported by FTL, even\nif they are defined in the same package as the FTL module."}),"\n","\n",(0,a.jsxs)(l.A,{groupId:"languages",children:[(0,a.jsxs)(i.A,{value:"go",label:"Go",default:!0,children:[(0,a.jsx)(t.p,{children:"To use an external type in your FTL module schema, declare a type alias over the external type:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:"//ftl:typealias\ntype FtlType external.OtherType\n\n//ftl:typealias\ntype FtlType2 = external.OtherType\n"})}),(0,a.jsxs)(t.p,{children:["The external type is widened to ",(0,a.jsx)(t.code,{children:"Any"})," in the FTL schema, and the corresponding type alias will include metadata\nfor the runtime-specific type mapping:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType Any\n  +typemap go "github.com/external.OtherType"\n'})})]}),(0,a.jsxs)(i.A,{value:"kotlin",label:"Kotlin",children:[(0,a.jsxs)(t.p,{children:["To use an external type in your FTL module schema, implement a ",(0,a.jsx)(t.code,{children:"TypeAliasMapper"}),":"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'@TypeAlias(name = "OtherType")\nclass OtherTypeTypeMapper : TypeAliasMapper<OtherType, JsonNode> {\n    override fun encode(`object`: OtherType): JsonNode {\n        return TextNode.valueOf(`object`.value)\n    }\n\n    override fun decode(serialized: JsonNode): OtherType {\n        if (serialized.isTextual) {\n            return OtherType(serialized.textValue())\n        }\n        throw RuntimeException("Expected a textual value")\n    }\n}\n'})}),(0,a.jsxs)(t.p,{children:["In the example above the external type is widened to ",(0,a.jsx)(t.code,{children:"Any"})," in the FTL schema, and the corresponding type alias will include metadata\nfor the runtime-specific type mapping:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType Any\n  +typemap java "foo.bar.OtherType"\n'})}),(0,a.jsxs)(t.p,{children:["Note that for JVM languages ",(0,a.jsx)(t.code,{children:"java"})," is always used as the runtime name, regardless of the actual language used."]}),(0,a.jsxs)(t.p,{children:["It is also possible to map to any other valid FTL type (e.g. ",(0,a.jsx)(t.code,{children:"String"}),") by using this as the second type parameter:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'@TypeAlias(name = "OtherType")\nclass OtherTypeTypeMapper : TypeAliasMapper<OtherType, String> {\n    override fun encode(other: OtherType): JsonNode {\n        return other.value\n    }\n\n    override fun decode(serialized: String): OtherType {\n        return OtherType(serialized.textValue())\n    }\n}\n'})}),(0,a.jsxs)(t.p,{children:["The corresponding type alias will be to a ",(0,a.jsx)(t.code,{children:"String"}),", which makes the schema more useful:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType String\n  +typemap kotlin "foo.bar.OtherType"\n'})})]}),(0,a.jsxs)(i.A,{value:"java",label:"Java",children:[(0,a.jsxs)(t.p,{children:["To use an external type in your FTL module schema, implement a ",(0,a.jsx)(t.code,{children:"TypeAliasMapper"}),":"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@TypeAlias(name = "OtherType")\npublic class OtherTypeTypeMapper implements TypeAliasMapper<OtherType, JsonNode> {\n    @Override\n    public JsonNode encode(OtherType object) {\n        return TextNode.valueOf(object.getValue());\n    }\n\n    @Override\n    public AnySerializedType decode(OtherType serialized) {\n        if (serialized.isTextual()) {\n            return new OtherType(serialized.textValue());\n        }\n        throw new RuntimeException("Expected a textual value");\n    }\n}\n'})}),(0,a.jsxs)(t.p,{children:["In the example above the external type is widened to ",(0,a.jsx)(t.code,{children:"Any"})," in the FTL schema, and the corresponding type alias will include metadata\nfor the runtime-specific type mapping:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType Any\n  +typemap java "foo.bar.OtherType"\n'})}),(0,a.jsxs)(t.p,{children:["It is also possible to map to any other valid FTL type (e.g. ",(0,a.jsx)(t.code,{children:"String"}),") by using this as the second type parameter:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@TypeAlias(name = "OtherType")\npublic class OtherTypeTypeMapper implements TypeAliasMapper<OtherType, String> {\n    @Override\n    public String encode(OtherType object) {\n        return object.getValue();\n    }\n\n    @Override\n    public String decode(OtherType serialized) {\n        return new OtherType(serialized.textValue());\n    }\n}\n'})}),(0,a.jsxs)(t.p,{children:["The corresponding type alias will be to a ",(0,a.jsx)(t.code,{children:"String"}),", which makes the schema more useful:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType String\n  +typemap java "com.external.other.OtherType"\n'})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"cross-runtime-type-mappings",children:"Cross-Runtime Type Mappings"}),"\n",(0,a.jsx)(t.p,{children:"FTL also provides the capability to declare type mappings for other runtimes. Here's how to do it in each language:"}),"\n",(0,a.jsxs)(l.A,{groupId:"languages",children:[(0,a.jsx)(i.A,{value:"go",label:"Go",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'//ftl:typealias\n//ftl:typemap java "com.external.other.OtherType"\ntype FtlType external.OtherType\n'})})}),(0,a.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'@TypeAlias(\n  name = "OtherType",\n  languageTypeMappings = [LanguageTypeMapping(language = "go", type = "github.com/external.OtherType")]\n)\n'})})}),(0,a.jsx)(i.A,{value:"java",label:"Java",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@TypeAlias(name = "OtherType", languageTypeMappings = {\n    @LanguageTypeMapping(language = "go", type = "github.com/external.OtherType"),\n})\n'})})})]}),"\n",(0,a.jsx)(t.p,{children:"In the FTL schema, cross-runtime mappings will appear as:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'typealias FtlType Any\n  +typemap go "github.com/external.OtherType"\n  +typemap java "com.external.other.OtherType"\n'})}),"\n",(0,a.jsx)(t.p,{children:"This allows FTL to decode the type properly in other languages, for seamless\ninteroperability across different runtimes."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4932:(e,t,n)=>{n.d(t,{A:()=>l});n(8225);var r=n(3372);const a={tabItem:"tabItem_tr6E"};var s=n(7557);function l(e){let{children:t,hidden:n,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,l),hidden:n,children:t})}},8630:(e,t,n)=>{n.d(t,{A:()=>v});var r=n(8225),a=n(3372),s=n(1910),l=n(1654),i=n(932),o=n(2955),p=n(1192),c=n(7931);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,p.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[p,u]=y({queryString:n,groupId:a}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),f=(()=>{const e=p??m;return h({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,s]),tabValues:s}}var x=n(224);const f={tabList:"tabList_t6iw",tabItem:"tabItem_FCC1"};var g=n(7557);function T(e){let{className:t,block:n,selectedValue:r,selectValue:l,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),c=e=>{const t=e.currentTarget,n=o.indexOf(t),a=i[n].value;a!==r&&(p(t),l(a))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...s,className:(0,a.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:s}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function j(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,g.jsx)(T,{...t,...e}),(0,g.jsx)(b,{...t,...e})]})}function v(e){const t=(0,x.A)();return(0,g.jsx)(j,{...e,children:u(e.children)},String(t))}},972:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(8225);const a={},s=r.createContext(a);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);