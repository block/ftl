"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[963],{4262:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"reference/databases","title":"Databases","description":"Working with databases in FTL","source":"@site/docs/reference/databases.md","sourceDirName":"reference","slug":"/reference/databases","permalink":"/ftl/docs/reference/databases","draft":false,"unlisted":false,"editUrl":"https://github.com/block/ftl/tree/main/docs/docs/reference/databases.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17,"title":"Databases","description":"Working with databases in FTL"},"sidebar":"tutorialSidebar","previous":{"title":"External Types","permalink":"/ftl/docs/reference/externaltypes"}}');var r=t(7557),s=t(972),i=t(8630),o=t(4932);const l={sidebar_position:17,title:"Databases",description:"Working with databases in FTL"},c="Databases",d={},u=[{value:"Provisioning",id:"provisioning",level:2},{value:"Migrations",id:"migrations",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"databases",children:"Databases"})}),"\n",(0,r.jsx)(n.p,{children:"FTL has support for Postgresql and MySQL databases, including support for automatic provisioning and migrations."}),"\n",(0,r.jsx)(n.p,{children:"The process for declaring a database differs by language."}),"\n","\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsxs)(o.A,{value:"go",label:"Go",default:!0,children:[(0,r.jsxs)(n.p,{children:["To use a database in go you must create a struct that implements either the ",(0,r.jsx)(n.code,{children:"ftl.MySQLDatabaseConfig"})," or\n",(0,r.jsx)(n.code,{children:"ftl.PostgresDatabaseConfig"})," interface. Generally this will involve creating a struct that embeds the\n",(0,r.jsx)(n.code,{children:"ftl.DefaultMySQLDatabaseConfig"})," or ",(0,r.jsx)(n.code,{children:"ftl.DefaultPostgresDatabaseConfig"})," struct and then implementing the ",(0,r.jsx)(n.code,{children:"Name() string"})," method."]}),(0,r.jsxs)(n.p,{children:["You can then use the ",(0,r.jsx)(n.code,{children:"ftl.DatabaseHandle"})," type to access the database by injecting it into an FTL verb.\nAn example for MySQL is shown below:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package mysql\n\nimport (\n\t"context"\n\t"database/sql"\n\n\t"github.com/block/ftl/go-runtime/ftl" // Import the FTL SDK.\n)\n\ntype TestDatasourceConfig struct {\n\tftl.DefaultMySQLDatabaseConfig\n}\n\nfunc (TestDatasourceConfig) Name() string { return "testdb" }\n\n//ftl:verb export\nfunc Query(ctx context.Context, db ftl.DatabaseHandle[TestDatasourceConfig]) ([]string, error) {\n\tvar database *sql.DB = db.Get(ctx) // Get the database connection.\n\t// The following code is standard golang SQL code, it has nothing FTL specific.\n\trows, err := database.QueryContext(ctx, "SELECT data FROM requests")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []string\n\tfor rows.Next() {\n\t\tvar i string\n\t\tif err := rows.Scan(\n\t\t\t&i,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n'})})]}),(0,r.jsxs)(o.A,{value:"kotlin",label:"Kotlin",children:[(0,r.jsxs)(n.p,{children:["To declare a datasource in Kotlin you must use the ",(0,r.jsx)(n.code,{children:"@SQLDatasource"})," annotation. This annotations is used to define\nthe database name and type."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@SQLDatasource(name = "testdb", type = SQLDatabaseType.POSTGRESQL)\n'})}),(0,r.jsxs)(n.p,{children:["You must also include the appropriate depdencies in your ",(0,r.jsx)(n.code,{children:"pom.xml"})," for the database you are using:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-jdbc-postgresql</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-jdbc-mysql</artifactId>\n</dependency>\n"})}),(0,r.jsxs)(n.p,{children:["You can also use ",(0,r.jsx)(n.a,{href:"https://quarkus.io/guides/hibernate-orm",children:"Hibernate directly"})," or using ",(0,r.jsx)(n.a,{href:"https://quarkus.io/guides/hibernate-orm-panache",children:"Panache"}),"."]}),(0,r.jsx)(n.p,{children:"This will require adding one of the following dependencies:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-orm</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n</dependency>\n"})}),(0,r.jsx)(n.p,{children:"Note that this will likely change significantly in future once FTL has SQL Verbs."})]}),(0,r.jsxs)(o.A,{value:"java",label:"Java",children:[(0,r.jsxs)(n.p,{children:["To declare a datasource in Java you must use the ",(0,r.jsx)(n.code,{children:"@SQLDatasource"})," annotation. This annotations is used to define\nthe database name and type."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SQLDatasource(name = "testdb", type = SQLDatabaseType.POSTGRESQL)\n'})}),(0,r.jsxs)(n.p,{children:["You must also include the appropriate depdencies in your ",(0,r.jsx)(n.code,{children:"pom.xml"})," for the database you are using:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-jdbc-postgresql</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-jdbc-mysql</artifactId>\n</dependency>\n"})}),(0,r.jsxs)(n.p,{children:["You can also use ",(0,r.jsx)(n.a,{href:"https://quarkus.io/guides/hibernate-orm",children:"Hibernate directly"})," or using ",(0,r.jsx)(n.a,{href:"https://quarkus.io/guides/hibernate-orm-panache",children:"Panache"}),"."]}),(0,r.jsx)(n.p,{children:"This will require adding one of the following dependencies:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-orm</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n</dependency>\n"})}),(0,r.jsx)(n.p,{children:"Note that this will likely change significantly in future once FTL has SQL Verbs."})]})]}),"\n",(0,r.jsx)(n.h2,{id:"provisioning",children:"Provisioning"}),"\n",(0,r.jsxs)(n.p,{children:["FTL includes support for automatically provisioning databases. The actual backing implementation is\nextensible, and presently we include support for both local development provisioning using docker,\nand cloud formations based provisioning for AWS deployments. When using ",(0,r.jsx)(n.code,{children:"ftl dev"})," a docker container\nwill automatically be spun up for each datasource that has been defined, and FTL will automatically\nhandle configuration. The same applies when deploying to an AWS cluster with cloud formations\nprovisioning setup."]}),"\n",(0,r.jsx)(n.h2,{id:"migrations",children:"Migrations"}),"\n",(0,r.jsxs)(n.p,{children:["FTL includes support for automatically running migrations on databases. This is provided by ",(0,r.jsx)(n.a,{href:"https://github.com/amacneil/dbmate",children:"dbmate"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To create migrations you can use the ",(0,r.jsx)(n.code,{children:"ftl new-sql-migration"})," command. This will create new migration files, and initialize the required\ndirectory structure if it does not exist. The format of the command is ",(0,r.jsx)(n.code,{children:"ftl new-sql-migration <module>.<datasource> <migration-name>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The module name can be omitted if the current working directory only contains a single module."}),"\n",(0,r.jsxs)(n.p,{children:["E.g. to create a new migration called ",(0,r.jsx)(n.code,{children:"init"})," for the ",(0,r.jsx)(n.code,{children:"testdb"})," datasource in the ",(0,r.jsx)(n.code,{children:"mysql"})," module you would run ",(0,r.jsx)(n.code,{children:"ftl new-sql-migration mysql.testdb init"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"When the modules are provisioned FTL will automatically run these migrations for you."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},4932:(e,n,t)=>{t.d(n,{A:()=>i});t(8225);var a=t(3372);const r={tabItem:"tabItem_tr6E"};var s=t(7557);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,i),hidden:t,children:n})}},8630:(e,n,t)=>{t.d(n,{A:()=>w});var a=t(8225),r=t(3372),s=t(1910),i=t(1654),o=t(932),l=t(2955),c=t(1192),d=t(7931);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=h(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=f({queryString:t,groupId:r}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),b=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=t(224);const b={tabList:"tabList_t6iw",tabItem:"tabItem_FCC1"};var x=t(7557);function y(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==a&&(c(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...s,className:(0,r.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},972:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(8225);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);