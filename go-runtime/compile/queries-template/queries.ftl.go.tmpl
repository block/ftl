{{- with .QueriesCtx -}}
{{- $module := .Module -}}

// Code generated by FTL. DO NOT EDIT.
package {{$module.Name}}

{{ if .Imports -}}
import (
{{- range .Imports }}
    {{.}}
{{- end }}
)
{{ end }}

{{- range .Data }}
type {{.Name|title}}
	{{- if .TypeParameters}}[
		{{- range $i, $tp := .TypeParameters}}
			{{- if $i}}, {{end}}{{$tp}} any
		{{- end -}}
	]{{- end}} struct {
  {{- range .Fields}}
  	{{.Name|title}} {{type $module .Type}}
  {{- end}}
}
{{- end -}}

{{- range .Verbs }}
	{{ if and (eq (type $module .Request) "ftl.Unit") (eq (type $module .Response) "ftl.Unit")}}
type {{.Name|title}}Client func(context.Context) error
	{{- else if eq (type $module .Request) "ftl.Unit"}}
type {{.Name|title}}Client func(context.Context) ({{type $module .Response}}, error)
	{{- else if eq (type $module .Response) "ftl.Unit"}}
type {{.Name|title}}Client func(context.Context, {{type $module .Request}}) error
	{{- else}}
type {{.Name|title}}Client func(context.Context, {{type $module .Request}}) ({{type $module .Response}}, error)
	{{- end}}
{{- end}}

func init() {
	reflection.Register(
{{- range .Verbs }}
	{{- if and (eq (type $module .Request) "ftl.Unit") (eq (type $module .Response) "ftl.Unit")}}
		server.QueryEmpty("{{$module.Name}}", "{{.Name}}", reflection.CommandType{{.CommandType}}, "{{.DBName}}", "{{.DBType}}", "{{.RawSQL}}", {{.ParamFields}}, {{.ColToFieldName}}),
	{{- else if eq (type $module .Request) "ftl.Unit"}}
		server.QuerySource[{{queryRequestResponseType $module .Response}}]("{{$module.Name}}", "{{.Name}}", reflection.CommandType{{.CommandType}}, "{{.DBName}}", "{{.DBType}}", "{{.RawSQL}}", {{.ParamFields}}, {{.ColToFieldName}}),
	{{- else if eq (type $module .Response) "ftl.Unit"}}
		server.QuerySink[{{queryRequestResponseType $module .Request}}]("{{$module.Name}}", "{{.Name}}", reflection.CommandType{{.CommandType}}, "{{.DBName}}", "{{.DBType}}", "{{.RawSQL}}", {{.ParamFields}}, {{.ColToFieldName}}),
	{{- else}}
		server.Query[{{queryRequestResponseType $module .Request}}, {{queryRequestResponseType $module .Response}}]("{{$module.Name}}", "{{.Name}}", reflection.CommandType{{.CommandType}}, "{{.DBName}}", "{{.DBType}}", "{{.RawSQL}}", {{.ParamFields}}, {{.ColToFieldName}}),
	{{- end}}
{{- end}}
	)
}
{{- end -}}
