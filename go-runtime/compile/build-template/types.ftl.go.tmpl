{{- $verbs := .Verbs -}}
{{- $dbs := .Databases -}}
{{- $name := .Name -}}
{{- with .TypesCtx -}}
{{- $moduleName := .MainModulePkg -}}

// Code generated by FTL. DO NOT EDIT.
package {{$name}}

{{ if .Imports -}}
import (
{{- range .Imports }}
    {{.}}
{{- end }}
)
{{ end }}

{{- range $verbs -}}
	{{ if not .IsQuery }}
	{{ $req := .Request.LocalTypeName -}}
	{{ $resp := .Response.LocalTypeName -}}

	{{ if and (eq .Request.TypeName "ftl.Unit") (eq .Response.TypeName "ftl.Unit")}}
type {{.Name|title}}Client func(context.Context) error
	{{- else if eq .Request.TypeName "ftl.Unit" }}
type {{.Name|title}}Client func(context.Context) ({{$resp}}, error)
	{{- else if eq .Response.TypeName "ftl.Unit" }}
type {{.Name|title}}Client func(context.Context, {{$req}}) error
	{{- else }}
type {{.Name|title}}Client func(context.Context, {{$req}}) ({{$resp}}, error)
	{{- end }}
	{{ end }}
{{ end -}}

{{- range $dbs -}}
//ftl:database {{.Type}} {{.Name}}
type {{.Name|title}}Config struct {}

type {{.Name|title}}Handle = ftl.DatabaseHandle[{{.Name|title}}Config]
{{ end -}}

{{- if or .SumTypes .ExternalTypes $verbs }}
func init() {
	reflection.Register(
{{- range .SumTypes}}
		reflection.SumType[{{ trimModuleQualifier $moduleName .TypeName }}](
			{{- range .Variants}}
			*new({{ trimModuleQualifier $moduleName .TypeName }}),
			{{- end}}
		),
{{- end}}
{{- range .ExternalTypes}}
		reflection.ExternalType(*new({{.TypeName}})),
{{- end}}
{{- range $dbs}}
		{{- if eq .Type "postgres" }}
		reflection.Database[{{.Name|title}}Config]("{{.Name}}", server.InitPostgres),
		{{- else if eq .Type "mysql" }}
		reflection.Database[{{.Name|title}}Config]("{{.Name}}", server.InitMySQL),
		{{- end }}
{{- end}}
{{- range $verbs}}
	{{ if .IsTransaction }}
		reflection.Transaction({{ trimModuleQualifier $moduleName .TypeName }}, "{{ .TransactionDatasourceName }}"),
	{{- end }}
	{{ if not .IsQuery }}
		reflection.ProvideResourcesForVerb(
            {{ trimModuleQualifier $moduleName .TypeName }},
            {{- range .Resources}}
                {{- with getVerbClient . }}
            	{{- $verb := trimModuleQualifier $moduleName .TypeName -}}

            	{{ if and (eq .Request.TypeName "ftl.Unit") (eq .Response.TypeName "ftl.Unit")}}
            server.EmptyClient[{{$verb}}](),
            	{{- else if eq .Request.TypeName "ftl.Unit" }}
            server.SourceClient[{{$verb}}, {{.Response.LocalTypeName}}](),
            	{{- else if eq .Response.TypeName "ftl.Unit" }}
            server.SinkClient[{{$verb}}, {{.Request.LocalTypeName}}](),
            	{{- else }}
            server.VerbClient[{{$verb}}, {{.Request.LocalTypeName}}, {{.Response.LocalTypeName}}](),
            	{{- end }}
                {{- end }}
                {{- with getDatabaseHandle . }}
			server.DatabaseHandle[{{ trimModuleQualifier $moduleName .TypeName }}]("{{.Name}}", "{{.Type}}"),
                {{- end }}
                {{- with getTopicHandle . }}
			server.TopicHandle[{{ trimModuleQualifier $moduleName .EventType.TypeName }}, {{ .MapperTypeName $moduleName}}]("{{.Module}}", "{{.Name}}"),
                {{- end }}
				{{- with getConfigHandle . }}
			server.Config[{{ trimModuleQualifier $moduleName .Type.TypeName }}]("{{.Module}}", "{{.Name}}"),
				{{- end }}
				{{- with getSecretHandle . }}
			server.Secret[{{ trimModuleQualifier $moduleName .Type.TypeName }}]("{{.Module}}", "{{.Name}}"),
				{{- end }}
			{{- end}}
		),
	{{- end }}
{{- end}}
	)
}
{{- end -}}
{{- end -}}
