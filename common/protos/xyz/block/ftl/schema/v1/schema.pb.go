// Code generated by go2proto. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: xyz/block/ftl/schema/v1/schema.proto

package schemapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AliasKind is the kind of alias.
type AliasKind int32

const (
	AliasKind_ALIAS_KIND_UNSPECIFIED AliasKind = 0
	AliasKind_ALIAS_KIND_JSON        AliasKind = 1
)

// Enum value maps for AliasKind.
var (
	AliasKind_name = map[int32]string{
		0: "ALIAS_KIND_UNSPECIFIED",
		1: "ALIAS_KIND_JSON",
	}
	AliasKind_value = map[string]int32{
		"ALIAS_KIND_UNSPECIFIED": 0,
		"ALIAS_KIND_JSON":        1,
	}
)

func (x AliasKind) Enum() *AliasKind {
	p := new(AliasKind)
	*p = x
	return p
}

func (x AliasKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AliasKind) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[0].Descriptor()
}

func (AliasKind) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[0]
}

func (x AliasKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AliasKind.Descriptor instead.
func (AliasKind) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{0}
}

type ChangesetState int32

const (
	ChangesetState_CHANGESET_STATE_UNSPECIFIED  ChangesetState = 0
	ChangesetState_CHANGESET_STATE_PREPARING    ChangesetState = 1
	ChangesetState_CHANGESET_STATE_PREPARED     ChangesetState = 2
	ChangesetState_CHANGESET_STATE_COMMITTED    ChangesetState = 3
	ChangesetState_CHANGESET_STATE_DRAINED      ChangesetState = 4
	ChangesetState_CHANGESET_STATE_FINALIZED    ChangesetState = 5
	ChangesetState_CHANGESET_STATE_ROLLING_BACK ChangesetState = 6
	ChangesetState_CHANGESET_STATE_FAILED       ChangesetState = 7
)

// Enum value maps for ChangesetState.
var (
	ChangesetState_name = map[int32]string{
		0: "CHANGESET_STATE_UNSPECIFIED",
		1: "CHANGESET_STATE_PREPARING",
		2: "CHANGESET_STATE_PREPARED",
		3: "CHANGESET_STATE_COMMITTED",
		4: "CHANGESET_STATE_DRAINED",
		5: "CHANGESET_STATE_FINALIZED",
		6: "CHANGESET_STATE_ROLLING_BACK",
		7: "CHANGESET_STATE_FAILED",
	}
	ChangesetState_value = map[string]int32{
		"CHANGESET_STATE_UNSPECIFIED":  0,
		"CHANGESET_STATE_PREPARING":    1,
		"CHANGESET_STATE_PREPARED":     2,
		"CHANGESET_STATE_COMMITTED":    3,
		"CHANGESET_STATE_DRAINED":      4,
		"CHANGESET_STATE_FINALIZED":    5,
		"CHANGESET_STATE_ROLLING_BACK": 6,
		"CHANGESET_STATE_FAILED":       7,
	}
)

func (x ChangesetState) Enum() *ChangesetState {
	p := new(ChangesetState)
	*p = x
	return p
}

func (x ChangesetState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangesetState) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[1].Descriptor()
}

func (ChangesetState) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[1]
}

func (x ChangesetState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangesetState.Descriptor instead.
func (ChangesetState) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{1}
}

type DeploymentState int32

const (
	DeploymentState_DEPLOYMENT_STATE_UNSPECIFIED     DeploymentState = 0
	DeploymentState_DEPLOYMENT_STATE_PROVISIONING    DeploymentState = 1
	DeploymentState_DEPLOYMENT_STATE_READY           DeploymentState = 2
	DeploymentState_DEPLOYMENT_STATE_CANARY          DeploymentState = 3
	DeploymentState_DEPLOYMENT_STATE_CANONICAL       DeploymentState = 4
	DeploymentState_DEPLOYMENT_STATE_DRAINING        DeploymentState = 5
	DeploymentState_DEPLOYMENT_STATE_DE_PROVISIONING DeploymentState = 6
	DeploymentState_DEPLOYMENT_STATE_DELETED         DeploymentState = 7
	DeploymentState_DEPLOYMENT_STATE_FAILED          DeploymentState = 8
)

// Enum value maps for DeploymentState.
var (
	DeploymentState_name = map[int32]string{
		0: "DEPLOYMENT_STATE_UNSPECIFIED",
		1: "DEPLOYMENT_STATE_PROVISIONING",
		2: "DEPLOYMENT_STATE_READY",
		3: "DEPLOYMENT_STATE_CANARY",
		4: "DEPLOYMENT_STATE_CANONICAL",
		5: "DEPLOYMENT_STATE_DRAINING",
		6: "DEPLOYMENT_STATE_DE_PROVISIONING",
		7: "DEPLOYMENT_STATE_DELETED",
		8: "DEPLOYMENT_STATE_FAILED",
	}
	DeploymentState_value = map[string]int32{
		"DEPLOYMENT_STATE_UNSPECIFIED":     0,
		"DEPLOYMENT_STATE_PROVISIONING":    1,
		"DEPLOYMENT_STATE_READY":           2,
		"DEPLOYMENT_STATE_CANARY":          3,
		"DEPLOYMENT_STATE_CANONICAL":       4,
		"DEPLOYMENT_STATE_DRAINING":        5,
		"DEPLOYMENT_STATE_DE_PROVISIONING": 6,
		"DEPLOYMENT_STATE_DELETED":         7,
		"DEPLOYMENT_STATE_FAILED":          8,
	}
)

func (x DeploymentState) Enum() *DeploymentState {
	p := new(DeploymentState)
	*p = x
	return p
}

func (x DeploymentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentState) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[2].Descriptor()
}

func (DeploymentState) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[2]
}

func (x DeploymentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentState.Descriptor instead.
func (DeploymentState) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{2}
}

type FromOffset int32

const (
	FromOffset_FROM_OFFSET_UNSPECIFIED FromOffset = 0
	FromOffset_FROM_OFFSET_BEGINNING   FromOffset = 1
	FromOffset_FROM_OFFSET_LATEST      FromOffset = 2
)

// Enum value maps for FromOffset.
var (
	FromOffset_name = map[int32]string{
		0: "FROM_OFFSET_UNSPECIFIED",
		1: "FROM_OFFSET_BEGINNING",
		2: "FROM_OFFSET_LATEST",
	}
	FromOffset_value = map[string]int32{
		"FROM_OFFSET_UNSPECIFIED": 0,
		"FROM_OFFSET_BEGINNING":   1,
		"FROM_OFFSET_LATEST":      2,
	}
)

func (x FromOffset) Enum() *FromOffset {
	p := new(FromOffset)
	*p = x
	return p
}

func (x FromOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FromOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[3].Descriptor()
}

func (FromOffset) Type() protoreflect.EnumType {
	return &file_xyz_block_ftl_schema_v1_schema_proto_enumTypes[3]
}

func (x FromOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FromOffset.Descriptor instead.
func (FromOffset) EnumDescriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{3}
}

type AWSIAMAuthDatabaseConnector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Endpoint      string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Database      string                 `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSIAMAuthDatabaseConnector) Reset() {
	*x = AWSIAMAuthDatabaseConnector{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSIAMAuthDatabaseConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSIAMAuthDatabaseConnector) ProtoMessage() {}

func (x *AWSIAMAuthDatabaseConnector) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSIAMAuthDatabaseConnector.ProtoReflect.Descriptor instead.
func (*AWSIAMAuthDatabaseConnector) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *AWSIAMAuthDatabaseConnector) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *AWSIAMAuthDatabaseConnector) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AWSIAMAuthDatabaseConnector) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AWSIAMAuthDatabaseConnector) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type Any struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Any) Reset() {
	*x = Any{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Any) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Element       *Type                  `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Array) Reset() {
	*x = Array{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Array) ProtoMessage() {}

func (x *Array) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Array.ProtoReflect.Descriptor instead.
func (*Array) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Array) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Array) GetElement() *Type {
	if x != nil {
		return x.Element
	}
	return nil
}

type Bool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bool) Reset() {
	*x = Bool{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Bool) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Bytes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Bytes) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Changeset struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Key             string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Modules         []*Module              `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	ToRemove        []string               `protobuf:"bytes,4,rep,name=to_remove,json=toRemove,proto3" json:"to_remove,omitempty"`
	RemovingModules []*Module              `protobuf:"bytes,5,rep,name=removing_modules,json=removingModules,proto3" json:"removing_modules,omitempty"`
	State           ChangesetState         `protobuf:"varint,6,opt,name=state,proto3,enum=xyz.block.ftl.schema.v1.ChangesetState" json:"state,omitempty"`
	Error           *string                `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Changeset) Reset() {
	*x = Changeset{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Changeset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changeset) ProtoMessage() {}

func (x *Changeset) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changeset.ProtoReflect.Descriptor instead.
func (*Changeset) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{5}
}

func (x *Changeset) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Changeset) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Changeset) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Changeset) GetToRemove() []string {
	if x != nil {
		return x.ToRemove
	}
	return nil
}

func (x *Changeset) GetRemovingModules() []*Module {
	if x != nil {
		return x.RemovingModules
	}
	return nil
}

func (x *Changeset) GetState() ChangesetState {
	if x != nil {
		return x.State
	}
	return ChangesetState_CHANGESET_STATE_UNSPECIFIED
}

func (x *Changeset) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ChangesetCommittedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetCommittedEvent) Reset() {
	*x = ChangesetCommittedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetCommittedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetCommittedEvent) ProtoMessage() {}

func (x *ChangesetCommittedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetCommittedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetCommittedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{6}
}

func (x *ChangesetCommittedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetCommittedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Changeset     *Changeset             `protobuf:"bytes,1,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetCommittedNotification) Reset() {
	*x = ChangesetCommittedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetCommittedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetCommittedNotification) ProtoMessage() {}

func (x *ChangesetCommittedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetCommittedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetCommittedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{7}
}

func (x *ChangesetCommittedNotification) GetChangeset() *Changeset {
	if x != nil {
		return x.Changeset
	}
	return nil
}

type ChangesetCreatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Changeset     *Changeset             `protobuf:"bytes,1,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetCreatedEvent) Reset() {
	*x = ChangesetCreatedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetCreatedEvent) ProtoMessage() {}

func (x *ChangesetCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetCreatedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{8}
}

func (x *ChangesetCreatedEvent) GetChangeset() *Changeset {
	if x != nil {
		return x.Changeset
	}
	return nil
}

type ChangesetCreatedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Changeset     *Changeset             `protobuf:"bytes,1,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetCreatedNotification) Reset() {
	*x = ChangesetCreatedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetCreatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetCreatedNotification) ProtoMessage() {}

func (x *ChangesetCreatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetCreatedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetCreatedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{9}
}

func (x *ChangesetCreatedNotification) GetChangeset() *Changeset {
	if x != nil {
		return x.Changeset
	}
	return nil
}

type ChangesetDrainedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetDrainedEvent) Reset() {
	*x = ChangesetDrainedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetDrainedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetDrainedEvent) ProtoMessage() {}

func (x *ChangesetDrainedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetDrainedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetDrainedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{10}
}

func (x *ChangesetDrainedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetDrainedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetDrainedNotification) Reset() {
	*x = ChangesetDrainedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetDrainedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetDrainedNotification) ProtoMessage() {}

func (x *ChangesetDrainedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetDrainedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetDrainedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{11}
}

func (x *ChangesetDrainedNotification) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetFailedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetFailedEvent) Reset() {
	*x = ChangesetFailedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetFailedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetFailedEvent) ProtoMessage() {}

func (x *ChangesetFailedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetFailedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetFailedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{12}
}

func (x *ChangesetFailedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetFailedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetFailedNotification) Reset() {
	*x = ChangesetFailedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetFailedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetFailedNotification) ProtoMessage() {}

func (x *ChangesetFailedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetFailedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetFailedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{13}
}

func (x *ChangesetFailedNotification) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ChangesetFailedNotification) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChangesetFinalizedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetFinalizedEvent) Reset() {
	*x = ChangesetFinalizedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetFinalizedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetFinalizedEvent) ProtoMessage() {}

func (x *ChangesetFinalizedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetFinalizedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetFinalizedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{14}
}

func (x *ChangesetFinalizedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetFinalizedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetFinalizedNotification) Reset() {
	*x = ChangesetFinalizedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetFinalizedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetFinalizedNotification) ProtoMessage() {}

func (x *ChangesetFinalizedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetFinalizedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetFinalizedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{15}
}

func (x *ChangesetFinalizedNotification) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetPreparedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetPreparedEvent) Reset() {
	*x = ChangesetPreparedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetPreparedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetPreparedEvent) ProtoMessage() {}

func (x *ChangesetPreparedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetPreparedEvent.ProtoReflect.Descriptor instead.
func (*ChangesetPreparedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{16}
}

func (x *ChangesetPreparedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetPreparedNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetPreparedNotification) Reset() {
	*x = ChangesetPreparedNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetPreparedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetPreparedNotification) ProtoMessage() {}

func (x *ChangesetPreparedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetPreparedNotification.ProtoReflect.Descriptor instead.
func (*ChangesetPreparedNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{17}
}

func (x *ChangesetPreparedNotification) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ChangesetRollingBackEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetRollingBackEvent) Reset() {
	*x = ChangesetRollingBackEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetRollingBackEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetRollingBackEvent) ProtoMessage() {}

func (x *ChangesetRollingBackEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetRollingBackEvent.ProtoReflect.Descriptor instead.
func (*ChangesetRollingBackEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{18}
}

func (x *ChangesetRollingBackEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ChangesetRollingBackEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChangesetRollingBackNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Changeset     *Changeset             `protobuf:"bytes,1,opt,name=changeset,proto3" json:"changeset,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangesetRollingBackNotification) Reset() {
	*x = ChangesetRollingBackNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangesetRollingBackNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesetRollingBackNotification) ProtoMessage() {}

func (x *ChangesetRollingBackNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesetRollingBackNotification.ProtoReflect.Descriptor instead.
func (*ChangesetRollingBackNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{19}
}

func (x *ChangesetRollingBackNotification) GetChangeset() *Changeset {
	if x != nil {
		return x.Changeset
	}
	return nil
}

func (x *ChangesetRollingBackNotification) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{20}
}

func (x *Config) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Config) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type DSNDatabaseConnector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Dsn           string                 `protobuf:"bytes,3,opt,name=dsn,proto3" json:"dsn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSNDatabaseConnector) Reset() {
	*x = DSNDatabaseConnector{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSNDatabaseConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSNDatabaseConnector) ProtoMessage() {}

func (x *DSNDatabaseConnector) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSNDatabaseConnector.ProtoReflect.Descriptor instead.
func (*DSNDatabaseConnector) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{21}
}

func (x *DSNDatabaseConnector) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *DSNDatabaseConnector) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DSNDatabaseConnector) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

// A Data structure.
type Data struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pos            *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments       []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Export         bool                   `protobuf:"varint,3,opt,name=export,proto3" json:"export,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TypeParameters []*TypeParameter       `protobuf:"bytes,5,rep,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	Fields         []*Field               `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Metadata       []*Metadata            `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{22}
}

func (x *Data) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Data) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Data) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Data) GetTypeParameters() []*TypeParameter {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

func (x *Data) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Data) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Runtime       *DatabaseRuntime       `protobuf:"bytes,31634,opt,name=runtime,proto3,oneof" json:"runtime,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{23}
}

func (x *Database) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Database) GetRuntime() *DatabaseRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Database) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Database) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DatabaseConnector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*DatabaseConnector_AwsiamAuthDatabaseConnector
	//	*DatabaseConnector_DsnDatabaseConnector
	Value         isDatabaseConnector_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConnector) Reset() {
	*x = DatabaseConnector{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConnector) ProtoMessage() {}

func (x *DatabaseConnector) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConnector.ProtoReflect.Descriptor instead.
func (*DatabaseConnector) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{24}
}

func (x *DatabaseConnector) GetValue() isDatabaseConnector_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DatabaseConnector) GetAwsiamAuthDatabaseConnector() *AWSIAMAuthDatabaseConnector {
	if x != nil {
		if x, ok := x.Value.(*DatabaseConnector_AwsiamAuthDatabaseConnector); ok {
			return x.AwsiamAuthDatabaseConnector
		}
	}
	return nil
}

func (x *DatabaseConnector) GetDsnDatabaseConnector() *DSNDatabaseConnector {
	if x != nil {
		if x, ok := x.Value.(*DatabaseConnector_DsnDatabaseConnector); ok {
			return x.DsnDatabaseConnector
		}
	}
	return nil
}

type isDatabaseConnector_Value interface {
	isDatabaseConnector_Value()
}

type DatabaseConnector_AwsiamAuthDatabaseConnector struct {
	AwsiamAuthDatabaseConnector *AWSIAMAuthDatabaseConnector `protobuf:"bytes,2,opt,name=awsiam_auth_database_connector,json=awsiamAuthDatabaseConnector,proto3,oneof"`
}

type DatabaseConnector_DsnDatabaseConnector struct {
	DsnDatabaseConnector *DSNDatabaseConnector `protobuf:"bytes,1,opt,name=dsn_database_connector,json=dsnDatabaseConnector,proto3,oneof"`
}

func (*DatabaseConnector_AwsiamAuthDatabaseConnector) isDatabaseConnector_Value() {}

func (*DatabaseConnector_DsnDatabaseConnector) isDatabaseConnector_Value() {}

type DatabaseRuntime struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Connections   *DatabaseRuntimeConnections `protobuf:"bytes,1,opt,name=connections,proto3,oneof" json:"connections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseRuntime) Reset() {
	*x = DatabaseRuntime{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRuntime) ProtoMessage() {}

func (x *DatabaseRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRuntime.ProtoReflect.Descriptor instead.
func (*DatabaseRuntime) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{25}
}

func (x *DatabaseRuntime) GetConnections() *DatabaseRuntimeConnections {
	if x != nil {
		return x.Connections
	}
	return nil
}

type DatabaseRuntimeConnections struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Read          *DatabaseConnector     `protobuf:"bytes,1,opt,name=read,proto3" json:"read,omitempty"`
	Write         *DatabaseConnector     `protobuf:"bytes,2,opt,name=write,proto3" json:"write,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseRuntimeConnections) Reset() {
	*x = DatabaseRuntimeConnections{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseRuntimeConnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRuntimeConnections) ProtoMessage() {}

func (x *DatabaseRuntimeConnections) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRuntimeConnections.ProtoReflect.Descriptor instead.
func (*DatabaseRuntimeConnections) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{26}
}

func (x *DatabaseRuntimeConnections) GetRead() *DatabaseConnector {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *DatabaseRuntimeConnections) GetWrite() *DatabaseConnector {
	if x != nil {
		return x.Write
	}
	return nil
}

// Decl represents user-defined data types in the schema grammar.
type Decl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Decl_Config
	//	*Decl_Data
	//	*Decl_Database
	//	*Decl_Enum
	//	*Decl_Secret
	//	*Decl_Topic
	//	*Decl_TypeAlias
	//	*Decl_Verb
	Value         isDecl_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decl) Reset() {
	*x = Decl{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decl) ProtoMessage() {}

func (x *Decl) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decl.ProtoReflect.Descriptor instead.
func (*Decl) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{27}
}

func (x *Decl) GetValue() isDecl_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Decl) GetConfig() *Config {
	if x != nil {
		if x, ok := x.Value.(*Decl_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *Decl) GetData() *Data {
	if x != nil {
		if x, ok := x.Value.(*Decl_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *Decl) GetDatabase() *Database {
	if x != nil {
		if x, ok := x.Value.(*Decl_Database); ok {
			return x.Database
		}
	}
	return nil
}

func (x *Decl) GetEnum() *Enum {
	if x != nil {
		if x, ok := x.Value.(*Decl_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *Decl) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Value.(*Decl_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

func (x *Decl) GetTopic() *Topic {
	if x != nil {
		if x, ok := x.Value.(*Decl_Topic); ok {
			return x.Topic
		}
	}
	return nil
}

func (x *Decl) GetTypeAlias() *TypeAlias {
	if x != nil {
		if x, ok := x.Value.(*Decl_TypeAlias); ok {
			return x.TypeAlias
		}
	}
	return nil
}

func (x *Decl) GetVerb() *Verb {
	if x != nil {
		if x, ok := x.Value.(*Decl_Verb); ok {
			return x.Verb
		}
	}
	return nil
}

type isDecl_Value interface {
	isDecl_Value()
}

type Decl_Config struct {
	Config *Config `protobuf:"bytes,6,opt,name=config,proto3,oneof"`
}

type Decl_Data struct {
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type Decl_Database struct {
	Database *Database `protobuf:"bytes,3,opt,name=database,proto3,oneof"`
}

type Decl_Enum struct {
	Enum *Enum `protobuf:"bytes,4,opt,name=enum,proto3,oneof"`
}

type Decl_Secret struct {
	Secret *Secret `protobuf:"bytes,7,opt,name=secret,proto3,oneof"`
}

type Decl_Topic struct {
	Topic *Topic `protobuf:"bytes,9,opt,name=topic,proto3,oneof"`
}

type Decl_TypeAlias struct {
	TypeAlias *TypeAlias `protobuf:"bytes,5,opt,name=type_alias,json=typeAlias,proto3,oneof"`
}

type Decl_Verb struct {
	Verb *Verb `protobuf:"bytes,2,opt,name=verb,proto3,oneof"`
}

func (*Decl_Config) isDecl_Value() {}

func (*Decl_Data) isDecl_Value() {}

func (*Decl_Database) isDecl_Value() {}

func (*Decl_Enum) isDecl_Value() {}

func (*Decl_Secret) isDecl_Value() {}

func (*Decl_Topic) isDecl_Value() {}

func (*Decl_TypeAlias) isDecl_Value() {}

func (*Decl_Verb) isDecl_Value() {}

type DeploymentCreatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Schema        *Module                `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Changeset     string                 `protobuf:"bytes,3,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentCreatedEvent) Reset() {
	*x = DeploymentCreatedEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentCreatedEvent) ProtoMessage() {}

func (x *DeploymentCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentCreatedEvent.ProtoReflect.Descriptor instead.
func (*DeploymentCreatedEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{28}
}

func (x *DeploymentCreatedEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeploymentCreatedEvent) GetSchema() *Module {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DeploymentCreatedEvent) GetChangeset() string {
	if x != nil {
		return x.Changeset
	}
	return ""
}

type DeploymentRuntimeEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       *RuntimeElement        `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Changeset     string                 `protobuf:"bytes,2,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentRuntimeEvent) Reset() {
	*x = DeploymentRuntimeEvent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentRuntimeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRuntimeEvent) ProtoMessage() {}

func (x *DeploymentRuntimeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRuntimeEvent.ProtoReflect.Descriptor instead.
func (*DeploymentRuntimeEvent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{29}
}

func (x *DeploymentRuntimeEvent) GetPayload() *RuntimeElement {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DeploymentRuntimeEvent) GetChangeset() string {
	if x != nil {
		return x.Changeset
	}
	return ""
}

type DeploymentRuntimeNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       *RuntimeElement        `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Changeset     string                 `protobuf:"bytes,2,opt,name=changeset,proto3" json:"changeset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentRuntimeNotification) Reset() {
	*x = DeploymentRuntimeNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentRuntimeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRuntimeNotification) ProtoMessage() {}

func (x *DeploymentRuntimeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRuntimeNotification.ProtoReflect.Descriptor instead.
func (*DeploymentRuntimeNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{30}
}

func (x *DeploymentRuntimeNotification) GetPayload() *RuntimeElement {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DeploymentRuntimeNotification) GetChangeset() string {
	if x != nil {
		return x.Changeset
	}
	return ""
}

type Enum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Export        bool                   `protobuf:"varint,3,opt,name=export,proto3" json:"export,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Variants      []*EnumVariant         `protobuf:"bytes,6,rep,name=variants,proto3" json:"variants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Enum) Reset() {
	*x = Enum{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{31}
}

func (x *Enum) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Enum) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Enum) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Enum) GetVariants() []*EnumVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type EnumVariant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value         *Value                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumVariant) Reset() {
	*x = EnumVariant{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumVariant) ProtoMessage() {}

func (x *EnumVariant) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumVariant.ProtoReflect.Descriptor instead.
func (*EnumVariant) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{32}
}

func (x *EnumVariant) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *EnumVariant) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *EnumVariant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumVariant) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Event_ChangesetCommittedEvent
	//	*Event_ChangesetCreatedEvent
	//	*Event_ChangesetDrainedEvent
	//	*Event_ChangesetFailedEvent
	//	*Event_ChangesetFinalizedEvent
	//	*Event_ChangesetPreparedEvent
	//	*Event_ChangesetRollingBackEvent
	//	*Event_DeploymentCreatedEvent
	//	*Event_DeploymentRuntimeEvent
	Value         isEvent_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{33}
}

func (x *Event) GetValue() isEvent_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Event) GetChangesetCommittedEvent() *ChangesetCommittedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetCommittedEvent); ok {
			return x.ChangesetCommittedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetCreatedEvent() *ChangesetCreatedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetCreatedEvent); ok {
			return x.ChangesetCreatedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetDrainedEvent() *ChangesetDrainedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetDrainedEvent); ok {
			return x.ChangesetDrainedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetFailedEvent() *ChangesetFailedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetFailedEvent); ok {
			return x.ChangesetFailedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetFinalizedEvent() *ChangesetFinalizedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetFinalizedEvent); ok {
			return x.ChangesetFinalizedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetPreparedEvent() *ChangesetPreparedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetPreparedEvent); ok {
			return x.ChangesetPreparedEvent
		}
	}
	return nil
}

func (x *Event) GetChangesetRollingBackEvent() *ChangesetRollingBackEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_ChangesetRollingBackEvent); ok {
			return x.ChangesetRollingBackEvent
		}
	}
	return nil
}

func (x *Event) GetDeploymentCreatedEvent() *DeploymentCreatedEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_DeploymentCreatedEvent); ok {
			return x.DeploymentCreatedEvent
		}
	}
	return nil
}

func (x *Event) GetDeploymentRuntimeEvent() *DeploymentRuntimeEvent {
	if x != nil {
		if x, ok := x.Value.(*Event_DeploymentRuntimeEvent); ok {
			return x.DeploymentRuntimeEvent
		}
	}
	return nil
}

type isEvent_Value interface {
	isEvent_Value()
}

type Event_ChangesetCommittedEvent struct {
	ChangesetCommittedEvent *ChangesetCommittedEvent `protobuf:"bytes,5,opt,name=changeset_committed_event,json=changesetCommittedEvent,proto3,oneof"`
}

type Event_ChangesetCreatedEvent struct {
	ChangesetCreatedEvent *ChangesetCreatedEvent `protobuf:"bytes,3,opt,name=changeset_created_event,json=changesetCreatedEvent,proto3,oneof"`
}

type Event_ChangesetDrainedEvent struct {
	ChangesetDrainedEvent *ChangesetDrainedEvent `protobuf:"bytes,6,opt,name=changeset_drained_event,json=changesetDrainedEvent,proto3,oneof"`
}

type Event_ChangesetFailedEvent struct {
	ChangesetFailedEvent *ChangesetFailedEvent `protobuf:"bytes,9,opt,name=changeset_failed_event,json=changesetFailedEvent,proto3,oneof"`
}

type Event_ChangesetFinalizedEvent struct {
	ChangesetFinalizedEvent *ChangesetFinalizedEvent `protobuf:"bytes,7,opt,name=changeset_finalized_event,json=changesetFinalizedEvent,proto3,oneof"`
}

type Event_ChangesetPreparedEvent struct {
	ChangesetPreparedEvent *ChangesetPreparedEvent `protobuf:"bytes,4,opt,name=changeset_prepared_event,json=changesetPreparedEvent,proto3,oneof"`
}

type Event_ChangesetRollingBackEvent struct {
	ChangesetRollingBackEvent *ChangesetRollingBackEvent `protobuf:"bytes,8,opt,name=changeset_rolling_back_event,json=changesetRollingBackEvent,proto3,oneof"`
}

type Event_DeploymentCreatedEvent struct {
	DeploymentCreatedEvent *DeploymentCreatedEvent `protobuf:"bytes,1,opt,name=deployment_created_event,json=deploymentCreatedEvent,proto3,oneof"`
}

type Event_DeploymentRuntimeEvent struct {
	DeploymentRuntimeEvent *DeploymentRuntimeEvent `protobuf:"bytes,2,opt,name=deployment_runtime_event,json=deploymentRuntimeEvent,proto3,oneof"`
}

func (*Event_ChangesetCommittedEvent) isEvent_Value() {}

func (*Event_ChangesetCreatedEvent) isEvent_Value() {}

func (*Event_ChangesetDrainedEvent) isEvent_Value() {}

func (*Event_ChangesetFailedEvent) isEvent_Value() {}

func (*Event_ChangesetFinalizedEvent) isEvent_Value() {}

func (*Event_ChangesetPreparedEvent) isEvent_Value() {}

func (*Event_ChangesetRollingBackEvent) isEvent_Value() {}

func (*Event_DeploymentCreatedEvent) isEvent_Value() {}

func (*Event_DeploymentRuntimeEvent) isEvent_Value() {}

type Field struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,3,rep,name=comments,proto3" json:"comments,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{34}
}

func (x *Field) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Field) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Field) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Float struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Float) Reset() {
	*x = Float{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float) ProtoMessage() {}

func (x *Float) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float.ProtoReflect.Descriptor instead.
func (*Float) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{35}
}

func (x *Float) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type FullSchemaNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        *Schema                `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Changesets    []*Changeset           `protobuf:"bytes,2,rep,name=changesets,proto3" json:"changesets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullSchemaNotification) Reset() {
	*x = FullSchemaNotification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullSchemaNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullSchemaNotification) ProtoMessage() {}

func (x *FullSchemaNotification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullSchemaNotification.ProtoReflect.Descriptor instead.
func (*FullSchemaNotification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{36}
}

func (x *FullSchemaNotification) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *FullSchemaNotification) GetChangesets() []*Changeset {
	if x != nil {
		return x.Changesets
	}
	return nil
}

type IngressPathComponent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*IngressPathComponent_IngressPathLiteral
	//	*IngressPathComponent_IngressPathParameter
	Value         isIngressPathComponent_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressPathComponent) Reset() {
	*x = IngressPathComponent{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressPathComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPathComponent) ProtoMessage() {}

func (x *IngressPathComponent) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPathComponent.ProtoReflect.Descriptor instead.
func (*IngressPathComponent) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{37}
}

func (x *IngressPathComponent) GetValue() isIngressPathComponent_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IngressPathComponent) GetIngressPathLiteral() *IngressPathLiteral {
	if x != nil {
		if x, ok := x.Value.(*IngressPathComponent_IngressPathLiteral); ok {
			return x.IngressPathLiteral
		}
	}
	return nil
}

func (x *IngressPathComponent) GetIngressPathParameter() *IngressPathParameter {
	if x != nil {
		if x, ok := x.Value.(*IngressPathComponent_IngressPathParameter); ok {
			return x.IngressPathParameter
		}
	}
	return nil
}

type isIngressPathComponent_Value interface {
	isIngressPathComponent_Value()
}

type IngressPathComponent_IngressPathLiteral struct {
	IngressPathLiteral *IngressPathLiteral `protobuf:"bytes,1,opt,name=ingress_path_literal,json=ingressPathLiteral,proto3,oneof"`
}

type IngressPathComponent_IngressPathParameter struct {
	IngressPathParameter *IngressPathParameter `protobuf:"bytes,2,opt,name=ingress_path_parameter,json=ingressPathParameter,proto3,oneof"`
}

func (*IngressPathComponent_IngressPathLiteral) isIngressPathComponent_Value() {}

func (*IngressPathComponent_IngressPathParameter) isIngressPathComponent_Value() {}

type IngressPathLiteral struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressPathLiteral) Reset() {
	*x = IngressPathLiteral{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressPathLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPathLiteral) ProtoMessage() {}

func (x *IngressPathLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPathLiteral.ProtoReflect.Descriptor instead.
func (*IngressPathLiteral) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{38}
}

func (x *IngressPathLiteral) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *IngressPathLiteral) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type IngressPathParameter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressPathParameter) Reset() {
	*x = IngressPathParameter{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressPathParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPathParameter) ProtoMessage() {}

func (x *IngressPathParameter) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPathParameter.ProtoReflect.Descriptor instead.
func (*IngressPathParameter) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{39}
}

func (x *IngressPathParameter) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *IngressPathParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Int struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int) Reset() {
	*x = Int{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int) ProtoMessage() {}

func (x *Int) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int.ProtoReflect.Descriptor instead.
func (*Int) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{40}
}

func (x *Int) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type IntValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Value         int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntValue) Reset() {
	*x = IntValue{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntValue) ProtoMessage() {}

func (x *IntValue) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntValue.ProtoReflect.Descriptor instead.
func (*IntValue) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{41}
}

func (x *IntValue) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *IntValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Map struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Key           *Type                  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Type                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{42}
}

func (x *Map) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Map) GetKey() *Type {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Map) GetValue() *Type {
	if x != nil {
		return x.Value
	}
	return nil
}

// Metadata represents a metadata Node in the schema grammar.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Metadata_Alias
	//	*Metadata_Artefact
	//	*Metadata_Calls
	//	*Metadata_Config
	//	*Metadata_CronJob
	//	*Metadata_Databases
	//	*Metadata_Encoding
	//	*Metadata_Ingress
	//	*Metadata_Partitions
	//	*Metadata_Publisher
	//	*Metadata_Retry
	//	*Metadata_SqlColumn
	//	*Metadata_SqlMigration
	//	*Metadata_SqlQuery
	//	*Metadata_Secrets
	//	*Metadata_Subscriber
	//	*Metadata_TypeMap
	Value         isMetadata_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{43}
}

func (x *Metadata) GetValue() isMetadata_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Metadata) GetAlias() *MetadataAlias {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Alias); ok {
			return x.Alias
		}
	}
	return nil
}

func (x *Metadata) GetArtefact() *MetadataArtefact {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Artefact); ok {
			return x.Artefact
		}
	}
	return nil
}

func (x *Metadata) GetCalls() *MetadataCalls {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Calls); ok {
			return x.Calls
		}
	}
	return nil
}

func (x *Metadata) GetConfig() *MetadataConfig {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *Metadata) GetCronJob() *MetadataCronJob {
	if x != nil {
		if x, ok := x.Value.(*Metadata_CronJob); ok {
			return x.CronJob
		}
	}
	return nil
}

func (x *Metadata) GetDatabases() *MetadataDatabases {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Databases); ok {
			return x.Databases
		}
	}
	return nil
}

func (x *Metadata) GetEncoding() *MetadataEncoding {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Encoding); ok {
			return x.Encoding
		}
	}
	return nil
}

func (x *Metadata) GetIngress() *MetadataIngress {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Ingress); ok {
			return x.Ingress
		}
	}
	return nil
}

func (x *Metadata) GetPartitions() *MetadataPartitions {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Partitions); ok {
			return x.Partitions
		}
	}
	return nil
}

func (x *Metadata) GetPublisher() *MetadataPublisher {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Publisher); ok {
			return x.Publisher
		}
	}
	return nil
}

func (x *Metadata) GetRetry() *MetadataRetry {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Retry); ok {
			return x.Retry
		}
	}
	return nil
}

func (x *Metadata) GetSqlColumn() *MetadataSQLColumn {
	if x != nil {
		if x, ok := x.Value.(*Metadata_SqlColumn); ok {
			return x.SqlColumn
		}
	}
	return nil
}

func (x *Metadata) GetSqlMigration() *MetadataSQLMigration {
	if x != nil {
		if x, ok := x.Value.(*Metadata_SqlMigration); ok {
			return x.SqlMigration
		}
	}
	return nil
}

func (x *Metadata) GetSqlQuery() *MetadataSQLQuery {
	if x != nil {
		if x, ok := x.Value.(*Metadata_SqlQuery); ok {
			return x.SqlQuery
		}
	}
	return nil
}

func (x *Metadata) GetSecrets() *MetadataSecrets {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Secrets); ok {
			return x.Secrets
		}
	}
	return nil
}

func (x *Metadata) GetSubscriber() *MetadataSubscriber {
	if x != nil {
		if x, ok := x.Value.(*Metadata_Subscriber); ok {
			return x.Subscriber
		}
	}
	return nil
}

func (x *Metadata) GetTypeMap() *MetadataTypeMap {
	if x != nil {
		if x, ok := x.Value.(*Metadata_TypeMap); ok {
			return x.TypeMap
		}
	}
	return nil
}

type isMetadata_Value interface {
	isMetadata_Value()
}

type Metadata_Alias struct {
	Alias *MetadataAlias `protobuf:"bytes,5,opt,name=alias,proto3,oneof"`
}

type Metadata_Artefact struct {
	Artefact *MetadataArtefact `protobuf:"bytes,14,opt,name=artefact,proto3,oneof"`
}

type Metadata_Calls struct {
	Calls *MetadataCalls `protobuf:"bytes,1,opt,name=calls,proto3,oneof"`
}

type Metadata_Config struct {
	Config *MetadataConfig `protobuf:"bytes,10,opt,name=config,proto3,oneof"`
}

type Metadata_CronJob struct {
	CronJob *MetadataCronJob `protobuf:"bytes,3,opt,name=cron_job,json=cronJob,proto3,oneof"`
}

type Metadata_Databases struct {
	Databases *MetadataDatabases `protobuf:"bytes,4,opt,name=databases,proto3,oneof"`
}

type Metadata_Encoding struct {
	Encoding *MetadataEncoding `protobuf:"bytes,9,opt,name=encoding,proto3,oneof"`
}

type Metadata_Ingress struct {
	Ingress *MetadataIngress `protobuf:"bytes,2,opt,name=ingress,proto3,oneof"`
}

type Metadata_Partitions struct {
	Partitions *MetadataPartitions `protobuf:"bytes,15,opt,name=partitions,proto3,oneof"`
}

type Metadata_Publisher struct {
	Publisher *MetadataPublisher `protobuf:"bytes,12,opt,name=publisher,proto3,oneof"`
}

type Metadata_Retry struct {
	Retry *MetadataRetry `protobuf:"bytes,6,opt,name=retry,proto3,oneof"`
}

type Metadata_SqlColumn struct {
	SqlColumn *MetadataSQLColumn `protobuf:"bytes,17,opt,name=sql_column,json=sqlColumn,proto3,oneof"`
}

type Metadata_SqlMigration struct {
	SqlMigration *MetadataSQLMigration `protobuf:"bytes,13,opt,name=sql_migration,json=sqlMigration,proto3,oneof"`
}

type Metadata_SqlQuery struct {
	SqlQuery *MetadataSQLQuery `protobuf:"bytes,16,opt,name=sql_query,json=sqlQuery,proto3,oneof"`
}

type Metadata_Secrets struct {
	Secrets *MetadataSecrets `protobuf:"bytes,11,opt,name=secrets,proto3,oneof"`
}

type Metadata_Subscriber struct {
	Subscriber *MetadataSubscriber `protobuf:"bytes,7,opt,name=subscriber,proto3,oneof"`
}

type Metadata_TypeMap struct {
	TypeMap *MetadataTypeMap `protobuf:"bytes,8,opt,name=type_map,json=typeMap,proto3,oneof"`
}

func (*Metadata_Alias) isMetadata_Value() {}

func (*Metadata_Artefact) isMetadata_Value() {}

func (*Metadata_Calls) isMetadata_Value() {}

func (*Metadata_Config) isMetadata_Value() {}

func (*Metadata_CronJob) isMetadata_Value() {}

func (*Metadata_Databases) isMetadata_Value() {}

func (*Metadata_Encoding) isMetadata_Value() {}

func (*Metadata_Ingress) isMetadata_Value() {}

func (*Metadata_Partitions) isMetadata_Value() {}

func (*Metadata_Publisher) isMetadata_Value() {}

func (*Metadata_Retry) isMetadata_Value() {}

func (*Metadata_SqlColumn) isMetadata_Value() {}

func (*Metadata_SqlMigration) isMetadata_Value() {}

func (*Metadata_SqlQuery) isMetadata_Value() {}

func (*Metadata_Secrets) isMetadata_Value() {}

func (*Metadata_Subscriber) isMetadata_Value() {}

func (*Metadata_TypeMap) isMetadata_Value() {}

type MetadataAlias struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Kind          AliasKind              `protobuf:"varint,2,opt,name=kind,proto3,enum=xyz.block.ftl.schema.v1.AliasKind" json:"kind,omitempty"`
	Alias         string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataAlias) Reset() {
	*x = MetadataAlias{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataAlias) ProtoMessage() {}

func (x *MetadataAlias) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataAlias.ProtoReflect.Descriptor instead.
func (*MetadataAlias) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{44}
}

func (x *MetadataAlias) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataAlias) GetKind() AliasKind {
	if x != nil {
		return x.Kind
	}
	return AliasKind_ALIAS_KIND_UNSPECIFIED
}

func (x *MetadataAlias) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type MetadataArtefact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Digest        string                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Executable    bool                   `protobuf:"varint,4,opt,name=executable,proto3" json:"executable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataArtefact) Reset() {
	*x = MetadataArtefact{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataArtefact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataArtefact) ProtoMessage() {}

func (x *MetadataArtefact) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataArtefact.ProtoReflect.Descriptor instead.
func (*MetadataArtefact) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{45}
}

func (x *MetadataArtefact) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataArtefact) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MetadataArtefact) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *MetadataArtefact) GetExecutable() bool {
	if x != nil {
		return x.Executable
	}
	return false
}

// MetadataCalls represents a metadata block with a list of calls.
type MetadataCalls struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Calls         []*Ref                 `protobuf:"bytes,2,rep,name=calls,proto3" json:"calls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataCalls) Reset() {
	*x = MetadataCalls{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataCalls) ProtoMessage() {}

func (x *MetadataCalls) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataCalls.ProtoReflect.Descriptor instead.
func (*MetadataCalls) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{46}
}

func (x *MetadataCalls) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataCalls) GetCalls() []*Ref {
	if x != nil {
		return x.Calls
	}
	return nil
}

// MetadataConfig represents a metadata block with a list of config items that are used.
type MetadataConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Config        []*Ref                 `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataConfig) Reset() {
	*x = MetadataConfig{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataConfig) ProtoMessage() {}

func (x *MetadataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataConfig.ProtoReflect.Descriptor instead.
func (*MetadataConfig) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{47}
}

func (x *MetadataConfig) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataConfig) GetConfig() []*Ref {
	if x != nil {
		return x.Config
	}
	return nil
}

type MetadataCronJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Cron          string                 `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataCronJob) Reset() {
	*x = MetadataCronJob{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataCronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataCronJob) ProtoMessage() {}

func (x *MetadataCronJob) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataCronJob.ProtoReflect.Descriptor instead.
func (*MetadataCronJob) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{48}
}

func (x *MetadataCronJob) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataCronJob) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

type MetadataDatabases struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Calls         []*Ref                 `protobuf:"bytes,2,rep,name=calls,proto3" json:"calls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataDatabases) Reset() {
	*x = MetadataDatabases{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataDatabases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataDatabases) ProtoMessage() {}

func (x *MetadataDatabases) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataDatabases.ProtoReflect.Descriptor instead.
func (*MetadataDatabases) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{49}
}

func (x *MetadataDatabases) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataDatabases) GetCalls() []*Ref {
	if x != nil {
		return x.Calls
	}
	return nil
}

type MetadataEncoding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Lenient       bool                   `protobuf:"varint,3,opt,name=lenient,proto3" json:"lenient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataEncoding) Reset() {
	*x = MetadataEncoding{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataEncoding) ProtoMessage() {}

func (x *MetadataEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataEncoding.ProtoReflect.Descriptor instead.
func (*MetadataEncoding) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{50}
}

func (x *MetadataEncoding) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataEncoding) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetadataEncoding) GetLenient() bool {
	if x != nil {
		return x.Lenient
	}
	return false
}

type MetadataIngress struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Pos           *Position               `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Type          string                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Method        string                  `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Path          []*IngressPathComponent `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataIngress) Reset() {
	*x = MetadataIngress{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataIngress) ProtoMessage() {}

func (x *MetadataIngress) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataIngress.ProtoReflect.Descriptor instead.
func (*MetadataIngress) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{51}
}

func (x *MetadataIngress) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataIngress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetadataIngress) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MetadataIngress) GetPath() []*IngressPathComponent {
	if x != nil {
		return x.Path
	}
	return nil
}

type MetadataPartitions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Partitions    int64                  `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPartitions) Reset() {
	*x = MetadataPartitions{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPartitions) ProtoMessage() {}

func (x *MetadataPartitions) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPartitions.ProtoReflect.Descriptor instead.
func (*MetadataPartitions) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{52}
}

func (x *MetadataPartitions) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataPartitions) GetPartitions() int64 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

type MetadataPublisher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Topics        []*Ref                 `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPublisher) Reset() {
	*x = MetadataPublisher{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPublisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPublisher) ProtoMessage() {}

func (x *MetadataPublisher) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPublisher.ProtoReflect.Descriptor instead.
func (*MetadataPublisher) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{53}
}

func (x *MetadataPublisher) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataPublisher) GetTopics() []*Ref {
	if x != nil {
		return x.Topics
	}
	return nil
}

type MetadataRetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Count         *int64                 `protobuf:"varint,2,opt,name=count,proto3,oneof" json:"count,omitempty"`
	MinBackoff    string                 `protobuf:"bytes,3,opt,name=min_backoff,json=minBackoff,proto3" json:"min_backoff,omitempty"`
	MaxBackoff    string                 `protobuf:"bytes,4,opt,name=max_backoff,json=maxBackoff,proto3" json:"max_backoff,omitempty"`
	Catch         *Ref                   `protobuf:"bytes,5,opt,name=catch,proto3,oneof" json:"catch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataRetry) Reset() {
	*x = MetadataRetry{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataRetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataRetry) ProtoMessage() {}

func (x *MetadataRetry) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataRetry.ProtoReflect.Descriptor instead.
func (*MetadataRetry) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{54}
}

func (x *MetadataRetry) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataRetry) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MetadataRetry) GetMinBackoff() string {
	if x != nil {
		return x.MinBackoff
	}
	return ""
}

func (x *MetadataRetry) GetMaxBackoff() string {
	if x != nil {
		return x.MaxBackoff
	}
	return ""
}

func (x *MetadataRetry) GetCatch() *Ref {
	if x != nil {
		return x.Catch
	}
	return nil
}

// MetadataSQLColumn designates a database column.
type MetadataSQLColumn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSQLColumn) Reset() {
	*x = MetadataSQLColumn{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSQLColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSQLColumn) ProtoMessage() {}

func (x *MetadataSQLColumn) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSQLColumn.ProtoReflect.Descriptor instead.
func (*MetadataSQLColumn) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{55}
}

func (x *MetadataSQLColumn) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataSQLColumn) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MetadataSQLColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MetadataSQLMigration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Digest        string                 `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSQLMigration) Reset() {
	*x = MetadataSQLMigration{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSQLMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSQLMigration) ProtoMessage() {}

func (x *MetadataSQLMigration) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSQLMigration.ProtoReflect.Descriptor instead.
func (*MetadataSQLMigration) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{56}
}

func (x *MetadataSQLMigration) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataSQLMigration) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// MetadataSQLQuery designates a query verb; a verb generated from a SQL query.
type MetadataSQLQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Query         string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSQLQuery) Reset() {
	*x = MetadataSQLQuery{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSQLQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSQLQuery) ProtoMessage() {}

func (x *MetadataSQLQuery) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSQLQuery.ProtoReflect.Descriptor instead.
func (*MetadataSQLQuery) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{57}
}

func (x *MetadataSQLQuery) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataSQLQuery) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *MetadataSQLQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// MetadataSecrets represents a metadata block with a list of config items that are used.
type MetadataSecrets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Secrets       []*Ref                 `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSecrets) Reset() {
	*x = MetadataSecrets{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSecrets) ProtoMessage() {}

func (x *MetadataSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSecrets.ProtoReflect.Descriptor instead.
func (*MetadataSecrets) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{58}
}

func (x *MetadataSecrets) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataSecrets) GetSecrets() []*Ref {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type MetadataSubscriber struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Topic         *Ref                   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	FromOffset    FromOffset             `protobuf:"varint,3,opt,name=from_offset,json=fromOffset,proto3,enum=xyz.block.ftl.schema.v1.FromOffset" json:"from_offset,omitempty"`
	DeadLetter    bool                   `protobuf:"varint,4,opt,name=dead_letter,json=deadLetter,proto3" json:"dead_letter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSubscriber) Reset() {
	*x = MetadataSubscriber{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSubscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSubscriber) ProtoMessage() {}

func (x *MetadataSubscriber) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSubscriber.ProtoReflect.Descriptor instead.
func (*MetadataSubscriber) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{59}
}

func (x *MetadataSubscriber) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataSubscriber) GetTopic() *Ref {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MetadataSubscriber) GetFromOffset() FromOffset {
	if x != nil {
		return x.FromOffset
	}
	return FromOffset_FROM_OFFSET_UNSPECIFIED
}

func (x *MetadataSubscriber) GetDeadLetter() bool {
	if x != nil {
		return x.DeadLetter
	}
	return false
}

type MetadataTypeMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Runtime       string                 `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	NativeName    string                 `protobuf:"bytes,3,opt,name=native_name,json=nativeName,proto3" json:"native_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataTypeMap) Reset() {
	*x = MetadataTypeMap{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataTypeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataTypeMap) ProtoMessage() {}

func (x *MetadataTypeMap) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataTypeMap.ProtoReflect.Descriptor instead.
func (*MetadataTypeMap) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{60}
}

func (x *MetadataTypeMap) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MetadataTypeMap) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *MetadataTypeMap) GetNativeName() string {
	if x != nil {
		return x.NativeName
	}
	return ""
}

type Module struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Builtin       bool                   `protobuf:"varint,3,opt,name=builtin,proto3" json:"builtin,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Decls         []*Decl                `protobuf:"bytes,5,rep,name=decls,proto3" json:"decls,omitempty"`
	Runtime       *ModuleRuntime         `protobuf:"bytes,31634,opt,name=runtime,proto3" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Module) Reset() {
	*x = Module{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{61}
}

func (x *Module) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Module) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Module) GetBuiltin() bool {
	if x != nil {
		return x.Builtin
	}
	return false
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Module) GetDecls() []*Decl {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *Module) GetRuntime() *ModuleRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

// ModuleRuntime is runtime configuration for a module that can be dynamically updated.
type ModuleRuntime struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Base          *ModuleRuntimeBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Scaling       *ModuleRuntimeScaling    `protobuf:"bytes,2,opt,name=scaling,proto3,oneof" json:"scaling,omitempty"`
	Deployment    *ModuleRuntimeDeployment `protobuf:"bytes,3,opt,name=deployment,proto3,oneof" json:"deployment,omitempty"`
	Runner        *ModuleRuntimeRunner     `protobuf:"bytes,4,opt,name=runner,proto3,oneof" json:"runner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleRuntime) Reset() {
	*x = ModuleRuntime{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRuntime) ProtoMessage() {}

func (x *ModuleRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRuntime.ProtoReflect.Descriptor instead.
func (*ModuleRuntime) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{62}
}

func (x *ModuleRuntime) GetBase() *ModuleRuntimeBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ModuleRuntime) GetScaling() *ModuleRuntimeScaling {
	if x != nil {
		return x.Scaling
	}
	return nil
}

func (x *ModuleRuntime) GetDeployment() *ModuleRuntimeDeployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *ModuleRuntime) GetRunner() *ModuleRuntimeRunner {
	if x != nil {
		return x.Runner
	}
	return nil
}

type ModuleRuntimeBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Os            *string                `protobuf:"bytes,3,opt,name=os,proto3,oneof" json:"os,omitempty"`
	Arch          *string                `protobuf:"bytes,4,opt,name=arch,proto3,oneof" json:"arch,omitempty"`
	Image         *string                `protobuf:"bytes,5,opt,name=image,proto3,oneof" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleRuntimeBase) Reset() {
	*x = ModuleRuntimeBase{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRuntimeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRuntimeBase) ProtoMessage() {}

func (x *ModuleRuntimeBase) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRuntimeBase.ProtoReflect.Descriptor instead.
func (*ModuleRuntimeBase) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{63}
}

func (x *ModuleRuntimeBase) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ModuleRuntimeBase) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ModuleRuntimeBase) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *ModuleRuntimeBase) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *ModuleRuntimeBase) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

type ModuleRuntimeDeployment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentKey string                 `protobuf:"bytes,2,opt,name=deployment_key,json=deploymentKey,proto3" json:"deployment_key,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ActivatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=activated_at,json=activatedAt,proto3,oneof" json:"activated_at,omitempty"`
	State         DeploymentState        `protobuf:"varint,5,opt,name=state,proto3,enum=xyz.block.ftl.schema.v1.DeploymentState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleRuntimeDeployment) Reset() {
	*x = ModuleRuntimeDeployment{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRuntimeDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRuntimeDeployment) ProtoMessage() {}

func (x *ModuleRuntimeDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRuntimeDeployment.ProtoReflect.Descriptor instead.
func (*ModuleRuntimeDeployment) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{64}
}

func (x *ModuleRuntimeDeployment) GetDeploymentKey() string {
	if x != nil {
		return x.DeploymentKey
	}
	return ""
}

func (x *ModuleRuntimeDeployment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ModuleRuntimeDeployment) GetActivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *ModuleRuntimeDeployment) GetState() DeploymentState {
	if x != nil {
		return x.State
	}
	return DeploymentState_DEPLOYMENT_STATE_UNSPECIFIED
}

type ModuleRuntimeRunner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleRuntimeRunner) Reset() {
	*x = ModuleRuntimeRunner{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRuntimeRunner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRuntimeRunner) ProtoMessage() {}

func (x *ModuleRuntimeRunner) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRuntimeRunner.ProtoReflect.Descriptor instead.
func (*ModuleRuntimeRunner) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{65}
}

func (x *ModuleRuntimeRunner) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type ModuleRuntimeScaling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinReplicas   int32                  `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleRuntimeScaling) Reset() {
	*x = ModuleRuntimeScaling{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRuntimeScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRuntimeScaling) ProtoMessage() {}

func (x *ModuleRuntimeScaling) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRuntimeScaling.ProtoReflect.Descriptor instead.
func (*ModuleRuntimeScaling) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{66}
}

func (x *ModuleRuntimeScaling) GetMinReplicas() int32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

type Notification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Notification_ChangesetCommittedNotification
	//	*Notification_ChangesetCreatedNotification
	//	*Notification_ChangesetDrainedNotification
	//	*Notification_ChangesetFailedNotification
	//	*Notification_ChangesetFinalizedNotification
	//	*Notification_ChangesetPreparedNotification
	//	*Notification_ChangesetRollingBackNotification
	//	*Notification_DeploymentRuntimeNotification
	//	*Notification_FullSchemaNotification
	Value         isNotification_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{67}
}

func (x *Notification) GetValue() isNotification_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Notification) GetChangesetCommittedNotification() *ChangesetCommittedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetCommittedNotification); ok {
			return x.ChangesetCommittedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetCreatedNotification() *ChangesetCreatedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetCreatedNotification); ok {
			return x.ChangesetCreatedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetDrainedNotification() *ChangesetDrainedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetDrainedNotification); ok {
			return x.ChangesetDrainedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetFailedNotification() *ChangesetFailedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetFailedNotification); ok {
			return x.ChangesetFailedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetFinalizedNotification() *ChangesetFinalizedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetFinalizedNotification); ok {
			return x.ChangesetFinalizedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetPreparedNotification() *ChangesetPreparedNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetPreparedNotification); ok {
			return x.ChangesetPreparedNotification
		}
	}
	return nil
}

func (x *Notification) GetChangesetRollingBackNotification() *ChangesetRollingBackNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_ChangesetRollingBackNotification); ok {
			return x.ChangesetRollingBackNotification
		}
	}
	return nil
}

func (x *Notification) GetDeploymentRuntimeNotification() *DeploymentRuntimeNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_DeploymentRuntimeNotification); ok {
			return x.DeploymentRuntimeNotification
		}
	}
	return nil
}

func (x *Notification) GetFullSchemaNotification() *FullSchemaNotification {
	if x != nil {
		if x, ok := x.Value.(*Notification_FullSchemaNotification); ok {
			return x.FullSchemaNotification
		}
	}
	return nil
}

type isNotification_Value interface {
	isNotification_Value()
}

type Notification_ChangesetCommittedNotification struct {
	ChangesetCommittedNotification *ChangesetCommittedNotification `protobuf:"bytes,5,opt,name=changeset_committed_notification,json=changesetCommittedNotification,proto3,oneof"`
}

type Notification_ChangesetCreatedNotification struct {
	ChangesetCreatedNotification *ChangesetCreatedNotification `protobuf:"bytes,3,opt,name=changeset_created_notification,json=changesetCreatedNotification,proto3,oneof"`
}

type Notification_ChangesetDrainedNotification struct {
	ChangesetDrainedNotification *ChangesetDrainedNotification `protobuf:"bytes,6,opt,name=changeset_drained_notification,json=changesetDrainedNotification,proto3,oneof"`
}

type Notification_ChangesetFailedNotification struct {
	ChangesetFailedNotification *ChangesetFailedNotification `protobuf:"bytes,9,opt,name=changeset_failed_notification,json=changesetFailedNotification,proto3,oneof"`
}

type Notification_ChangesetFinalizedNotification struct {
	ChangesetFinalizedNotification *ChangesetFinalizedNotification `protobuf:"bytes,7,opt,name=changeset_finalized_notification,json=changesetFinalizedNotification,proto3,oneof"`
}

type Notification_ChangesetPreparedNotification struct {
	ChangesetPreparedNotification *ChangesetPreparedNotification `protobuf:"bytes,4,opt,name=changeset_prepared_notification,json=changesetPreparedNotification,proto3,oneof"`
}

type Notification_ChangesetRollingBackNotification struct {
	ChangesetRollingBackNotification *ChangesetRollingBackNotification `protobuf:"bytes,8,opt,name=changeset_rolling_back_notification,json=changesetRollingBackNotification,proto3,oneof"`
}

type Notification_DeploymentRuntimeNotification struct {
	DeploymentRuntimeNotification *DeploymentRuntimeNotification `protobuf:"bytes,2,opt,name=deployment_runtime_notification,json=deploymentRuntimeNotification,proto3,oneof"`
}

type Notification_FullSchemaNotification struct {
	FullSchemaNotification *FullSchemaNotification `protobuf:"bytes,1,opt,name=full_schema_notification,json=fullSchemaNotification,proto3,oneof"`
}

func (*Notification_ChangesetCommittedNotification) isNotification_Value() {}

func (*Notification_ChangesetCreatedNotification) isNotification_Value() {}

func (*Notification_ChangesetDrainedNotification) isNotification_Value() {}

func (*Notification_ChangesetFailedNotification) isNotification_Value() {}

func (*Notification_ChangesetFinalizedNotification) isNotification_Value() {}

func (*Notification_ChangesetPreparedNotification) isNotification_Value() {}

func (*Notification_ChangesetRollingBackNotification) isNotification_Value() {}

func (*Notification_DeploymentRuntimeNotification) isNotification_Value() {}

func (*Notification_FullSchemaNotification) isNotification_Value() {}

// Optional represents a Type whose value may be optional.
type Optional struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Type          *Type                  `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional) Reset() {
	*x = Optional{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional) ProtoMessage() {}

func (x *Optional) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional.ProtoReflect.Descriptor instead.
func (*Optional) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{68}
}

func (x *Optional) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Optional) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Line          int64                  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column        int64                  `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{69}
}

func (x *Position) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

// Ref is an untyped reference to a symbol.
type Ref struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Pos            *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Module         string                 `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeParameters []*Type                `protobuf:"bytes,4,rep,name=type_parameters,json=typeParameters,proto3" json:"type_parameters,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ref) Reset() {
	*x = Ref{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{70}
}

func (x *Ref) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Ref) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Ref) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ref) GetTypeParameters() []*Type {
	if x != nil {
		return x.TypeParameters
	}
	return nil
}

type Runtime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Runtime_DatabaseRuntime
	//	*Runtime_ModuleRuntimeDeployment
	//	*Runtime_ModuleRuntimeRunner
	//	*Runtime_ModuleRuntimeScaling
	//	*Runtime_TopicRuntime
	//	*Runtime_VerbRuntime
	Value         isRuntime_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{71}
}

func (x *Runtime) GetValue() isRuntime_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Runtime) GetDatabaseRuntime() *DatabaseRuntime {
	if x != nil {
		if x, ok := x.Value.(*Runtime_DatabaseRuntime); ok {
			return x.DatabaseRuntime
		}
	}
	return nil
}

func (x *Runtime) GetModuleRuntimeDeployment() *ModuleRuntimeDeployment {
	if x != nil {
		if x, ok := x.Value.(*Runtime_ModuleRuntimeDeployment); ok {
			return x.ModuleRuntimeDeployment
		}
	}
	return nil
}

func (x *Runtime) GetModuleRuntimeRunner() *ModuleRuntimeRunner {
	if x != nil {
		if x, ok := x.Value.(*Runtime_ModuleRuntimeRunner); ok {
			return x.ModuleRuntimeRunner
		}
	}
	return nil
}

func (x *Runtime) GetModuleRuntimeScaling() *ModuleRuntimeScaling {
	if x != nil {
		if x, ok := x.Value.(*Runtime_ModuleRuntimeScaling); ok {
			return x.ModuleRuntimeScaling
		}
	}
	return nil
}

func (x *Runtime) GetTopicRuntime() *TopicRuntime {
	if x != nil {
		if x, ok := x.Value.(*Runtime_TopicRuntime); ok {
			return x.TopicRuntime
		}
	}
	return nil
}

func (x *Runtime) GetVerbRuntime() *VerbRuntime {
	if x != nil {
		if x, ok := x.Value.(*Runtime_VerbRuntime); ok {
			return x.VerbRuntime
		}
	}
	return nil
}

type isRuntime_Value interface {
	isRuntime_Value()
}

type Runtime_DatabaseRuntime struct {
	DatabaseRuntime *DatabaseRuntime `protobuf:"bytes,6,opt,name=database_runtime,json=databaseRuntime,proto3,oneof"`
}

type Runtime_ModuleRuntimeDeployment struct {
	ModuleRuntimeDeployment *ModuleRuntimeDeployment `protobuf:"bytes,1,opt,name=module_runtime_deployment,json=moduleRuntimeDeployment,proto3,oneof"`
}

type Runtime_ModuleRuntimeRunner struct {
	ModuleRuntimeRunner *ModuleRuntimeRunner `protobuf:"bytes,3,opt,name=module_runtime_runner,json=moduleRuntimeRunner,proto3,oneof"`
}

type Runtime_ModuleRuntimeScaling struct {
	ModuleRuntimeScaling *ModuleRuntimeScaling `protobuf:"bytes,2,opt,name=module_runtime_scaling,json=moduleRuntimeScaling,proto3,oneof"`
}

type Runtime_TopicRuntime struct {
	TopicRuntime *TopicRuntime `protobuf:"bytes,5,opt,name=topic_runtime,json=topicRuntime,proto3,oneof"`
}

type Runtime_VerbRuntime struct {
	VerbRuntime *VerbRuntime `protobuf:"bytes,4,opt,name=verb_runtime,json=verbRuntime,proto3,oneof"`
}

func (*Runtime_DatabaseRuntime) isRuntime_Value() {}

func (*Runtime_ModuleRuntimeDeployment) isRuntime_Value() {}

func (*Runtime_ModuleRuntimeRunner) isRuntime_Value() {}

func (*Runtime_ModuleRuntimeScaling) isRuntime_Value() {}

func (*Runtime_TopicRuntime) isRuntime_Value() {}

func (*Runtime_VerbRuntime) isRuntime_Value() {}

type RuntimeElement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Element       *Runtime               `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	Deployment    string                 `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeElement) Reset() {
	*x = RuntimeElement{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeElement) ProtoMessage() {}

func (x *RuntimeElement) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeElement.ProtoReflect.Descriptor instead.
func (*RuntimeElement) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{72}
}

func (x *RuntimeElement) GetElement() *Runtime {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *RuntimeElement) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *RuntimeElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Modules       []*Module              `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{73}
}

func (x *Schema) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Schema) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// SchemaState is the schema service state as persisted in Raft
type SchemaState struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Modules          []*Module                 `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	Changesets       []*Changeset              `protobuf:"bytes,2,rep,name=changesets,proto3" json:"changesets,omitempty"`
	ChangesetEvents  []*DeploymentRuntimeEvent `protobuf:"bytes,3,rep,name=changeset_events,json=changesetEvents,proto3" json:"changeset_events,omitempty"`
	DeploymentEvents []*DeploymentRuntimeEvent `protobuf:"bytes,4,rep,name=deployment_events,json=deploymentEvents,proto3" json:"deployment_events,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SchemaState) Reset() {
	*x = SchemaState{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaState) ProtoMessage() {}

func (x *SchemaState) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaState.ProtoReflect.Descriptor instead.
func (*SchemaState) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{74}
}

func (x *SchemaState) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *SchemaState) GetChangesets() []*Changeset {
	if x != nil {
		return x.Changesets
	}
	return nil
}

func (x *SchemaState) GetChangesetEvents() []*DeploymentRuntimeEvent {
	if x != nil {
		return x.ChangesetEvents
	}
	return nil
}

func (x *SchemaState) GetDeploymentEvents() []*DeploymentRuntimeEvent {
	if x != nil {
		return x.DeploymentEvents
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{75}
}

func (x *Secret) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Secret) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type String struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *String) Reset() {
	*x = String{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{76}
}

func (x *String) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type StringValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{77}
}

func (x *StringValue) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Time struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Time) Reset() {
	*x = Time{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{78}
}

func (x *Time) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Topic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Runtime       *TopicRuntime          `protobuf:"bytes,31634,opt,name=runtime,proto3,oneof" json:"runtime,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Export        bool                   `protobuf:"varint,3,opt,name=export,proto3" json:"export,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Event         *Type                  `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{79}
}

func (x *Topic) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Topic) GetRuntime() *TopicRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Topic) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Topic) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetEvent() *Type {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Topic) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TopicRuntime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KafkaBrokers  []string               `protobuf:"bytes,1,rep,name=kafka_brokers,json=kafkaBrokers,proto3" json:"kafka_brokers,omitempty"`
	TopicId       string                 `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicRuntime) Reset() {
	*x = TopicRuntime{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicRuntime) ProtoMessage() {}

func (x *TopicRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicRuntime.ProtoReflect.Descriptor instead.
func (*TopicRuntime) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{80}
}

func (x *TopicRuntime) GetKafkaBrokers() []string {
	if x != nil {
		return x.KafkaBrokers
	}
	return nil
}

func (x *TopicRuntime) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

// Type represents a Type Node in the schema grammar.
type Type struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Type_Any
	//	*Type_Array
	//	*Type_Bool
	//	*Type_Bytes
	//	*Type_Float
	//	*Type_Int
	//	*Type_Map
	//	*Type_Optional
	//	*Type_Ref
	//	*Type_String_
	//	*Type_Time
	//	*Type_Unit
	Value         isType_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Type) Reset() {
	*x = Type{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{81}
}

func (x *Type) GetValue() isType_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Type) GetAny() *Any {
	if x != nil {
		if x, ok := x.Value.(*Type_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *Type) GetArray() *Array {
	if x != nil {
		if x, ok := x.Value.(*Type_Array); ok {
			return x.Array
		}
	}
	return nil
}

func (x *Type) GetBool() *Bool {
	if x != nil {
		if x, ok := x.Value.(*Type_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *Type) GetBytes() *Bytes {
	if x != nil {
		if x, ok := x.Value.(*Type_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *Type) GetFloat() *Float {
	if x != nil {
		if x, ok := x.Value.(*Type_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *Type) GetInt() *Int {
	if x != nil {
		if x, ok := x.Value.(*Type_Int); ok {
			return x.Int
		}
	}
	return nil
}

func (x *Type) GetMap() *Map {
	if x != nil {
		if x, ok := x.Value.(*Type_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *Type) GetOptional() *Optional {
	if x != nil {
		if x, ok := x.Value.(*Type_Optional); ok {
			return x.Optional
		}
	}
	return nil
}

func (x *Type) GetRef() *Ref {
	if x != nil {
		if x, ok := x.Value.(*Type_Ref); ok {
			return x.Ref
		}
	}
	return nil
}

func (x *Type) GetString_() *String {
	if x != nil {
		if x, ok := x.Value.(*Type_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *Type) GetTime() *Time {
	if x != nil {
		if x, ok := x.Value.(*Type_Time); ok {
			return x.Time
		}
	}
	return nil
}

func (x *Type) GetUnit() *Unit {
	if x != nil {
		if x, ok := x.Value.(*Type_Unit); ok {
			return x.Unit
		}
	}
	return nil
}

type isType_Value interface {
	isType_Value()
}

type Type_Any struct {
	Any *Any `protobuf:"bytes,9,opt,name=any,proto3,oneof"`
}

type Type_Array struct {
	Array *Array `protobuf:"bytes,7,opt,name=array,proto3,oneof"`
}

type Type_Bool struct {
	Bool *Bool `protobuf:"bytes,5,opt,name=bool,proto3,oneof"`
}

type Type_Bytes struct {
	Bytes *Bytes `protobuf:"bytes,4,opt,name=bytes,proto3,oneof"`
}

type Type_Float struct {
	Float *Float `protobuf:"bytes,2,opt,name=float,proto3,oneof"`
}

type Type_Int struct {
	Int *Int `protobuf:"bytes,1,opt,name=int,proto3,oneof"`
}

type Type_Map struct {
	Map *Map `protobuf:"bytes,8,opt,name=map,proto3,oneof"`
}

type Type_Optional struct {
	Optional *Optional `protobuf:"bytes,12,opt,name=optional,proto3,oneof"`
}

type Type_Ref struct {
	Ref *Ref `protobuf:"bytes,11,opt,name=ref,proto3,oneof"`
}

type Type_String_ struct {
	String_ *String `protobuf:"bytes,3,opt,name=string,proto3,oneof"`
}

type Type_Time struct {
	Time *Time `protobuf:"bytes,6,opt,name=time,proto3,oneof"`
}

type Type_Unit struct {
	Unit *Unit `protobuf:"bytes,10,opt,name=unit,proto3,oneof"`
}

func (*Type_Any) isType_Value() {}

func (*Type_Array) isType_Value() {}

func (*Type_Bool) isType_Value() {}

func (*Type_Bytes) isType_Value() {}

func (*Type_Float) isType_Value() {}

func (*Type_Int) isType_Value() {}

func (*Type_Map) isType_Value() {}

func (*Type_Optional) isType_Value() {}

func (*Type_Ref) isType_Value() {}

func (*Type_String_) isType_Value() {}

func (*Type_Time) isType_Value() {}

func (*Type_Unit) isType_Value() {}

type TypeAlias struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Export        bool                   `protobuf:"varint,3,opt,name=export,proto3" json:"export,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeAlias) Reset() {
	*x = TypeAlias{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAlias) ProtoMessage() {}

func (x *TypeAlias) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAlias.ProtoReflect.Descriptor instead.
func (*TypeAlias) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{82}
}

func (x *TypeAlias) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *TypeAlias) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *TypeAlias) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *TypeAlias) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeAlias) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TypeAlias) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TypeParameter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeParameter) Reset() {
	*x = TypeParameter{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeParameter) ProtoMessage() {}

func (x *TypeParameter) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeParameter.ProtoReflect.Descriptor instead.
func (*TypeParameter) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{83}
}

func (x *TypeParameter) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *TypeParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TypeValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Value         *Type                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeValue) Reset() {
	*x = TypeValue{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeValue) ProtoMessage() {}

func (x *TypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeValue.ProtoReflect.Descriptor instead.
func (*TypeValue) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{84}
}

func (x *TypeValue) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *TypeValue) GetValue() *Type {
	if x != nil {
		return x.Value
	}
	return nil
}

type Unit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unit) Reset() {
	*x = Unit{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{85}
}

func (x *Unit) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Value represents a value Node in the schema grammar.
type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Value_IntValue
	//	*Value_StringValue
	//	*Value_TypeValue
	Value         isValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{86}
}

func (x *Value) GetValue() isValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetIntValue() *IntValue {
	if x != nil {
		if x, ok := x.Value.(*Value_IntValue); ok {
			return x.IntValue
		}
	}
	return nil
}

func (x *Value) GetStringValue() *StringValue {
	if x != nil {
		if x, ok := x.Value.(*Value_StringValue); ok {
			return x.StringValue
		}
	}
	return nil
}

func (x *Value) GetTypeValue() *TypeValue {
	if x != nil {
		if x, ok := x.Value.(*Value_TypeValue); ok {
			return x.TypeValue
		}
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_IntValue struct {
	IntValue *IntValue `protobuf:"bytes,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue *StringValue `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_TypeValue struct {
	TypeValue *TypeValue `protobuf:"bytes,3,opt,name=type_value,json=typeValue,proto3,oneof"`
}

func (*Value_IntValue) isValue_Value() {}

func (*Value_StringValue) isValue_Value() {}

func (*Value_TypeValue) isValue_Value() {}

type Verb struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *Position              `protobuf:"bytes,1,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Comments      []string               `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Export        bool                   `protobuf:"varint,3,opt,name=export,proto3" json:"export,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Request       *Type                  `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	Response      *Type                  `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
	Metadata      []*Metadata            `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Runtime       *VerbRuntime           `protobuf:"bytes,31634,opt,name=runtime,proto3,oneof" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Verb) Reset() {
	*x = Verb{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Verb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verb) ProtoMessage() {}

func (x *Verb) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verb.ProtoReflect.Descriptor instead.
func (*Verb) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{87}
}

func (x *Verb) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Verb) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Verb) GetExport() bool {
	if x != nil {
		return x.Export
	}
	return false
}

func (x *Verb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Verb) GetRequest() *Type {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Verb) GetResponse() *Type {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Verb) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Verb) GetRuntime() *VerbRuntime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

type VerbRuntime struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Subscription  *VerbRuntimeSubscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerbRuntime) Reset() {
	*x = VerbRuntime{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerbRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerbRuntime) ProtoMessage() {}

func (x *VerbRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerbRuntime.ProtoReflect.Descriptor instead.
func (*VerbRuntime) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{88}
}

func (x *VerbRuntime) GetSubscription() *VerbRuntimeSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type VerbRuntimeSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KafkaBrokers  []string               `protobuf:"bytes,1,rep,name=kafka_brokers,json=kafkaBrokers,proto3" json:"kafka_brokers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerbRuntimeSubscription) Reset() {
	*x = VerbRuntimeSubscription{}
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerbRuntimeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerbRuntimeSubscription) ProtoMessage() {}

func (x *VerbRuntimeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerbRuntimeSubscription.ProtoReflect.Descriptor instead.
func (*VerbRuntimeSubscription) Descriptor() ([]byte, []int) {
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP(), []int{89}
}

func (x *VerbRuntimeSubscription) GetKafkaBrokers() []string {
	if x != nil {
		return x.KafkaBrokers
	}
	return nil
}

var File_xyz_block_ftl_schema_v1_schema_proto protoreflect.FileDescriptor

var file_xyz_block_ftl_schema_v1_schema_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x78, 0x79, 0x7a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x38, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22,
	0x82, 0x01, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x6f, 0x73, 0x22, 0x48, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x49,
	0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2b, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x62, 0x0a, 0x1e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x22, 0x59, 0x0a,
	0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x30, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x45, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x32, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7a, 0x0a,
	0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x44, 0x53,
	0x4e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x6f, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0e,
	0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xa6, 0x02,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x92, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7b, 0x0a, 0x1e,
	0x61, 0x77, 0x73, 0x69, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x57, 0x53, 0x49, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x77,
	0x73, 0x69, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x16, 0x64, 0x73, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x53, 0x4e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x64, 0x73, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x04, 0x44, 0x65,
	0x63, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x33, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x48, 0x00, 0x52,
	0x04, 0x76, 0x65, 0x72, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x22, 0x79, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x1d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x22, 0x93, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xe9,
	0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x68, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x16,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x75, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x49, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x70, 0x6f, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x65, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0x6c, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22,
	0x47, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x62, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x03, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xe5, 0x09, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x72, 0x74,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x72,
	0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x4a, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x44, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x54, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x51, 0x4c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x51, 0x4c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x44, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x67, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12,
	0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x41, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x70, 0x6f, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x48, 0x02, 0x52, 0x05, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x7f, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x51, 0x4c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73,
	0x22, 0x70, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x51, 0x4c, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x6f, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xcc, 0x02, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x64, 0x65,
	0x63, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x92, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0d,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x48, 0x02, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6f, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x14, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x9d, 0x09, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a,
	0x1e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01,
	0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8a, 0x01, 0x0a, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01,
	0x0a, 0x1f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6b, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x03, 0x52,
	0x65, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xbd, 0x04, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x65, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x14, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x62, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0xc6, 0x02, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x11,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x48, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x92, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x22, 0x9a, 0x05, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x79, 0x7a,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x87, 0x02, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x38,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78,
	0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0x48, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66,
	0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x04, 0x56, 0x65, 0x72, 0x62, 0x12, 0x38,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x79,
	0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x92,
	0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x79,
	0x0a, 0x0b, 0x56, 0x65, 0x72, 0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x66, 0x74, 0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x17, 0x56, 0x65, 0x72,
	0x62, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x2a, 0x3c, 0x0a, 0x09, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x87, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x07, 0x2a, 0xaf, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x41, 0x52,
	0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x08, 0x2a, 0x5c, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x42, 0x47, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x78, 0x79, 0x7a, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2f, 0x66, 0x74, 0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_xyz_block_ftl_schema_v1_schema_proto_rawDescOnce sync.Once
	file_xyz_block_ftl_schema_v1_schema_proto_rawDescData []byte
)

func file_xyz_block_ftl_schema_v1_schema_proto_rawDescGZIP() []byte {
	file_xyz_block_ftl_schema_v1_schema_proto_rawDescOnce.Do(func() {
		file_xyz_block_ftl_schema_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xyz_block_ftl_schema_v1_schema_proto_rawDesc), len(file_xyz_block_ftl_schema_v1_schema_proto_rawDesc)))
	})
	return file_xyz_block_ftl_schema_v1_schema_proto_rawDescData
}

var file_xyz_block_ftl_schema_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_xyz_block_ftl_schema_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 90)
var file_xyz_block_ftl_schema_v1_schema_proto_goTypes = []any{
	(AliasKind)(0),                           // 0: xyz.block.ftl.schema.v1.AliasKind
	(ChangesetState)(0),                      // 1: xyz.block.ftl.schema.v1.ChangesetState
	(DeploymentState)(0),                     // 2: xyz.block.ftl.schema.v1.DeploymentState
	(FromOffset)(0),                          // 3: xyz.block.ftl.schema.v1.FromOffset
	(*AWSIAMAuthDatabaseConnector)(nil),      // 4: xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector
	(*Any)(nil),                              // 5: xyz.block.ftl.schema.v1.Any
	(*Array)(nil),                            // 6: xyz.block.ftl.schema.v1.Array
	(*Bool)(nil),                             // 7: xyz.block.ftl.schema.v1.Bool
	(*Bytes)(nil),                            // 8: xyz.block.ftl.schema.v1.Bytes
	(*Changeset)(nil),                        // 9: xyz.block.ftl.schema.v1.Changeset
	(*ChangesetCommittedEvent)(nil),          // 10: xyz.block.ftl.schema.v1.ChangesetCommittedEvent
	(*ChangesetCommittedNotification)(nil),   // 11: xyz.block.ftl.schema.v1.ChangesetCommittedNotification
	(*ChangesetCreatedEvent)(nil),            // 12: xyz.block.ftl.schema.v1.ChangesetCreatedEvent
	(*ChangesetCreatedNotification)(nil),     // 13: xyz.block.ftl.schema.v1.ChangesetCreatedNotification
	(*ChangesetDrainedEvent)(nil),            // 14: xyz.block.ftl.schema.v1.ChangesetDrainedEvent
	(*ChangesetDrainedNotification)(nil),     // 15: xyz.block.ftl.schema.v1.ChangesetDrainedNotification
	(*ChangesetFailedEvent)(nil),             // 16: xyz.block.ftl.schema.v1.ChangesetFailedEvent
	(*ChangesetFailedNotification)(nil),      // 17: xyz.block.ftl.schema.v1.ChangesetFailedNotification
	(*ChangesetFinalizedEvent)(nil),          // 18: xyz.block.ftl.schema.v1.ChangesetFinalizedEvent
	(*ChangesetFinalizedNotification)(nil),   // 19: xyz.block.ftl.schema.v1.ChangesetFinalizedNotification
	(*ChangesetPreparedEvent)(nil),           // 20: xyz.block.ftl.schema.v1.ChangesetPreparedEvent
	(*ChangesetPreparedNotification)(nil),    // 21: xyz.block.ftl.schema.v1.ChangesetPreparedNotification
	(*ChangesetRollingBackEvent)(nil),        // 22: xyz.block.ftl.schema.v1.ChangesetRollingBackEvent
	(*ChangesetRollingBackNotification)(nil), // 23: xyz.block.ftl.schema.v1.ChangesetRollingBackNotification
	(*Config)(nil),                           // 24: xyz.block.ftl.schema.v1.Config
	(*DSNDatabaseConnector)(nil),             // 25: xyz.block.ftl.schema.v1.DSNDatabaseConnector
	(*Data)(nil),                             // 26: xyz.block.ftl.schema.v1.Data
	(*Database)(nil),                         // 27: xyz.block.ftl.schema.v1.Database
	(*DatabaseConnector)(nil),                // 28: xyz.block.ftl.schema.v1.DatabaseConnector
	(*DatabaseRuntime)(nil),                  // 29: xyz.block.ftl.schema.v1.DatabaseRuntime
	(*DatabaseRuntimeConnections)(nil),       // 30: xyz.block.ftl.schema.v1.DatabaseRuntimeConnections
	(*Decl)(nil),                             // 31: xyz.block.ftl.schema.v1.Decl
	(*DeploymentCreatedEvent)(nil),           // 32: xyz.block.ftl.schema.v1.DeploymentCreatedEvent
	(*DeploymentRuntimeEvent)(nil),           // 33: xyz.block.ftl.schema.v1.DeploymentRuntimeEvent
	(*DeploymentRuntimeNotification)(nil),    // 34: xyz.block.ftl.schema.v1.DeploymentRuntimeNotification
	(*Enum)(nil),                             // 35: xyz.block.ftl.schema.v1.Enum
	(*EnumVariant)(nil),                      // 36: xyz.block.ftl.schema.v1.EnumVariant
	(*Event)(nil),                            // 37: xyz.block.ftl.schema.v1.Event
	(*Field)(nil),                            // 38: xyz.block.ftl.schema.v1.Field
	(*Float)(nil),                            // 39: xyz.block.ftl.schema.v1.Float
	(*FullSchemaNotification)(nil),           // 40: xyz.block.ftl.schema.v1.FullSchemaNotification
	(*IngressPathComponent)(nil),             // 41: xyz.block.ftl.schema.v1.IngressPathComponent
	(*IngressPathLiteral)(nil),               // 42: xyz.block.ftl.schema.v1.IngressPathLiteral
	(*IngressPathParameter)(nil),             // 43: xyz.block.ftl.schema.v1.IngressPathParameter
	(*Int)(nil),                              // 44: xyz.block.ftl.schema.v1.Int
	(*IntValue)(nil),                         // 45: xyz.block.ftl.schema.v1.IntValue
	(*Map)(nil),                              // 46: xyz.block.ftl.schema.v1.Map
	(*Metadata)(nil),                         // 47: xyz.block.ftl.schema.v1.Metadata
	(*MetadataAlias)(nil),                    // 48: xyz.block.ftl.schema.v1.MetadataAlias
	(*MetadataArtefact)(nil),                 // 49: xyz.block.ftl.schema.v1.MetadataArtefact
	(*MetadataCalls)(nil),                    // 50: xyz.block.ftl.schema.v1.MetadataCalls
	(*MetadataConfig)(nil),                   // 51: xyz.block.ftl.schema.v1.MetadataConfig
	(*MetadataCronJob)(nil),                  // 52: xyz.block.ftl.schema.v1.MetadataCronJob
	(*MetadataDatabases)(nil),                // 53: xyz.block.ftl.schema.v1.MetadataDatabases
	(*MetadataEncoding)(nil),                 // 54: xyz.block.ftl.schema.v1.MetadataEncoding
	(*MetadataIngress)(nil),                  // 55: xyz.block.ftl.schema.v1.MetadataIngress
	(*MetadataPartitions)(nil),               // 56: xyz.block.ftl.schema.v1.MetadataPartitions
	(*MetadataPublisher)(nil),                // 57: xyz.block.ftl.schema.v1.MetadataPublisher
	(*MetadataRetry)(nil),                    // 58: xyz.block.ftl.schema.v1.MetadataRetry
	(*MetadataSQLColumn)(nil),                // 59: xyz.block.ftl.schema.v1.MetadataSQLColumn
	(*MetadataSQLMigration)(nil),             // 60: xyz.block.ftl.schema.v1.MetadataSQLMigration
	(*MetadataSQLQuery)(nil),                 // 61: xyz.block.ftl.schema.v1.MetadataSQLQuery
	(*MetadataSecrets)(nil),                  // 62: xyz.block.ftl.schema.v1.MetadataSecrets
	(*MetadataSubscriber)(nil),               // 63: xyz.block.ftl.schema.v1.MetadataSubscriber
	(*MetadataTypeMap)(nil),                  // 64: xyz.block.ftl.schema.v1.MetadataTypeMap
	(*Module)(nil),                           // 65: xyz.block.ftl.schema.v1.Module
	(*ModuleRuntime)(nil),                    // 66: xyz.block.ftl.schema.v1.ModuleRuntime
	(*ModuleRuntimeBase)(nil),                // 67: xyz.block.ftl.schema.v1.ModuleRuntimeBase
	(*ModuleRuntimeDeployment)(nil),          // 68: xyz.block.ftl.schema.v1.ModuleRuntimeDeployment
	(*ModuleRuntimeRunner)(nil),              // 69: xyz.block.ftl.schema.v1.ModuleRuntimeRunner
	(*ModuleRuntimeScaling)(nil),             // 70: xyz.block.ftl.schema.v1.ModuleRuntimeScaling
	(*Notification)(nil),                     // 71: xyz.block.ftl.schema.v1.Notification
	(*Optional)(nil),                         // 72: xyz.block.ftl.schema.v1.Optional
	(*Position)(nil),                         // 73: xyz.block.ftl.schema.v1.Position
	(*Ref)(nil),                              // 74: xyz.block.ftl.schema.v1.Ref
	(*Runtime)(nil),                          // 75: xyz.block.ftl.schema.v1.Runtime
	(*RuntimeElement)(nil),                   // 76: xyz.block.ftl.schema.v1.RuntimeElement
	(*Schema)(nil),                           // 77: xyz.block.ftl.schema.v1.Schema
	(*SchemaState)(nil),                      // 78: xyz.block.ftl.schema.v1.SchemaState
	(*Secret)(nil),                           // 79: xyz.block.ftl.schema.v1.Secret
	(*String)(nil),                           // 80: xyz.block.ftl.schema.v1.String
	(*StringValue)(nil),                      // 81: xyz.block.ftl.schema.v1.StringValue
	(*Time)(nil),                             // 82: xyz.block.ftl.schema.v1.Time
	(*Topic)(nil),                            // 83: xyz.block.ftl.schema.v1.Topic
	(*TopicRuntime)(nil),                     // 84: xyz.block.ftl.schema.v1.TopicRuntime
	(*Type)(nil),                             // 85: xyz.block.ftl.schema.v1.Type
	(*TypeAlias)(nil),                        // 86: xyz.block.ftl.schema.v1.TypeAlias
	(*TypeParameter)(nil),                    // 87: xyz.block.ftl.schema.v1.TypeParameter
	(*TypeValue)(nil),                        // 88: xyz.block.ftl.schema.v1.TypeValue
	(*Unit)(nil),                             // 89: xyz.block.ftl.schema.v1.Unit
	(*Value)(nil),                            // 90: xyz.block.ftl.schema.v1.Value
	(*Verb)(nil),                             // 91: xyz.block.ftl.schema.v1.Verb
	(*VerbRuntime)(nil),                      // 92: xyz.block.ftl.schema.v1.VerbRuntime
	(*VerbRuntimeSubscription)(nil),          // 93: xyz.block.ftl.schema.v1.VerbRuntimeSubscription
	(*timestamppb.Timestamp)(nil),            // 94: google.protobuf.Timestamp
}
var file_xyz_block_ftl_schema_v1_schema_proto_depIdxs = []int32{
	73,  // 0: xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 1: xyz.block.ftl.schema.v1.Any.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 2: xyz.block.ftl.schema.v1.Array.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 3: xyz.block.ftl.schema.v1.Array.element:type_name -> xyz.block.ftl.schema.v1.Type
	73,  // 4: xyz.block.ftl.schema.v1.Bool.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 5: xyz.block.ftl.schema.v1.Bytes.pos:type_name -> xyz.block.ftl.schema.v1.Position
	94,  // 6: xyz.block.ftl.schema.v1.Changeset.created_at:type_name -> google.protobuf.Timestamp
	65,  // 7: xyz.block.ftl.schema.v1.Changeset.modules:type_name -> xyz.block.ftl.schema.v1.Module
	65,  // 8: xyz.block.ftl.schema.v1.Changeset.removing_modules:type_name -> xyz.block.ftl.schema.v1.Module
	1,   // 9: xyz.block.ftl.schema.v1.Changeset.state:type_name -> xyz.block.ftl.schema.v1.ChangesetState
	9,   // 10: xyz.block.ftl.schema.v1.ChangesetCommittedNotification.changeset:type_name -> xyz.block.ftl.schema.v1.Changeset
	9,   // 11: xyz.block.ftl.schema.v1.ChangesetCreatedEvent.changeset:type_name -> xyz.block.ftl.schema.v1.Changeset
	9,   // 12: xyz.block.ftl.schema.v1.ChangesetCreatedNotification.changeset:type_name -> xyz.block.ftl.schema.v1.Changeset
	9,   // 13: xyz.block.ftl.schema.v1.ChangesetRollingBackNotification.changeset:type_name -> xyz.block.ftl.schema.v1.Changeset
	73,  // 14: xyz.block.ftl.schema.v1.Config.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 15: xyz.block.ftl.schema.v1.Config.type:type_name -> xyz.block.ftl.schema.v1.Type
	73,  // 16: xyz.block.ftl.schema.v1.DSNDatabaseConnector.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 17: xyz.block.ftl.schema.v1.Data.pos:type_name -> xyz.block.ftl.schema.v1.Position
	87,  // 18: xyz.block.ftl.schema.v1.Data.type_parameters:type_name -> xyz.block.ftl.schema.v1.TypeParameter
	38,  // 19: xyz.block.ftl.schema.v1.Data.fields:type_name -> xyz.block.ftl.schema.v1.Field
	47,  // 20: xyz.block.ftl.schema.v1.Data.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	73,  // 21: xyz.block.ftl.schema.v1.Database.pos:type_name -> xyz.block.ftl.schema.v1.Position
	29,  // 22: xyz.block.ftl.schema.v1.Database.runtime:type_name -> xyz.block.ftl.schema.v1.DatabaseRuntime
	47,  // 23: xyz.block.ftl.schema.v1.Database.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	4,   // 24: xyz.block.ftl.schema.v1.DatabaseConnector.awsiam_auth_database_connector:type_name -> xyz.block.ftl.schema.v1.AWSIAMAuthDatabaseConnector
	25,  // 25: xyz.block.ftl.schema.v1.DatabaseConnector.dsn_database_connector:type_name -> xyz.block.ftl.schema.v1.DSNDatabaseConnector
	30,  // 26: xyz.block.ftl.schema.v1.DatabaseRuntime.connections:type_name -> xyz.block.ftl.schema.v1.DatabaseRuntimeConnections
	28,  // 27: xyz.block.ftl.schema.v1.DatabaseRuntimeConnections.read:type_name -> xyz.block.ftl.schema.v1.DatabaseConnector
	28,  // 28: xyz.block.ftl.schema.v1.DatabaseRuntimeConnections.write:type_name -> xyz.block.ftl.schema.v1.DatabaseConnector
	24,  // 29: xyz.block.ftl.schema.v1.Decl.config:type_name -> xyz.block.ftl.schema.v1.Config
	26,  // 30: xyz.block.ftl.schema.v1.Decl.data:type_name -> xyz.block.ftl.schema.v1.Data
	27,  // 31: xyz.block.ftl.schema.v1.Decl.database:type_name -> xyz.block.ftl.schema.v1.Database
	35,  // 32: xyz.block.ftl.schema.v1.Decl.enum:type_name -> xyz.block.ftl.schema.v1.Enum
	79,  // 33: xyz.block.ftl.schema.v1.Decl.secret:type_name -> xyz.block.ftl.schema.v1.Secret
	83,  // 34: xyz.block.ftl.schema.v1.Decl.topic:type_name -> xyz.block.ftl.schema.v1.Topic
	86,  // 35: xyz.block.ftl.schema.v1.Decl.type_alias:type_name -> xyz.block.ftl.schema.v1.TypeAlias
	91,  // 36: xyz.block.ftl.schema.v1.Decl.verb:type_name -> xyz.block.ftl.schema.v1.Verb
	65,  // 37: xyz.block.ftl.schema.v1.DeploymentCreatedEvent.schema:type_name -> xyz.block.ftl.schema.v1.Module
	76,  // 38: xyz.block.ftl.schema.v1.DeploymentRuntimeEvent.payload:type_name -> xyz.block.ftl.schema.v1.RuntimeElement
	76,  // 39: xyz.block.ftl.schema.v1.DeploymentRuntimeNotification.payload:type_name -> xyz.block.ftl.schema.v1.RuntimeElement
	73,  // 40: xyz.block.ftl.schema.v1.Enum.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 41: xyz.block.ftl.schema.v1.Enum.type:type_name -> xyz.block.ftl.schema.v1.Type
	36,  // 42: xyz.block.ftl.schema.v1.Enum.variants:type_name -> xyz.block.ftl.schema.v1.EnumVariant
	73,  // 43: xyz.block.ftl.schema.v1.EnumVariant.pos:type_name -> xyz.block.ftl.schema.v1.Position
	90,  // 44: xyz.block.ftl.schema.v1.EnumVariant.value:type_name -> xyz.block.ftl.schema.v1.Value
	10,  // 45: xyz.block.ftl.schema.v1.Event.changeset_committed_event:type_name -> xyz.block.ftl.schema.v1.ChangesetCommittedEvent
	12,  // 46: xyz.block.ftl.schema.v1.Event.changeset_created_event:type_name -> xyz.block.ftl.schema.v1.ChangesetCreatedEvent
	14,  // 47: xyz.block.ftl.schema.v1.Event.changeset_drained_event:type_name -> xyz.block.ftl.schema.v1.ChangesetDrainedEvent
	16,  // 48: xyz.block.ftl.schema.v1.Event.changeset_failed_event:type_name -> xyz.block.ftl.schema.v1.ChangesetFailedEvent
	18,  // 49: xyz.block.ftl.schema.v1.Event.changeset_finalized_event:type_name -> xyz.block.ftl.schema.v1.ChangesetFinalizedEvent
	20,  // 50: xyz.block.ftl.schema.v1.Event.changeset_prepared_event:type_name -> xyz.block.ftl.schema.v1.ChangesetPreparedEvent
	22,  // 51: xyz.block.ftl.schema.v1.Event.changeset_rolling_back_event:type_name -> xyz.block.ftl.schema.v1.ChangesetRollingBackEvent
	32,  // 52: xyz.block.ftl.schema.v1.Event.deployment_created_event:type_name -> xyz.block.ftl.schema.v1.DeploymentCreatedEvent
	33,  // 53: xyz.block.ftl.schema.v1.Event.deployment_runtime_event:type_name -> xyz.block.ftl.schema.v1.DeploymentRuntimeEvent
	73,  // 54: xyz.block.ftl.schema.v1.Field.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 55: xyz.block.ftl.schema.v1.Field.type:type_name -> xyz.block.ftl.schema.v1.Type
	47,  // 56: xyz.block.ftl.schema.v1.Field.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	73,  // 57: xyz.block.ftl.schema.v1.Float.pos:type_name -> xyz.block.ftl.schema.v1.Position
	77,  // 58: xyz.block.ftl.schema.v1.FullSchemaNotification.schema:type_name -> xyz.block.ftl.schema.v1.Schema
	9,   // 59: xyz.block.ftl.schema.v1.FullSchemaNotification.changesets:type_name -> xyz.block.ftl.schema.v1.Changeset
	42,  // 60: xyz.block.ftl.schema.v1.IngressPathComponent.ingress_path_literal:type_name -> xyz.block.ftl.schema.v1.IngressPathLiteral
	43,  // 61: xyz.block.ftl.schema.v1.IngressPathComponent.ingress_path_parameter:type_name -> xyz.block.ftl.schema.v1.IngressPathParameter
	73,  // 62: xyz.block.ftl.schema.v1.IngressPathLiteral.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 63: xyz.block.ftl.schema.v1.IngressPathParameter.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 64: xyz.block.ftl.schema.v1.Int.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 65: xyz.block.ftl.schema.v1.IntValue.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 66: xyz.block.ftl.schema.v1.Map.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 67: xyz.block.ftl.schema.v1.Map.key:type_name -> xyz.block.ftl.schema.v1.Type
	85,  // 68: xyz.block.ftl.schema.v1.Map.value:type_name -> xyz.block.ftl.schema.v1.Type
	48,  // 69: xyz.block.ftl.schema.v1.Metadata.alias:type_name -> xyz.block.ftl.schema.v1.MetadataAlias
	49,  // 70: xyz.block.ftl.schema.v1.Metadata.artefact:type_name -> xyz.block.ftl.schema.v1.MetadataArtefact
	50,  // 71: xyz.block.ftl.schema.v1.Metadata.calls:type_name -> xyz.block.ftl.schema.v1.MetadataCalls
	51,  // 72: xyz.block.ftl.schema.v1.Metadata.config:type_name -> xyz.block.ftl.schema.v1.MetadataConfig
	52,  // 73: xyz.block.ftl.schema.v1.Metadata.cron_job:type_name -> xyz.block.ftl.schema.v1.MetadataCronJob
	53,  // 74: xyz.block.ftl.schema.v1.Metadata.databases:type_name -> xyz.block.ftl.schema.v1.MetadataDatabases
	54,  // 75: xyz.block.ftl.schema.v1.Metadata.encoding:type_name -> xyz.block.ftl.schema.v1.MetadataEncoding
	55,  // 76: xyz.block.ftl.schema.v1.Metadata.ingress:type_name -> xyz.block.ftl.schema.v1.MetadataIngress
	56,  // 77: xyz.block.ftl.schema.v1.Metadata.partitions:type_name -> xyz.block.ftl.schema.v1.MetadataPartitions
	57,  // 78: xyz.block.ftl.schema.v1.Metadata.publisher:type_name -> xyz.block.ftl.schema.v1.MetadataPublisher
	58,  // 79: xyz.block.ftl.schema.v1.Metadata.retry:type_name -> xyz.block.ftl.schema.v1.MetadataRetry
	59,  // 80: xyz.block.ftl.schema.v1.Metadata.sql_column:type_name -> xyz.block.ftl.schema.v1.MetadataSQLColumn
	60,  // 81: xyz.block.ftl.schema.v1.Metadata.sql_migration:type_name -> xyz.block.ftl.schema.v1.MetadataSQLMigration
	61,  // 82: xyz.block.ftl.schema.v1.Metadata.sql_query:type_name -> xyz.block.ftl.schema.v1.MetadataSQLQuery
	62,  // 83: xyz.block.ftl.schema.v1.Metadata.secrets:type_name -> xyz.block.ftl.schema.v1.MetadataSecrets
	63,  // 84: xyz.block.ftl.schema.v1.Metadata.subscriber:type_name -> xyz.block.ftl.schema.v1.MetadataSubscriber
	64,  // 85: xyz.block.ftl.schema.v1.Metadata.type_map:type_name -> xyz.block.ftl.schema.v1.MetadataTypeMap
	73,  // 86: xyz.block.ftl.schema.v1.MetadataAlias.pos:type_name -> xyz.block.ftl.schema.v1.Position
	0,   // 87: xyz.block.ftl.schema.v1.MetadataAlias.kind:type_name -> xyz.block.ftl.schema.v1.AliasKind
	73,  // 88: xyz.block.ftl.schema.v1.MetadataArtefact.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 89: xyz.block.ftl.schema.v1.MetadataCalls.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 90: xyz.block.ftl.schema.v1.MetadataCalls.calls:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 91: xyz.block.ftl.schema.v1.MetadataConfig.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 92: xyz.block.ftl.schema.v1.MetadataConfig.config:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 93: xyz.block.ftl.schema.v1.MetadataCronJob.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 94: xyz.block.ftl.schema.v1.MetadataDatabases.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 95: xyz.block.ftl.schema.v1.MetadataDatabases.calls:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 96: xyz.block.ftl.schema.v1.MetadataEncoding.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 97: xyz.block.ftl.schema.v1.MetadataIngress.pos:type_name -> xyz.block.ftl.schema.v1.Position
	41,  // 98: xyz.block.ftl.schema.v1.MetadataIngress.path:type_name -> xyz.block.ftl.schema.v1.IngressPathComponent
	73,  // 99: xyz.block.ftl.schema.v1.MetadataPartitions.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 100: xyz.block.ftl.schema.v1.MetadataPublisher.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 101: xyz.block.ftl.schema.v1.MetadataPublisher.topics:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 102: xyz.block.ftl.schema.v1.MetadataRetry.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 103: xyz.block.ftl.schema.v1.MetadataRetry.catch:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 104: xyz.block.ftl.schema.v1.MetadataSQLColumn.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 105: xyz.block.ftl.schema.v1.MetadataSQLMigration.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 106: xyz.block.ftl.schema.v1.MetadataSQLQuery.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 107: xyz.block.ftl.schema.v1.MetadataSecrets.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 108: xyz.block.ftl.schema.v1.MetadataSecrets.secrets:type_name -> xyz.block.ftl.schema.v1.Ref
	73,  // 109: xyz.block.ftl.schema.v1.MetadataSubscriber.pos:type_name -> xyz.block.ftl.schema.v1.Position
	74,  // 110: xyz.block.ftl.schema.v1.MetadataSubscriber.topic:type_name -> xyz.block.ftl.schema.v1.Ref
	3,   // 111: xyz.block.ftl.schema.v1.MetadataSubscriber.from_offset:type_name -> xyz.block.ftl.schema.v1.FromOffset
	73,  // 112: xyz.block.ftl.schema.v1.MetadataTypeMap.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 113: xyz.block.ftl.schema.v1.Module.pos:type_name -> xyz.block.ftl.schema.v1.Position
	47,  // 114: xyz.block.ftl.schema.v1.Module.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	31,  // 115: xyz.block.ftl.schema.v1.Module.decls:type_name -> xyz.block.ftl.schema.v1.Decl
	66,  // 116: xyz.block.ftl.schema.v1.Module.runtime:type_name -> xyz.block.ftl.schema.v1.ModuleRuntime
	67,  // 117: xyz.block.ftl.schema.v1.ModuleRuntime.base:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeBase
	70,  // 118: xyz.block.ftl.schema.v1.ModuleRuntime.scaling:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeScaling
	68,  // 119: xyz.block.ftl.schema.v1.ModuleRuntime.deployment:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeDeployment
	69,  // 120: xyz.block.ftl.schema.v1.ModuleRuntime.runner:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeRunner
	94,  // 121: xyz.block.ftl.schema.v1.ModuleRuntimeBase.create_time:type_name -> google.protobuf.Timestamp
	94,  // 122: xyz.block.ftl.schema.v1.ModuleRuntimeDeployment.created_at:type_name -> google.protobuf.Timestamp
	94,  // 123: xyz.block.ftl.schema.v1.ModuleRuntimeDeployment.activated_at:type_name -> google.protobuf.Timestamp
	2,   // 124: xyz.block.ftl.schema.v1.ModuleRuntimeDeployment.state:type_name -> xyz.block.ftl.schema.v1.DeploymentState
	11,  // 125: xyz.block.ftl.schema.v1.Notification.changeset_committed_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetCommittedNotification
	13,  // 126: xyz.block.ftl.schema.v1.Notification.changeset_created_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetCreatedNotification
	15,  // 127: xyz.block.ftl.schema.v1.Notification.changeset_drained_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetDrainedNotification
	17,  // 128: xyz.block.ftl.schema.v1.Notification.changeset_failed_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetFailedNotification
	19,  // 129: xyz.block.ftl.schema.v1.Notification.changeset_finalized_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetFinalizedNotification
	21,  // 130: xyz.block.ftl.schema.v1.Notification.changeset_prepared_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetPreparedNotification
	23,  // 131: xyz.block.ftl.schema.v1.Notification.changeset_rolling_back_notification:type_name -> xyz.block.ftl.schema.v1.ChangesetRollingBackNotification
	34,  // 132: xyz.block.ftl.schema.v1.Notification.deployment_runtime_notification:type_name -> xyz.block.ftl.schema.v1.DeploymentRuntimeNotification
	40,  // 133: xyz.block.ftl.schema.v1.Notification.full_schema_notification:type_name -> xyz.block.ftl.schema.v1.FullSchemaNotification
	73,  // 134: xyz.block.ftl.schema.v1.Optional.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 135: xyz.block.ftl.schema.v1.Optional.type:type_name -> xyz.block.ftl.schema.v1.Type
	73,  // 136: xyz.block.ftl.schema.v1.Ref.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 137: xyz.block.ftl.schema.v1.Ref.type_parameters:type_name -> xyz.block.ftl.schema.v1.Type
	29,  // 138: xyz.block.ftl.schema.v1.Runtime.database_runtime:type_name -> xyz.block.ftl.schema.v1.DatabaseRuntime
	68,  // 139: xyz.block.ftl.schema.v1.Runtime.module_runtime_deployment:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeDeployment
	69,  // 140: xyz.block.ftl.schema.v1.Runtime.module_runtime_runner:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeRunner
	70,  // 141: xyz.block.ftl.schema.v1.Runtime.module_runtime_scaling:type_name -> xyz.block.ftl.schema.v1.ModuleRuntimeScaling
	84,  // 142: xyz.block.ftl.schema.v1.Runtime.topic_runtime:type_name -> xyz.block.ftl.schema.v1.TopicRuntime
	92,  // 143: xyz.block.ftl.schema.v1.Runtime.verb_runtime:type_name -> xyz.block.ftl.schema.v1.VerbRuntime
	75,  // 144: xyz.block.ftl.schema.v1.RuntimeElement.element:type_name -> xyz.block.ftl.schema.v1.Runtime
	73,  // 145: xyz.block.ftl.schema.v1.Schema.pos:type_name -> xyz.block.ftl.schema.v1.Position
	65,  // 146: xyz.block.ftl.schema.v1.Schema.modules:type_name -> xyz.block.ftl.schema.v1.Module
	65,  // 147: xyz.block.ftl.schema.v1.SchemaState.modules:type_name -> xyz.block.ftl.schema.v1.Module
	9,   // 148: xyz.block.ftl.schema.v1.SchemaState.changesets:type_name -> xyz.block.ftl.schema.v1.Changeset
	33,  // 149: xyz.block.ftl.schema.v1.SchemaState.changeset_events:type_name -> xyz.block.ftl.schema.v1.DeploymentRuntimeEvent
	33,  // 150: xyz.block.ftl.schema.v1.SchemaState.deployment_events:type_name -> xyz.block.ftl.schema.v1.DeploymentRuntimeEvent
	73,  // 151: xyz.block.ftl.schema.v1.Secret.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 152: xyz.block.ftl.schema.v1.Secret.type:type_name -> xyz.block.ftl.schema.v1.Type
	73,  // 153: xyz.block.ftl.schema.v1.String.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 154: xyz.block.ftl.schema.v1.StringValue.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 155: xyz.block.ftl.schema.v1.Time.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 156: xyz.block.ftl.schema.v1.Topic.pos:type_name -> xyz.block.ftl.schema.v1.Position
	84,  // 157: xyz.block.ftl.schema.v1.Topic.runtime:type_name -> xyz.block.ftl.schema.v1.TopicRuntime
	85,  // 158: xyz.block.ftl.schema.v1.Topic.event:type_name -> xyz.block.ftl.schema.v1.Type
	47,  // 159: xyz.block.ftl.schema.v1.Topic.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	5,   // 160: xyz.block.ftl.schema.v1.Type.any:type_name -> xyz.block.ftl.schema.v1.Any
	6,   // 161: xyz.block.ftl.schema.v1.Type.array:type_name -> xyz.block.ftl.schema.v1.Array
	7,   // 162: xyz.block.ftl.schema.v1.Type.bool:type_name -> xyz.block.ftl.schema.v1.Bool
	8,   // 163: xyz.block.ftl.schema.v1.Type.bytes:type_name -> xyz.block.ftl.schema.v1.Bytes
	39,  // 164: xyz.block.ftl.schema.v1.Type.float:type_name -> xyz.block.ftl.schema.v1.Float
	44,  // 165: xyz.block.ftl.schema.v1.Type.int:type_name -> xyz.block.ftl.schema.v1.Int
	46,  // 166: xyz.block.ftl.schema.v1.Type.map:type_name -> xyz.block.ftl.schema.v1.Map
	72,  // 167: xyz.block.ftl.schema.v1.Type.optional:type_name -> xyz.block.ftl.schema.v1.Optional
	74,  // 168: xyz.block.ftl.schema.v1.Type.ref:type_name -> xyz.block.ftl.schema.v1.Ref
	80,  // 169: xyz.block.ftl.schema.v1.Type.string:type_name -> xyz.block.ftl.schema.v1.String
	82,  // 170: xyz.block.ftl.schema.v1.Type.time:type_name -> xyz.block.ftl.schema.v1.Time
	89,  // 171: xyz.block.ftl.schema.v1.Type.unit:type_name -> xyz.block.ftl.schema.v1.Unit
	73,  // 172: xyz.block.ftl.schema.v1.TypeAlias.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 173: xyz.block.ftl.schema.v1.TypeAlias.type:type_name -> xyz.block.ftl.schema.v1.Type
	47,  // 174: xyz.block.ftl.schema.v1.TypeAlias.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	73,  // 175: xyz.block.ftl.schema.v1.TypeParameter.pos:type_name -> xyz.block.ftl.schema.v1.Position
	73,  // 176: xyz.block.ftl.schema.v1.TypeValue.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 177: xyz.block.ftl.schema.v1.TypeValue.value:type_name -> xyz.block.ftl.schema.v1.Type
	73,  // 178: xyz.block.ftl.schema.v1.Unit.pos:type_name -> xyz.block.ftl.schema.v1.Position
	45,  // 179: xyz.block.ftl.schema.v1.Value.int_value:type_name -> xyz.block.ftl.schema.v1.IntValue
	81,  // 180: xyz.block.ftl.schema.v1.Value.string_value:type_name -> xyz.block.ftl.schema.v1.StringValue
	88,  // 181: xyz.block.ftl.schema.v1.Value.type_value:type_name -> xyz.block.ftl.schema.v1.TypeValue
	73,  // 182: xyz.block.ftl.schema.v1.Verb.pos:type_name -> xyz.block.ftl.schema.v1.Position
	85,  // 183: xyz.block.ftl.schema.v1.Verb.request:type_name -> xyz.block.ftl.schema.v1.Type
	85,  // 184: xyz.block.ftl.schema.v1.Verb.response:type_name -> xyz.block.ftl.schema.v1.Type
	47,  // 185: xyz.block.ftl.schema.v1.Verb.metadata:type_name -> xyz.block.ftl.schema.v1.Metadata
	92,  // 186: xyz.block.ftl.schema.v1.Verb.runtime:type_name -> xyz.block.ftl.schema.v1.VerbRuntime
	93,  // 187: xyz.block.ftl.schema.v1.VerbRuntime.subscription:type_name -> xyz.block.ftl.schema.v1.VerbRuntimeSubscription
	188, // [188:188] is the sub-list for method output_type
	188, // [188:188] is the sub-list for method input_type
	188, // [188:188] is the sub-list for extension type_name
	188, // [188:188] is the sub-list for extension extendee
	0,   // [0:188] is the sub-list for field type_name
}

func init() { file_xyz_block_ftl_schema_v1_schema_proto_init() }
func file_xyz_block_ftl_schema_v1_schema_proto_init() {
	if File_xyz_block_ftl_schema_v1_schema_proto != nil {
		return
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[0].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[1].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[2].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[3].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[4].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[5].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[20].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[21].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[22].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[23].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[24].OneofWrappers = []any{
		(*DatabaseConnector_AwsiamAuthDatabaseConnector)(nil),
		(*DatabaseConnector_DsnDatabaseConnector)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[25].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[27].OneofWrappers = []any{
		(*Decl_Config)(nil),
		(*Decl_Data)(nil),
		(*Decl_Database)(nil),
		(*Decl_Enum)(nil),
		(*Decl_Secret)(nil),
		(*Decl_Topic)(nil),
		(*Decl_TypeAlias)(nil),
		(*Decl_Verb)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[31].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[32].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[33].OneofWrappers = []any{
		(*Event_ChangesetCommittedEvent)(nil),
		(*Event_ChangesetCreatedEvent)(nil),
		(*Event_ChangesetDrainedEvent)(nil),
		(*Event_ChangesetFailedEvent)(nil),
		(*Event_ChangesetFinalizedEvent)(nil),
		(*Event_ChangesetPreparedEvent)(nil),
		(*Event_ChangesetRollingBackEvent)(nil),
		(*Event_DeploymentCreatedEvent)(nil),
		(*Event_DeploymentRuntimeEvent)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[34].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[35].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[37].OneofWrappers = []any{
		(*IngressPathComponent_IngressPathLiteral)(nil),
		(*IngressPathComponent_IngressPathParameter)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[38].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[39].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[40].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[41].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[42].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[43].OneofWrappers = []any{
		(*Metadata_Alias)(nil),
		(*Metadata_Artefact)(nil),
		(*Metadata_Calls)(nil),
		(*Metadata_Config)(nil),
		(*Metadata_CronJob)(nil),
		(*Metadata_Databases)(nil),
		(*Metadata_Encoding)(nil),
		(*Metadata_Ingress)(nil),
		(*Metadata_Partitions)(nil),
		(*Metadata_Publisher)(nil),
		(*Metadata_Retry)(nil),
		(*Metadata_SqlColumn)(nil),
		(*Metadata_SqlMigration)(nil),
		(*Metadata_SqlQuery)(nil),
		(*Metadata_Secrets)(nil),
		(*Metadata_Subscriber)(nil),
		(*Metadata_TypeMap)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[44].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[45].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[46].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[47].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[48].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[49].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[50].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[51].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[52].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[53].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[54].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[55].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[56].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[57].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[58].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[59].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[60].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[61].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[62].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[63].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[64].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[67].OneofWrappers = []any{
		(*Notification_ChangesetCommittedNotification)(nil),
		(*Notification_ChangesetCreatedNotification)(nil),
		(*Notification_ChangesetDrainedNotification)(nil),
		(*Notification_ChangesetFailedNotification)(nil),
		(*Notification_ChangesetFinalizedNotification)(nil),
		(*Notification_ChangesetPreparedNotification)(nil),
		(*Notification_ChangesetRollingBackNotification)(nil),
		(*Notification_DeploymentRuntimeNotification)(nil),
		(*Notification_FullSchemaNotification)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[68].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[70].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[71].OneofWrappers = []any{
		(*Runtime_DatabaseRuntime)(nil),
		(*Runtime_ModuleRuntimeDeployment)(nil),
		(*Runtime_ModuleRuntimeRunner)(nil),
		(*Runtime_ModuleRuntimeScaling)(nil),
		(*Runtime_TopicRuntime)(nil),
		(*Runtime_VerbRuntime)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[72].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[73].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[75].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[76].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[77].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[78].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[79].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[81].OneofWrappers = []any{
		(*Type_Any)(nil),
		(*Type_Array)(nil),
		(*Type_Bool)(nil),
		(*Type_Bytes)(nil),
		(*Type_Float)(nil),
		(*Type_Int)(nil),
		(*Type_Map)(nil),
		(*Type_Optional)(nil),
		(*Type_Ref)(nil),
		(*Type_String_)(nil),
		(*Type_Time)(nil),
		(*Type_Unit)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[82].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[83].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[84].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[85].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[86].OneofWrappers = []any{
		(*Value_IntValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_TypeValue)(nil),
	}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[87].OneofWrappers = []any{}
	file_xyz_block_ftl_schema_v1_schema_proto_msgTypes[88].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xyz_block_ftl_schema_v1_schema_proto_rawDesc), len(file_xyz_block_ftl_schema_v1_schema_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   90,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xyz_block_ftl_schema_v1_schema_proto_goTypes,
		DependencyIndexes: file_xyz_block_ftl_schema_v1_schema_proto_depIdxs,
		EnumInfos:         file_xyz_block_ftl_schema_v1_schema_proto_enumTypes,
		MessageInfos:      file_xyz_block_ftl_schema_v1_schema_proto_msgTypes,
	}.Build()
	File_xyz_block_ftl_schema_v1_schema_proto = out.File
	file_xyz_block_ftl_schema_v1_schema_proto_goTypes = nil
	file_xyz_block_ftl_schema_v1_schema_proto_depIdxs = nil
}
