// Code generated by go2proto. DO NOT EDIT.
syntax = "proto3";

package xyz.block.ftl.schema.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/block/ftl/common/protos/xyz/block/ftl/schema/v1;schemapb";
option java_multiple_files = true;

message AWSIAMAuthDatabaseConnector {
  optional Position pos = 1;
  string username = 2;
  string endpoint = 3;
  string database = 4;
}

// AliasKind is the kind of alias.
enum AliasKind {
  ALIAS_KIND_UNSPECIFIED = 0;
  ALIAS_KIND_JSON = 1;
}

message Any {
  optional Position pos = 1;
}

message Array {
  optional Position pos = 1;
  Type element = 2;
}

message Bool {
  optional Position pos = 1;
}

message Bytes {
  optional Position pos = 1;
}

message Changeset {
  string key = 1;
  google.protobuf.Timestamp created_at = 2;
  repeated RealmChange realm_changes = 3;
  ChangesetState state = 4;
  optional string error = 5;
}

message ChangesetCommittedEvent {
  string key = 1;
}

message ChangesetCommittedNotification {
  Changeset changeset = 1;
}

message ChangesetCreatedEvent {
  Changeset changeset = 1;
}

message ChangesetCreatedNotification {
  Changeset changeset = 1;
}

message ChangesetDrainedEvent {
  string key = 1;
}

message ChangesetDrainedNotification {
  string key = 1;
}

message ChangesetFailedEvent {
  string key = 1;
}

message ChangesetFailedNotification {
  string key = 1;
  string error = 2;
}

message ChangesetFinalizedEvent {
  string key = 1;
}

message ChangesetFinalizedNotification {
  string key = 1;
}

message ChangesetPreparedEvent {
  string key = 1;
}

message ChangesetPreparedNotification {
  string key = 1;
}

message ChangesetRollingBackEvent {
  string key = 1;
  string error = 2;
}

message ChangesetRollingBackNotification {
  Changeset changeset = 1;
  string error = 2;
}

enum ChangesetState {
  CHANGESET_STATE_UNSPECIFIED = 0;
  CHANGESET_STATE_PREPARING = 1;
  CHANGESET_STATE_PREPARED = 2;
  CHANGESET_STATE_COMMITTED = 3;
  CHANGESET_STATE_DRAINED = 4;
  CHANGESET_STATE_FINALIZED = 5;
  CHANGESET_STATE_ROLLING_BACK = 6;
  CHANGESET_STATE_FAILED = 7;
}

message Config {
  optional Position pos = 1;
  repeated string comments = 2;
  string name = 3;
  Type type = 4;
}

message DSNDatabaseConnector {
  optional Position pos = 1;
  string database = 2;
  string dsn = 3;
}

// A Data structure.
message Data {
  optional Position pos = 1;
  repeated string comments = 2;
  bool export = 3;
  string name = 4;
  repeated TypeParameter type_parameters = 5;
  repeated Metadata metadata = 7;
  repeated Field fields = 6;
}

message Database {
  optional Position pos = 1;
  optional DatabaseRuntime runtime = 31634;
  repeated string comments = 2;
  string type = 4;
  string name = 3;
  repeated Metadata metadata = 5;
}

message DatabaseConnector {
  oneof value {
    AWSIAMAuthDatabaseConnector awsiam_auth_database_connector = 2;
    DSNDatabaseConnector dsn_database_connector = 1;
  }
}

message DatabaseRuntime {
  optional DatabaseRuntimeConnections connections = 1;
}

message DatabaseRuntimeConnections {
  DatabaseConnector read = 1;
  DatabaseConnector write = 2;
}

// Decl represents user-defined data types in the schema grammar.
message Decl {
  oneof value {
    Config config = 6;
    Data data = 1;
    Database database = 3;
    Enum enum = 4;
    Secret secret = 7;
    Topic topic = 9;
    TypeAlias type_alias = 5;
    Verb verb = 2;
  }
}

message DeploymentRuntimeEvent {
  RuntimeElement payload = 1;
  string changeset = 2;
  string realm = 3;
}

message DeploymentRuntimeNotification {
  RuntimeElement payload = 1;
  string changeset = 2;
  string realm = 3;
}

enum DeploymentState {
  DEPLOYMENT_STATE_UNSPECIFIED = 0;
  DEPLOYMENT_STATE_PROVISIONING = 1;
  DEPLOYMENT_STATE_READY = 2;
  DEPLOYMENT_STATE_CANARY = 3;
  DEPLOYMENT_STATE_CANONICAL = 4;
  DEPLOYMENT_STATE_DRAINING = 5;
  DEPLOYMENT_STATE_DE_PROVISIONING = 6;
  DEPLOYMENT_STATE_DELETED = 7;
  DEPLOYMENT_STATE_FAILED = 8;
}

message Enum {
  optional Position pos = 1;
  repeated string comments = 2;
  bool export = 3;
  string name = 4;
  optional Type type = 5;
  repeated EnumVariant variants = 6;
}

message EnumVariant {
  optional Position pos = 1;
  repeated string comments = 2;
  string name = 3;
  Value value = 4;
}

message Event {
  oneof value {
    ChangesetCommittedEvent changeset_committed_event = 5;
    ChangesetCreatedEvent changeset_created_event = 3;
    ChangesetDrainedEvent changeset_drained_event = 6;
    ChangesetFailedEvent changeset_failed_event = 9;
    ChangesetFinalizedEvent changeset_finalized_event = 7;
    ChangesetPreparedEvent changeset_prepared_event = 4;
    ChangesetRollingBackEvent changeset_rolling_back_event = 8;
    DeploymentRuntimeEvent deployment_runtime_event = 2;
  }
}

message Field {
  optional Position pos = 1;
  repeated string comments = 3;
  string name = 2;
  Type type = 4;
  repeated Metadata metadata = 5;
}

message Float {
  optional Position pos = 1;
}

enum FromOffset {
  FROM_OFFSET_UNSPECIFIED = 0;
  FROM_OFFSET_BEGINNING = 1;
  FROM_OFFSET_LATEST = 2;
}

message FullSchemaNotification {
  Schema schema = 1;
  repeated Changeset changesets = 2;
}

message IngressPathComponent {
  oneof value {
    IngressPathLiteral ingress_path_literal = 1;
    IngressPathParameter ingress_path_parameter = 2;
  }
}

message IngressPathLiteral {
  optional Position pos = 1;
  string text = 2;
}

message IngressPathParameter {
  optional Position pos = 1;
  string name = 2;
}

message Int {
  optional Position pos = 1;
}

message IntValue {
  optional Position pos = 1;
  int64 value = 2;
}

message Map {
  optional Position pos = 1;
  Type key = 2;
  Type value = 3;
}

// Metadata represents a metadata Node in the schema grammar.
message Metadata {
  oneof value {
    MetadataAlias alias = 5;
    MetadataArtefact artefact = 14;
    MetadataCalls calls = 1;
    MetadataConfig config = 10;
    MetadataCronJob cron_job = 3;
    MetadataDatabases databases = 4;
    MetadataEncoding encoding = 9;
    MetadataFixture fixture = 20;
    MetadataGenerated generated = 18;
    MetadataGit git = 19;
    MetadataIngress ingress = 2;
    MetadataPartitions partitions = 15;
    MetadataPublisher publisher = 12;
    MetadataRetry retry = 6;
    MetadataSQLColumn sql_column = 17;
    MetadataSQLMigration sql_migration = 13;
    MetadataSQLQuery sql_query = 16;
    MetadataSecrets secrets = 11;
    MetadataSubscriber subscriber = 7;
    MetadataTransaction transaction = 21;
    MetadataTypeMap type_map = 8;
  }
}

message MetadataAlias {
  optional Position pos = 1;
  AliasKind kind = 2;
  string alias = 3;
}

message MetadataArtefact {
  optional Position pos = 1;
  string path = 2;
  string digest = 3;
  bool executable = 4;
}

// MetadataCalls represents a metadata block with a list of calls.
message MetadataCalls {
  optional Position pos = 1;
  repeated Ref calls = 2;
}

// MetadataConfig represents a metadata block with a list of config items that are used.
message MetadataConfig {
  optional Position pos = 1;
  repeated Ref config = 2;
}

message MetadataCronJob {
  optional Position pos = 1;
  string cron = 2;
}

message MetadataDatabases {
  optional Position pos = 1;
  repeated Ref uses = 2;
}

message MetadataEncoding {
  optional Position pos = 1;
  string type = 2;
  bool lenient = 3;
}

message MetadataFixture {
  optional Position pos = 1;
  bool manual = 2;
}

// MetadataGenerated designates a declaration generated by FTL.
message MetadataGenerated {
  optional Position pos = 1;
}

message MetadataGit {
  optional Position pos = 1;
  string repository = 2;
  string commit = 3;
  bool dirty = 4;
}

message MetadataIngress {
  optional Position pos = 1;
  string type = 2;
  string method = 3;
  repeated IngressPathComponent path = 4;
}

message MetadataPartitions {
  optional Position pos = 1;
  int64 partitions = 2;
}

message MetadataPublisher {
  optional Position pos = 1;
  repeated Ref topics = 2;
}

message MetadataRetry {
  optional Position pos = 1;
  optional int64 count = 2;
  string min_backoff = 3;
  string max_backoff = 4;
  optional Ref catch = 5;
}

// MetadataSQLColumn designates a database column.
message MetadataSQLColumn {
  optional Position pos = 1;
  string table = 2;
  string name = 3;
}

message MetadataSQLMigration {
  optional Position pos = 1;
  string digest = 2;
}

// MetadataSQLQuery designates a query verb; a verb generated from a SQL query.
message MetadataSQLQuery {
  optional Position pos = 1;
  string command = 2;
  string query = 3;
}

// MetadataSecrets represents a metadata block with a list of config items that are used.
message MetadataSecrets {
  optional Position pos = 1;
  repeated Ref secrets = 2;
}

message MetadataSubscriber {
  optional Position pos = 1;
  Ref topic = 2;
  FromOffset from_offset = 3;
  bool dead_letter = 4;
}

// MetadataTransaction identifies a verb that serves as a transaction boundary.
message MetadataTransaction {
  optional Position pos = 1;
}

message MetadataTypeMap {
  optional Position pos = 1;
  string runtime = 2;
  string native_name = 3;
}

message Module {
  optional Position pos = 1;
  repeated string comments = 2;
  bool builtin = 3;
  string name = 4;
  repeated Metadata metadata = 6;
  repeated Decl decls = 5;
  ModuleRuntime runtime = 31634;
}

// ModuleRuntime is runtime configuration for a module that can be dynamically updated.
message ModuleRuntime {
  ModuleRuntimeBase base = 1;
  optional ModuleRuntimeScaling scaling = 2;
  optional ModuleRuntimeDeployment deployment = 3;
  optional ModuleRuntimeRunner runner = 4;
}

message ModuleRuntimeBase {
  google.protobuf.Timestamp create_time = 1;
  string language = 2;
  optional string os = 3;
  optional string arch = 4;
  optional string image = 5;
}

message ModuleRuntimeDeployment {
  string deployment_key = 2;
  google.protobuf.Timestamp created_at = 3;
  optional google.protobuf.Timestamp activated_at = 4;
  DeploymentState state = 5;
}

message ModuleRuntimeRunner {
  string endpoint = 1;
  bool runner_not_required = 2;
}

message ModuleRuntimeScaling {
  int32 min_replicas = 1;
}

message Notification {
  oneof value {
    ChangesetCommittedNotification changeset_committed_notification = 5;
    ChangesetCreatedNotification changeset_created_notification = 3;
    ChangesetDrainedNotification changeset_drained_notification = 6;
    ChangesetFailedNotification changeset_failed_notification = 9;
    ChangesetFinalizedNotification changeset_finalized_notification = 7;
    ChangesetPreparedNotification changeset_prepared_notification = 4;
    ChangesetRollingBackNotification changeset_rolling_back_notification = 8;
    DeploymentRuntimeNotification deployment_runtime_notification = 2;
    FullSchemaNotification full_schema_notification = 1;
  }
}

// Optional represents a Type whose value may be optional.
message Optional {
  optional Position pos = 1;
  optional Type type = 2;
}

// PlaintextKafkaSubscriptionConnector is a non TLS subscription connector to a kafka cluster.
message PlaintextKafkaSubscriptionConnector {
  repeated string kafka_brokers = 1;
}

message Position {
  string filename = 1;
  int64 line = 2;
  int64 column = 3;
}

message Realm {
  Position pos = 1;
  bool external = 2;
  string name = 3;
  repeated Module modules = 4;
}

message RealmChange {
  string name = 1;
  bool external = 2;
  repeated Module modules = 3;
  repeated string to_remove = 4;
  repeated Module removing_modules = 5;
}

message RealmState {
  string name = 1;
  bool external = 2;
}

// Ref is an untyped reference to a symbol.
message Ref {
  optional Position pos = 1;
  string module = 3;
  string name = 2;
  repeated Type type_parameters = 4;
}

message Runtime {
  oneof value {
    DatabaseRuntime database_runtime = 6;
    ModuleRuntimeDeployment module_runtime_deployment = 1;
    ModuleRuntimeRunner module_runtime_runner = 3;
    ModuleRuntimeScaling module_runtime_scaling = 2;
    TopicRuntime topic_runtime = 5;
    VerbRuntime verb_runtime = 4;
  }
}

message RuntimeElement {
  Runtime element = 1;
  string deployment = 2;
  optional string name = 3;
}

message Schema {
  optional Position pos = 1;
  repeated Realm realms = 2;
}

// SchemaState is the schema service state as persisted in Raft
message SchemaState {
  repeated Module modules = 1;
  repeated Changeset changesets = 2;
  repeated DeploymentRuntimeEvent changeset_events = 3;
  repeated DeploymentRuntimeEvent deployment_events = 4;
  repeated RealmState realms = 5;
}

message Secret {
  optional Position pos = 1;
  repeated string comments = 2;
  string name = 3;
  Type type = 4;
}

message String {
  optional Position pos = 1;
}

message StringValue {
  optional Position pos = 1;
  string value = 2;
}

// SubscriptionConnector is a connector to subscribe to a topic.
message SubscriptionConnector {
  oneof value {
    PlaintextKafkaSubscriptionConnector plaintext_kafka_subscription_connector = 1;
  }
}

message Time {
  optional Position pos = 1;
}

message Topic {
  optional Position pos = 1;
  optional TopicRuntime runtime = 31634;
  repeated string comments = 2;
  bool export = 3;
  string name = 4;
  Type event = 5;
  repeated Metadata metadata = 6;
}

message TopicRuntime {
  repeated string kafka_brokers = 1;
  string topic_id = 2;
}

// Type represents a Type Node in the schema grammar.
message Type {
  oneof value {
    Any any = 9;
    Array array = 7;
    Bool bool = 5;
    Bytes bytes = 4;
    Float float = 2;
    Int int = 1;
    Map map = 8;
    Optional optional = 12;
    Ref ref = 11;
    String string = 3;
    Time time = 6;
    Unit unit = 10;
  }
}

message TypeAlias {
  optional Position pos = 1;
  repeated string comments = 2;
  bool export = 3;
  string name = 4;
  Type type = 5;
  repeated Metadata metadata = 6;
}

message TypeParameter {
  optional Position pos = 1;
  string name = 2;
}

message TypeValue {
  optional Position pos = 1;
  Type value = 2;
}

message Unit {
  optional Position pos = 1;
}

// Value represents a value Node in the schema grammar.
message Value {
  oneof value {
    IntValue int_value = 2;
    StringValue string_value = 1;
    TypeValue type_value = 3;
  }
}

message Verb {
  optional Position pos = 1;
  repeated string comments = 2;
  bool export = 3;
  string name = 4;
  Type request = 5;
  Type response = 6;
  repeated Metadata metadata = 7;
  optional VerbRuntime runtime = 31634;
}

message VerbRuntime {
  optional SubscriptionConnector subscription_connector = 1;
}
